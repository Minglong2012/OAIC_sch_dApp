# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _blocks_swig9
else:
    import _blocks_swig9

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def high_res_timer_now() -> "gr::high_res_timer_type":
    r"""high_res_timer_now() -> gr::high_res_timer_type"""
    return _blocks_swig9.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    r"""high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _blocks_swig9.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    r"""high_res_timer_tps() -> gr::high_res_timer_type"""
    return _blocks_swig9.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    r"""high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _blocks_swig9.high_res_timer_epoch()
class float_to_char(object):
    r"""
    Convert stream of floats to a stream of char.

    Constructor Specific Documentation:

    Build a float to char block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1, scale: "float"=1.0) -> "gr::blocks::float_to_char::sptr":
        r"""
        make(size_t vlen=1, float scale=1.0) -> float_to_char_sptr
        Convert stream of floats to a stream of char.

        Constructor Specific Documentation:

        Build a float to char block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig9.float_to_char_make(vlen, scale)

    def scale(self) -> "float":
        r"""
        scale(float_to_char self) -> float
        Get the scalar multiplier value.
        """
        return _blocks_swig9.float_to_char_scale(self)

    def set_scale(self, scale: "float") -> "void":
        r"""
        set_scale(float_to_char self, float scale)
        Set the scalar multiplier value.
        """
        return _blocks_swig9.float_to_char_set_scale(self, scale)
    __swig_destroy__ = _blocks_swig9.delete_float_to_char

# Register float_to_char in _blocks_swig9:
_blocks_swig9.float_to_char_swigregister(float_to_char)

def float_to_char_make(vlen: "size_t"=1, scale: "float"=1.0) -> "gr::blocks::float_to_char::sptr":
    r"""
    float_to_char_make(size_t vlen=1, float scale=1.0) -> float_to_char_sptr
    Convert stream of floats to a stream of char.

    Constructor Specific Documentation:

    Build a float to char block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
    return _blocks_swig9.float_to_char_make(vlen, scale)

class float_to_complex(object):
    r"""
    one or two floats in, complex out

    Constructor Specific Documentation:

    Build a float to complex block.

    Args:
        vlen : vector len (default 1)
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::float_to_complex::sptr":
        r"""
        make(size_t vlen=1) -> float_to_complex_sptr
        one or two floats in, complex out

        Constructor Specific Documentation:

        Build a float to complex block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig9.float_to_complex_make(vlen)
    __swig_destroy__ = _blocks_swig9.delete_float_to_complex

# Register float_to_complex in _blocks_swig9:
_blocks_swig9.float_to_complex_swigregister(float_to_complex)

def float_to_complex_make(vlen: "size_t"=1) -> "gr::blocks::float_to_complex::sptr":
    r"""
    float_to_complex_make(size_t vlen=1) -> float_to_complex_sptr
    one or two floats in, complex out

    Constructor Specific Documentation:

    Build a float to complex block.

    Args:
        vlen : vector len (default 1)
    """
    return _blocks_swig9.float_to_complex_make(vlen)

class magphase_to_complex(object):
    r"""
    two floats in (mag and phase), complex out

    Constructor Specific Documentation:

    Build a mag and phase to complex block.

    Args:
        vlen : vector len (default 1)
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::magphase_to_complex::sptr":
        r"""
        make(size_t vlen=1) -> magphase_to_complex_sptr
        two floats in (mag and phase), complex out

        Constructor Specific Documentation:

        Build a mag and phase to complex block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig9.magphase_to_complex_make(vlen)
    __swig_destroy__ = _blocks_swig9.delete_magphase_to_complex

# Register magphase_to_complex in _blocks_swig9:
_blocks_swig9.magphase_to_complex_swigregister(magphase_to_complex)

def magphase_to_complex_make(vlen: "size_t"=1) -> "gr::blocks::magphase_to_complex::sptr":
    r"""
    magphase_to_complex_make(size_t vlen=1) -> magphase_to_complex_sptr
    two floats in (mag and phase), complex out

    Constructor Specific Documentation:

    Build a mag and phase to complex block.

    Args:
        vlen : vector len (default 1)
    """
    return _blocks_swig9.magphase_to_complex_make(vlen)

class float_to_int(object):
    r"""
    Convert stream of floats to a stream of ints.

    Constructor Specific Documentation:

    Build a float to int block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1, scale: "float"=1.0) -> "gr::blocks::float_to_int::sptr":
        r"""
        make(size_t vlen=1, float scale=1.0) -> float_to_int_sptr
        Convert stream of floats to a stream of ints.

        Constructor Specific Documentation:

        Build a float to int block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig9.float_to_int_make(vlen, scale)

    def scale(self) -> "float":
        r"""
        scale(float_to_int self) -> float
        Get the scalar multiplier value.
        """
        return _blocks_swig9.float_to_int_scale(self)

    def set_scale(self, scale: "float") -> "void":
        r"""
        set_scale(float_to_int self, float scale)
        Set the scalar multiplier value.
        """
        return _blocks_swig9.float_to_int_set_scale(self, scale)
    __swig_destroy__ = _blocks_swig9.delete_float_to_int

# Register float_to_int in _blocks_swig9:
_blocks_swig9.float_to_int_swigregister(float_to_int)

def float_to_int_make(vlen: "size_t"=1, scale: "float"=1.0) -> "gr::blocks::float_to_int::sptr":
    r"""
    float_to_int_make(size_t vlen=1, float scale=1.0) -> float_to_int_sptr
    Convert stream of floats to a stream of ints.

    Constructor Specific Documentation:

    Build a float to int block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
    return _blocks_swig9.float_to_int_make(vlen, scale)

class float_to_short(object):
    r"""
    Convert stream of floats to a stream of shorts.

    Constructor Specific Documentation:

    Build a float to short block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1, scale: "float"=1.0) -> "gr::blocks::float_to_short::sptr":
        r"""
        make(size_t vlen=1, float scale=1.0) -> float_to_short_sptr
        Convert stream of floats to a stream of shorts.

        Constructor Specific Documentation:

        Build a float to short block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig9.float_to_short_make(vlen, scale)

    def scale(self) -> "float":
        r"""
        scale(float_to_short self) -> float
        Get the scalar multiplier value.
        """
        return _blocks_swig9.float_to_short_scale(self)

    def set_scale(self, scale: "float") -> "void":
        r"""
        set_scale(float_to_short self, float scale)
        Set the scalar multiplier value.
        """
        return _blocks_swig9.float_to_short_set_scale(self, scale)
    __swig_destroy__ = _blocks_swig9.delete_float_to_short

# Register float_to_short in _blocks_swig9:
_blocks_swig9.float_to_short_swigregister(float_to_short)

def float_to_short_make(vlen: "size_t"=1, scale: "float"=1.0) -> "gr::blocks::float_to_short::sptr":
    r"""
    float_to_short_make(size_t vlen=1, float scale=1.0) -> float_to_short_sptr
    Convert stream of floats to a stream of shorts.

    Constructor Specific Documentation:

    Build a float to short block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
    return _blocks_swig9.float_to_short_make(vlen, scale)

class float_to_uchar(object):
    r"""
    Convert stream of floats to a stream of unsigned chars.

    Constructor Specific Documentation:

    Build a float to uchar block.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::blocks::float_to_uchar::sptr":
        r"""
        make() -> float_to_uchar_sptr
        Convert stream of floats to a stream of unsigned chars.

        Constructor Specific Documentation:

        Build a float to uchar block.
        """
        return _blocks_swig9.float_to_uchar_make()
    __swig_destroy__ = _blocks_swig9.delete_float_to_uchar

# Register float_to_uchar in _blocks_swig9:
_blocks_swig9.float_to_uchar_swigregister(float_to_uchar)

def float_to_uchar_make() -> "gr::blocks::float_to_uchar::sptr":
    r"""
    float_to_uchar_make() -> float_to_uchar_sptr
    Convert stream of floats to a stream of unsigned chars.

    Constructor Specific Documentation:

    Build a float to uchar block.
    """
    return _blocks_swig9.float_to_uchar_make()

class int_to_float(object):
    r"""
    Convert stream of ints to a stream of floats.

    Constructor Specific Documentation:

    Build an int to float block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar divider to change the output signal scale.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1, scale: "float"=1.0) -> "gr::blocks::int_to_float::sptr":
        r"""
        make(size_t vlen=1, float scale=1.0) -> int_to_float_sptr
        Convert stream of ints to a stream of floats.

        Constructor Specific Documentation:

        Build an int to float block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar divider to change the output signal scale.
        """
        return _blocks_swig9.int_to_float_make(vlen, scale)

    def scale(self) -> "float":
        r"""
        scale(int_to_float self) -> float
        Get the scalar divider value.
        """
        return _blocks_swig9.int_to_float_scale(self)

    def set_scale(self, scale: "float") -> "void":
        r"""
        set_scale(int_to_float self, float scale)
        Set the scalar divider value.
        """
        return _blocks_swig9.int_to_float_set_scale(self, scale)
    __swig_destroy__ = _blocks_swig9.delete_int_to_float

# Register int_to_float in _blocks_swig9:
_blocks_swig9.int_to_float_swigregister(int_to_float)

def int_to_float_make(vlen: "size_t"=1, scale: "float"=1.0) -> "gr::blocks::int_to_float::sptr":
    r"""
    int_to_float_make(size_t vlen=1, float scale=1.0) -> int_to_float_sptr
    Convert stream of ints to a stream of floats.

    Constructor Specific Documentation:

    Build an int to float block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar divider to change the output signal scale.
    """
    return _blocks_swig9.int_to_float_make(vlen, scale)

class interleave(object):
    r"""
    interleave N inputs into a single output

    This block interleaves blocks of samples. For each input connection, the samples are interleaved successively to the output connection. By default, the block interleaves a single sample from each input to the output unless blocksize is given in the constructor.

    Constructor Specific Documentation:

    Make a stream interleave block.

    Args:
        itemsize : stream itemsize
        blocksize : size of block of samples to interleave
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(itemsize: "size_t", blocksize: "unsigned int"=1) -> "gr::blocks::interleave::sptr":
        r"""
        make(size_t itemsize, unsigned int blocksize=1) -> interleave_sptr
        interleave N inputs into a single output

        This block interleaves blocks of samples. For each input connection, the samples are interleaved successively to the output connection. By default, the block interleaves a single sample from each input to the output unless blocksize is given in the constructor.

        Constructor Specific Documentation:

        Make a stream interleave block.

        Args:
            itemsize : stream itemsize
            blocksize : size of block of samples to interleave
        """
        return _blocks_swig9.interleave_make(itemsize, blocksize)
    __swig_destroy__ = _blocks_swig9.delete_interleave

# Register interleave in _blocks_swig9:
_blocks_swig9.interleave_swigregister(interleave)

def interleave_make(itemsize: "size_t", blocksize: "unsigned int"=1) -> "gr::blocks::interleave::sptr":
    r"""
    interleave_make(size_t itemsize, unsigned int blocksize=1) -> interleave_sptr
    interleave N inputs into a single output

    This block interleaves blocks of samples. For each input connection, the samples are interleaved successively to the output connection. By default, the block interleaves a single sample from each input to the output unless blocksize is given in the constructor.

    Constructor Specific Documentation:

    Make a stream interleave block.

    Args:
        itemsize : stream itemsize
        blocksize : size of block of samples to interleave
    """
    return _blocks_swig9.interleave_make(itemsize, blocksize)

class interleaved_short_to_complex(object):
    r"""
    Convert stream of interleaved shorts to a stream of complex.

    Constructor Specific Documentation:

    Build an interleaved short to complex block.

    Args:
        vector_input : 
        swap : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(vector_input: "bool"=False, swap: "bool"=False) -> "gr::blocks::interleaved_short_to_complex::sptr":
        r"""
        make(bool vector_input=False, bool swap=False) -> interleaved_short_to_complex_sptr
        Convert stream of interleaved shorts to a stream of complex.

        Constructor Specific Documentation:

        Build an interleaved short to complex block.

        Args:
            vector_input : 
            swap : 
        """
        return _blocks_swig9.interleaved_short_to_complex_make(vector_input, swap)

    def set_swap(self, swap: "bool") -> "void":
        r"""set_swap(interleaved_short_to_complex self, bool swap)"""
        return _blocks_swig9.interleaved_short_to_complex_set_swap(self, swap)
    __swig_destroy__ = _blocks_swig9.delete_interleaved_short_to_complex

# Register interleaved_short_to_complex in _blocks_swig9:
_blocks_swig9.interleaved_short_to_complex_swigregister(interleaved_short_to_complex)

def interleaved_short_to_complex_make(vector_input: "bool"=False, swap: "bool"=False) -> "gr::blocks::interleaved_short_to_complex::sptr":
    r"""
    interleaved_short_to_complex_make(bool vector_input=False, bool swap=False) -> interleaved_short_to_complex_sptr
    Convert stream of interleaved shorts to a stream of complex.

    Constructor Specific Documentation:

    Build an interleaved short to complex block.

    Args:
        vector_input : 
        swap : 
    """
    return _blocks_swig9.interleaved_short_to_complex_make(vector_input, swap)

class interleaved_char_to_complex(object):
    r"""
    Convert stream of interleaved chars to a stream of complex.

    Constructor Specific Documentation:

    Build an interleaved char to complex block.

    Args:
        vector_input : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vector_input: "bool"=False) -> "gr::blocks::interleaved_char_to_complex::sptr":
        r"""
        make(bool vector_input=False) -> interleaved_char_to_complex_sptr
        Convert stream of interleaved chars to a stream of complex.

        Constructor Specific Documentation:

        Build an interleaved char to complex block.

        Args:
            vector_input : 
        """
        return _blocks_swig9.interleaved_char_to_complex_make(vector_input)
    __swig_destroy__ = _blocks_swig9.delete_interleaved_char_to_complex

# Register interleaved_char_to_complex in _blocks_swig9:
_blocks_swig9.interleaved_char_to_complex_swigregister(interleaved_char_to_complex)

def interleaved_char_to_complex_make(vector_input: "bool"=False) -> "gr::blocks::interleaved_char_to_complex::sptr":
    r"""
    interleaved_char_to_complex_make(bool vector_input=False) -> interleaved_char_to_complex_sptr
    Convert stream of interleaved chars to a stream of complex.

    Constructor Specific Documentation:

    Build an interleaved char to complex block.

    Args:
        vector_input : 
    """
    return _blocks_swig9.interleaved_char_to_complex_make(vector_input)

class keep_m_in_n(object):
    r"""
    decimate a stream, keeping the first  items out of every  starting after  items.

    Constructor Specific Documentation:

    Make a keep m in n block.

    Args:
        itemsize : stream itemsize
        m : number of items to take in block of  items
        n : block size in items
        offset : initial item offset into the stream
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(itemsize: "size_t", m: "int", n: "int", offset: "int") -> "gr::blocks::keep_m_in_n::sptr":
        r"""
        make(size_t itemsize, int m, int n, int offset) -> keep_m_in_n_sptr
        decimate a stream, keeping the first  items out of every  starting after  items.

        Constructor Specific Documentation:

        Make a keep m in n block.

        Args:
            itemsize : stream itemsize
            m : number of items to take in block of  items
            n : block size in items
            offset : initial item offset into the stream
        """
        return _blocks_swig9.keep_m_in_n_make(itemsize, m, n, offset)

    def set_m(self, m: "int") -> "void":
        r"""set_m(keep_m_in_n self, int m)"""
        return _blocks_swig9.keep_m_in_n_set_m(self, m)

    def set_n(self, n: "int") -> "void":
        r"""set_n(keep_m_in_n self, int n)"""
        return _blocks_swig9.keep_m_in_n_set_n(self, n)

    def set_offset(self, offset: "int") -> "void":
        r"""set_offset(keep_m_in_n self, int offset)"""
        return _blocks_swig9.keep_m_in_n_set_offset(self, offset)
    __swig_destroy__ = _blocks_swig9.delete_keep_m_in_n

# Register keep_m_in_n in _blocks_swig9:
_blocks_swig9.keep_m_in_n_swigregister(keep_m_in_n)

def keep_m_in_n_make(itemsize: "size_t", m: "int", n: "int", offset: "int") -> "gr::blocks::keep_m_in_n::sptr":
    r"""
    keep_m_in_n_make(size_t itemsize, int m, int n, int offset) -> keep_m_in_n_sptr
    decimate a stream, keeping the first  items out of every  starting after  items.

    Constructor Specific Documentation:

    Make a keep m in n block.

    Args:
        itemsize : stream itemsize
        m : number of items to take in block of  items
        n : block size in items
        offset : initial item offset into the stream
    """
    return _blocks_swig9.keep_m_in_n_make(itemsize, m, n, offset)

class keep_one_in_n(object):
    r"""
    decimate a stream, keeping the last item out of every .

    Constructor Specific Documentation:

    Make a keep one in n block.

    Args:
        itemsize : stream itemsize
        n : block size in items
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(itemsize: "size_t", n: "int") -> "gr::blocks::keep_one_in_n::sptr":
        r"""
        make(size_t itemsize, int n) -> keep_one_in_n_sptr
        decimate a stream, keeping the last item out of every .

        Constructor Specific Documentation:

        Make a keep one in n block.

        Args:
            itemsize : stream itemsize
            n : block size in items
        """
        return _blocks_swig9.keep_one_in_n_make(itemsize, n)

    def set_n(self, n: "int") -> "void":
        r"""set_n(keep_one_in_n self, int n)"""
        return _blocks_swig9.keep_one_in_n_set_n(self, n)
    __swig_destroy__ = _blocks_swig9.delete_keep_one_in_n

# Register keep_one_in_n in _blocks_swig9:
_blocks_swig9.keep_one_in_n_swigregister(keep_one_in_n)

def keep_one_in_n_make(itemsize: "size_t", n: "int") -> "gr::blocks::keep_one_in_n::sptr":
    r"""
    keep_one_in_n_make(size_t itemsize, int n) -> keep_one_in_n_sptr
    decimate a stream, keeping the last item out of every .

    Constructor Specific Documentation:

    Make a keep one in n block.

    Args:
        itemsize : stream itemsize
        n : block size in items
    """
    return _blocks_swig9.keep_one_in_n_make(itemsize, n)

class lfsr_32k_source_s(object):
    r"""
    LFSR pseudo-random source with period of 2^15 bits (2^11 shorts)

    This source is typically used along with gr::blocks::check_lfsr_32k_s to test the USRP using its digital loopback mode.

    Constructor Specific Documentation:

    Make a LFSR 32k source block.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::blocks::lfsr_32k_source_s::sptr":
        r"""
        make() -> lfsr_32k_source_s_sptr
        LFSR pseudo-random source with period of 2^15 bits (2^11 shorts)

        This source is typically used along with gr::blocks::check_lfsr_32k_s to test the USRP using its digital loopback mode.

        Constructor Specific Documentation:

        Make a LFSR 32k source block.
        """
        return _blocks_swig9.lfsr_32k_source_s_make()
    __swig_destroy__ = _blocks_swig9.delete_lfsr_32k_source_s

# Register lfsr_32k_source_s in _blocks_swig9:
_blocks_swig9.lfsr_32k_source_s_swigregister(lfsr_32k_source_s)

def lfsr_32k_source_s_make() -> "gr::blocks::lfsr_32k_source_s::sptr":
    r"""
    lfsr_32k_source_s_make() -> lfsr_32k_source_s_sptr
    LFSR pseudo-random source with period of 2^15 bits (2^11 shorts)

    This source is typically used along with gr::blocks::check_lfsr_32k_s to test the USRP using its digital loopback mode.

    Constructor Specific Documentation:

    Make a LFSR 32k source block.
    """
    return _blocks_swig9.lfsr_32k_source_s_make()

class float_to_char_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::float_to_char > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(float_to_char_sptr self) -> float_to_char_sptr
        __init__(float_to_char_sptr self, float_to_char p) -> float_to_char_sptr
        """
        _blocks_swig9.float_to_char_sptr_swiginit(self, _blocks_swig9.new_float_to_char_sptr(*args))

    def __deref__(self) -> "gr::blocks::float_to_char *":
        r"""__deref__(float_to_char_sptr self) -> float_to_char"""
        return _blocks_swig9.float_to_char_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_float_to_char_sptr

    def make(self, vlen: "size_t"=1, scale: "float"=1.0) -> "gr::blocks::float_to_char::sptr":
        r"""
        make(float_to_char_sptr self, size_t vlen=1, float scale=1.0) -> float_to_char_sptr
        Convert stream of floats to a stream of char.

        Constructor Specific Documentation:

        Build a float to char block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig9.float_to_char_sptr_make(self, vlen, scale)

    def scale(self) -> "float":
        r"""
        scale(float_to_char_sptr self) -> float
        Get the scalar multiplier value.
        """
        return _blocks_swig9.float_to_char_sptr_scale(self)

    def set_scale(self, scale: "float") -> "void":
        r"""
        set_scale(float_to_char_sptr self, float scale)
        Set the scalar multiplier value.
        """
        return _blocks_swig9.float_to_char_sptr_set_scale(self, scale)

    def history(self) -> "unsigned int":
        r"""history(float_to_char_sptr self) -> unsigned int"""
        return _blocks_swig9.float_to_char_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(float_to_char_sptr self, int which, int delay)
        declare_sample_delay(float_to_char_sptr self, unsigned int delay)
        """
        return _blocks_swig9.float_to_char_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(float_to_char_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.float_to_char_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(float_to_char_sptr self, int multiple)"""
        return _blocks_swig9.float_to_char_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(float_to_char_sptr self) -> int"""
        return _blocks_swig9.float_to_char_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(float_to_char_sptr self) -> double"""
        return _blocks_swig9.float_to_char_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(float_to_char_sptr self) -> uint64_t"""
        return _blocks_swig9.float_to_char_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(float_to_char_sptr self) -> uint64_t"""
        return _blocks_swig9.float_to_char_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(float_to_char_sptr self) -> bool"""
        return _blocks_swig9.float_to_char_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(float_to_char_sptr self) -> bool"""
        return _blocks_swig9.float_to_char_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(float_to_char_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.float_to_char_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(float_to_char_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.float_to_char_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(float_to_char_sptr self, std::string level)"""
        return _blocks_swig9.float_to_char_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(float_to_char_sptr self) -> std::string"""
        return _blocks_swig9.float_to_char_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(float_to_char_sptr self) -> int"""
        return _blocks_swig9.float_to_char_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(float_to_char_sptr self, int m)"""
        return _blocks_swig9.float_to_char_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(float_to_char_sptr self)"""
        return _blocks_swig9.float_to_char_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(float_to_char_sptr self) -> bool"""
        return _blocks_swig9.float_to_char_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(float_to_char_sptr self, int m)"""
        return _blocks_swig9.float_to_char_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(float_to_char_sptr self) -> int"""
        return _blocks_swig9.float_to_char_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(float_to_char_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_char_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(float_to_char_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_char_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.float_to_char_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(float_to_char_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_char_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(float_to_char_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_char_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.float_to_char_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(float_to_char_sptr self, int which) -> float
        pc_input_buffers_full(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_char_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(float_to_char_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_char_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(float_to_char_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_char_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(float_to_char_sptr self, int which) -> float
        pc_output_buffers_full(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_char_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(float_to_char_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_char_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(float_to_char_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_char_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(float_to_char_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.float_to_char_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(float_to_char_sptr self)"""
        return _blocks_swig9.float_to_char_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(float_to_char_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.float_to_char_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(float_to_char_sptr self) -> int"""
        return _blocks_swig9.float_to_char_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(float_to_char_sptr self) -> int"""
        return _blocks_swig9.float_to_char_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(float_to_char_sptr self, int priority) -> int"""
        return _blocks_swig9.float_to_char_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(float_to_char_sptr self) -> std::string"""
        return _blocks_swig9.float_to_char_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(float_to_char_sptr self) -> std::string"""
        return _blocks_swig9.float_to_char_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(float_to_char_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_char_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(float_to_char_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_char_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(float_to_char_sptr self) -> long"""
        return _blocks_swig9.float_to_char_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(float_to_char_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.float_to_char_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(float_to_char_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.float_to_char_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(float_to_char_sptr self) -> std::string"""
        return _blocks_swig9.float_to_char_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(float_to_char_sptr self, std::string name)"""
        return _blocks_swig9.float_to_char_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(float_to_char_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.float_to_char_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(float_to_char_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_char_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(float_to_char_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_char_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(float_to_char_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_char_sptr_message_subscribers(self, which_port)

# Register float_to_char_sptr in _blocks_swig9:
_blocks_swig9.float_to_char_sptr_swigregister(float_to_char_sptr)


float_to_char_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_char = float_to_char.make;

class float_to_complex_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::float_to_complex > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(float_to_complex_sptr self) -> float_to_complex_sptr
        __init__(float_to_complex_sptr self, float_to_complex p) -> float_to_complex_sptr
        """
        _blocks_swig9.float_to_complex_sptr_swiginit(self, _blocks_swig9.new_float_to_complex_sptr(*args))

    def __deref__(self) -> "gr::blocks::float_to_complex *":
        r"""__deref__(float_to_complex_sptr self) -> float_to_complex"""
        return _blocks_swig9.float_to_complex_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_float_to_complex_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::float_to_complex::sptr":
        r"""
        make(float_to_complex_sptr self, size_t vlen=1) -> float_to_complex_sptr
        one or two floats in, complex out

        Constructor Specific Documentation:

        Build a float to complex block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig9.float_to_complex_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(float_to_complex_sptr self) -> unsigned int"""
        return _blocks_swig9.float_to_complex_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(float_to_complex_sptr self, int which, int delay)
        declare_sample_delay(float_to_complex_sptr self, unsigned int delay)
        """
        return _blocks_swig9.float_to_complex_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(float_to_complex_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.float_to_complex_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(float_to_complex_sptr self, int multiple)"""
        return _blocks_swig9.float_to_complex_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(float_to_complex_sptr self) -> int"""
        return _blocks_swig9.float_to_complex_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(float_to_complex_sptr self) -> double"""
        return _blocks_swig9.float_to_complex_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(float_to_complex_sptr self) -> uint64_t"""
        return _blocks_swig9.float_to_complex_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(float_to_complex_sptr self) -> uint64_t"""
        return _blocks_swig9.float_to_complex_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(float_to_complex_sptr self) -> bool"""
        return _blocks_swig9.float_to_complex_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(float_to_complex_sptr self) -> bool"""
        return _blocks_swig9.float_to_complex_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(float_to_complex_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.float_to_complex_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(float_to_complex_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.float_to_complex_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(float_to_complex_sptr self, std::string level)"""
        return _blocks_swig9.float_to_complex_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(float_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.float_to_complex_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(float_to_complex_sptr self) -> int"""
        return _blocks_swig9.float_to_complex_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(float_to_complex_sptr self, int m)"""
        return _blocks_swig9.float_to_complex_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(float_to_complex_sptr self)"""
        return _blocks_swig9.float_to_complex_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(float_to_complex_sptr self) -> bool"""
        return _blocks_swig9.float_to_complex_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(float_to_complex_sptr self, int m)"""
        return _blocks_swig9.float_to_complex_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(float_to_complex_sptr self) -> int"""
        return _blocks_swig9.float_to_complex_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(float_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_complex_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(float_to_complex_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_complex_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.float_to_complex_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(float_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_complex_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(float_to_complex_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_complex_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.float_to_complex_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(float_to_complex_sptr self, int which) -> float
        pc_input_buffers_full(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_complex_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(float_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_complex_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(float_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_complex_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(float_to_complex_sptr self, int which) -> float
        pc_output_buffers_full(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_complex_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(float_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_complex_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(float_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_complex_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(float_to_complex_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.float_to_complex_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(float_to_complex_sptr self)"""
        return _blocks_swig9.float_to_complex_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(float_to_complex_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.float_to_complex_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(float_to_complex_sptr self) -> int"""
        return _blocks_swig9.float_to_complex_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(float_to_complex_sptr self) -> int"""
        return _blocks_swig9.float_to_complex_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(float_to_complex_sptr self, int priority) -> int"""
        return _blocks_swig9.float_to_complex_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(float_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.float_to_complex_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(float_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.float_to_complex_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(float_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_complex_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(float_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_complex_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(float_to_complex_sptr self) -> long"""
        return _blocks_swig9.float_to_complex_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(float_to_complex_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.float_to_complex_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(float_to_complex_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.float_to_complex_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(float_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.float_to_complex_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(float_to_complex_sptr self, std::string name)"""
        return _blocks_swig9.float_to_complex_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(float_to_complex_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.float_to_complex_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(float_to_complex_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_complex_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(float_to_complex_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_complex_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(float_to_complex_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_complex_sptr_message_subscribers(self, which_port)

# Register float_to_complex_sptr in _blocks_swig9:
_blocks_swig9.float_to_complex_sptr_swigregister(float_to_complex_sptr)


float_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_complex = float_to_complex.make;

class magphase_to_complex_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::magphase_to_complex > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(magphase_to_complex_sptr self) -> magphase_to_complex_sptr
        __init__(magphase_to_complex_sptr self, magphase_to_complex p) -> magphase_to_complex_sptr
        """
        _blocks_swig9.magphase_to_complex_sptr_swiginit(self, _blocks_swig9.new_magphase_to_complex_sptr(*args))

    def __deref__(self) -> "gr::blocks::magphase_to_complex *":
        r"""__deref__(magphase_to_complex_sptr self) -> magphase_to_complex"""
        return _blocks_swig9.magphase_to_complex_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_magphase_to_complex_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::magphase_to_complex::sptr":
        r"""
        make(magphase_to_complex_sptr self, size_t vlen=1) -> magphase_to_complex_sptr
        two floats in (mag and phase), complex out

        Constructor Specific Documentation:

        Build a mag and phase to complex block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig9.magphase_to_complex_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(magphase_to_complex_sptr self) -> unsigned int"""
        return _blocks_swig9.magphase_to_complex_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(magphase_to_complex_sptr self, int which, int delay)
        declare_sample_delay(magphase_to_complex_sptr self, unsigned int delay)
        """
        return _blocks_swig9.magphase_to_complex_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(magphase_to_complex_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.magphase_to_complex_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(magphase_to_complex_sptr self, int multiple)"""
        return _blocks_swig9.magphase_to_complex_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(magphase_to_complex_sptr self) -> int"""
        return _blocks_swig9.magphase_to_complex_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(magphase_to_complex_sptr self) -> double"""
        return _blocks_swig9.magphase_to_complex_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(magphase_to_complex_sptr self) -> uint64_t"""
        return _blocks_swig9.magphase_to_complex_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(magphase_to_complex_sptr self) -> uint64_t"""
        return _blocks_swig9.magphase_to_complex_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(magphase_to_complex_sptr self) -> bool"""
        return _blocks_swig9.magphase_to_complex_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(magphase_to_complex_sptr self) -> bool"""
        return _blocks_swig9.magphase_to_complex_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(magphase_to_complex_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.magphase_to_complex_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(magphase_to_complex_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.magphase_to_complex_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(magphase_to_complex_sptr self, std::string level)"""
        return _blocks_swig9.magphase_to_complex_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(magphase_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.magphase_to_complex_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(magphase_to_complex_sptr self) -> int"""
        return _blocks_swig9.magphase_to_complex_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(magphase_to_complex_sptr self, int m)"""
        return _blocks_swig9.magphase_to_complex_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(magphase_to_complex_sptr self)"""
        return _blocks_swig9.magphase_to_complex_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(magphase_to_complex_sptr self) -> bool"""
        return _blocks_swig9.magphase_to_complex_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(magphase_to_complex_sptr self, int m)"""
        return _blocks_swig9.magphase_to_complex_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(magphase_to_complex_sptr self) -> int"""
        return _blocks_swig9.magphase_to_complex_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(magphase_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.magphase_to_complex_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(magphase_to_complex_sptr self, long max_output_buffer)
        set_max_output_buffer(magphase_to_complex_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.magphase_to_complex_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(magphase_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.magphase_to_complex_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(magphase_to_complex_sptr self, long min_output_buffer)
        set_min_output_buffer(magphase_to_complex_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.magphase_to_complex_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(magphase_to_complex_sptr self, int which) -> float
        pc_input_buffers_full(magphase_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.magphase_to_complex_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(magphase_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_avg(magphase_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.magphase_to_complex_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(magphase_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_var(magphase_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.magphase_to_complex_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(magphase_to_complex_sptr self, int which) -> float
        pc_output_buffers_full(magphase_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.magphase_to_complex_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(magphase_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_avg(magphase_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.magphase_to_complex_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(magphase_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_var(magphase_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.magphase_to_complex_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(magphase_to_complex_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.magphase_to_complex_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(magphase_to_complex_sptr self)"""
        return _blocks_swig9.magphase_to_complex_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(magphase_to_complex_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.magphase_to_complex_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(magphase_to_complex_sptr self) -> int"""
        return _blocks_swig9.magphase_to_complex_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(magphase_to_complex_sptr self) -> int"""
        return _blocks_swig9.magphase_to_complex_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(magphase_to_complex_sptr self, int priority) -> int"""
        return _blocks_swig9.magphase_to_complex_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(magphase_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.magphase_to_complex_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(magphase_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.magphase_to_complex_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(magphase_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.magphase_to_complex_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(magphase_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.magphase_to_complex_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(magphase_to_complex_sptr self) -> long"""
        return _blocks_swig9.magphase_to_complex_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(magphase_to_complex_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.magphase_to_complex_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(magphase_to_complex_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.magphase_to_complex_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(magphase_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.magphase_to_complex_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(magphase_to_complex_sptr self, std::string name)"""
        return _blocks_swig9.magphase_to_complex_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(magphase_to_complex_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.magphase_to_complex_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(magphase_to_complex_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.magphase_to_complex_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(magphase_to_complex_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.magphase_to_complex_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(magphase_to_complex_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.magphase_to_complex_sptr_message_subscribers(self, which_port)

# Register magphase_to_complex_sptr in _blocks_swig9:
_blocks_swig9.magphase_to_complex_sptr_swigregister(magphase_to_complex_sptr)


magphase_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
magphase_to_complex = magphase_to_complex.make;

class float_to_int_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::float_to_int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(float_to_int_sptr self) -> float_to_int_sptr
        __init__(float_to_int_sptr self, float_to_int p) -> float_to_int_sptr
        """
        _blocks_swig9.float_to_int_sptr_swiginit(self, _blocks_swig9.new_float_to_int_sptr(*args))

    def __deref__(self) -> "gr::blocks::float_to_int *":
        r"""__deref__(float_to_int_sptr self) -> float_to_int"""
        return _blocks_swig9.float_to_int_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_float_to_int_sptr

    def make(self, vlen: "size_t"=1, scale: "float"=1.0) -> "gr::blocks::float_to_int::sptr":
        r"""
        make(float_to_int_sptr self, size_t vlen=1, float scale=1.0) -> float_to_int_sptr
        Convert stream of floats to a stream of ints.

        Constructor Specific Documentation:

        Build a float to int block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig9.float_to_int_sptr_make(self, vlen, scale)

    def scale(self) -> "float":
        r"""
        scale(float_to_int_sptr self) -> float
        Get the scalar multiplier value.
        """
        return _blocks_swig9.float_to_int_sptr_scale(self)

    def set_scale(self, scale: "float") -> "void":
        r"""
        set_scale(float_to_int_sptr self, float scale)
        Set the scalar multiplier value.
        """
        return _blocks_swig9.float_to_int_sptr_set_scale(self, scale)

    def history(self) -> "unsigned int":
        r"""history(float_to_int_sptr self) -> unsigned int"""
        return _blocks_swig9.float_to_int_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(float_to_int_sptr self, int which, int delay)
        declare_sample_delay(float_to_int_sptr self, unsigned int delay)
        """
        return _blocks_swig9.float_to_int_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(float_to_int_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.float_to_int_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(float_to_int_sptr self, int multiple)"""
        return _blocks_swig9.float_to_int_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(float_to_int_sptr self) -> int"""
        return _blocks_swig9.float_to_int_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(float_to_int_sptr self) -> double"""
        return _blocks_swig9.float_to_int_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(float_to_int_sptr self) -> uint64_t"""
        return _blocks_swig9.float_to_int_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(float_to_int_sptr self) -> uint64_t"""
        return _blocks_swig9.float_to_int_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(float_to_int_sptr self) -> bool"""
        return _blocks_swig9.float_to_int_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(float_to_int_sptr self) -> bool"""
        return _blocks_swig9.float_to_int_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(float_to_int_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.float_to_int_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(float_to_int_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.float_to_int_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(float_to_int_sptr self, std::string level)"""
        return _blocks_swig9.float_to_int_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(float_to_int_sptr self) -> std::string"""
        return _blocks_swig9.float_to_int_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(float_to_int_sptr self) -> int"""
        return _blocks_swig9.float_to_int_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(float_to_int_sptr self, int m)"""
        return _blocks_swig9.float_to_int_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(float_to_int_sptr self)"""
        return _blocks_swig9.float_to_int_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(float_to_int_sptr self) -> bool"""
        return _blocks_swig9.float_to_int_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(float_to_int_sptr self, int m)"""
        return _blocks_swig9.float_to_int_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(float_to_int_sptr self) -> int"""
        return _blocks_swig9.float_to_int_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(float_to_int_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_int_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(float_to_int_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_int_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.float_to_int_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(float_to_int_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_int_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(float_to_int_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_int_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.float_to_int_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(float_to_int_sptr self, int which) -> float
        pc_input_buffers_full(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_int_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(float_to_int_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_int_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(float_to_int_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_int_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(float_to_int_sptr self, int which) -> float
        pc_output_buffers_full(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_int_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(float_to_int_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_int_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(float_to_int_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_int_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(float_to_int_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.float_to_int_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(float_to_int_sptr self)"""
        return _blocks_swig9.float_to_int_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(float_to_int_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.float_to_int_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(float_to_int_sptr self) -> int"""
        return _blocks_swig9.float_to_int_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(float_to_int_sptr self) -> int"""
        return _blocks_swig9.float_to_int_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(float_to_int_sptr self, int priority) -> int"""
        return _blocks_swig9.float_to_int_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(float_to_int_sptr self) -> std::string"""
        return _blocks_swig9.float_to_int_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(float_to_int_sptr self) -> std::string"""
        return _blocks_swig9.float_to_int_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(float_to_int_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_int_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(float_to_int_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_int_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(float_to_int_sptr self) -> long"""
        return _blocks_swig9.float_to_int_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(float_to_int_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.float_to_int_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(float_to_int_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.float_to_int_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(float_to_int_sptr self) -> std::string"""
        return _blocks_swig9.float_to_int_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(float_to_int_sptr self, std::string name)"""
        return _blocks_swig9.float_to_int_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(float_to_int_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.float_to_int_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(float_to_int_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_int_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(float_to_int_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_int_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(float_to_int_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_int_sptr_message_subscribers(self, which_port)

# Register float_to_int_sptr in _blocks_swig9:
_blocks_swig9.float_to_int_sptr_swigregister(float_to_int_sptr)


float_to_int_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_int = float_to_int.make;

class float_to_short_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::float_to_short > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(float_to_short_sptr self) -> float_to_short_sptr
        __init__(float_to_short_sptr self, float_to_short p) -> float_to_short_sptr
        """
        _blocks_swig9.float_to_short_sptr_swiginit(self, _blocks_swig9.new_float_to_short_sptr(*args))

    def __deref__(self) -> "gr::blocks::float_to_short *":
        r"""__deref__(float_to_short_sptr self) -> float_to_short"""
        return _blocks_swig9.float_to_short_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_float_to_short_sptr

    def make(self, vlen: "size_t"=1, scale: "float"=1.0) -> "gr::blocks::float_to_short::sptr":
        r"""
        make(float_to_short_sptr self, size_t vlen=1, float scale=1.0) -> float_to_short_sptr
        Convert stream of floats to a stream of shorts.

        Constructor Specific Documentation:

        Build a float to short block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig9.float_to_short_sptr_make(self, vlen, scale)

    def scale(self) -> "float":
        r"""
        scale(float_to_short_sptr self) -> float
        Get the scalar multiplier value.
        """
        return _blocks_swig9.float_to_short_sptr_scale(self)

    def set_scale(self, scale: "float") -> "void":
        r"""
        set_scale(float_to_short_sptr self, float scale)
        Set the scalar multiplier value.
        """
        return _blocks_swig9.float_to_short_sptr_set_scale(self, scale)

    def history(self) -> "unsigned int":
        r"""history(float_to_short_sptr self) -> unsigned int"""
        return _blocks_swig9.float_to_short_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(float_to_short_sptr self, int which, int delay)
        declare_sample_delay(float_to_short_sptr self, unsigned int delay)
        """
        return _blocks_swig9.float_to_short_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(float_to_short_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.float_to_short_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(float_to_short_sptr self, int multiple)"""
        return _blocks_swig9.float_to_short_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(float_to_short_sptr self) -> int"""
        return _blocks_swig9.float_to_short_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(float_to_short_sptr self) -> double"""
        return _blocks_swig9.float_to_short_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(float_to_short_sptr self) -> uint64_t"""
        return _blocks_swig9.float_to_short_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(float_to_short_sptr self) -> uint64_t"""
        return _blocks_swig9.float_to_short_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(float_to_short_sptr self) -> bool"""
        return _blocks_swig9.float_to_short_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(float_to_short_sptr self) -> bool"""
        return _blocks_swig9.float_to_short_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(float_to_short_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.float_to_short_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(float_to_short_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.float_to_short_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(float_to_short_sptr self, std::string level)"""
        return _blocks_swig9.float_to_short_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(float_to_short_sptr self) -> std::string"""
        return _blocks_swig9.float_to_short_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(float_to_short_sptr self) -> int"""
        return _blocks_swig9.float_to_short_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(float_to_short_sptr self, int m)"""
        return _blocks_swig9.float_to_short_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(float_to_short_sptr self)"""
        return _blocks_swig9.float_to_short_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(float_to_short_sptr self) -> bool"""
        return _blocks_swig9.float_to_short_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(float_to_short_sptr self, int m)"""
        return _blocks_swig9.float_to_short_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(float_to_short_sptr self) -> int"""
        return _blocks_swig9.float_to_short_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(float_to_short_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_short_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(float_to_short_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_short_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.float_to_short_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(float_to_short_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_short_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(float_to_short_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_short_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.float_to_short_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(float_to_short_sptr self, int which) -> float
        pc_input_buffers_full(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_short_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(float_to_short_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_short_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(float_to_short_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_short_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(float_to_short_sptr self, int which) -> float
        pc_output_buffers_full(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_short_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(float_to_short_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_short_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(float_to_short_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_short_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(float_to_short_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.float_to_short_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(float_to_short_sptr self)"""
        return _blocks_swig9.float_to_short_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(float_to_short_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.float_to_short_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(float_to_short_sptr self) -> int"""
        return _blocks_swig9.float_to_short_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(float_to_short_sptr self) -> int"""
        return _blocks_swig9.float_to_short_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(float_to_short_sptr self, int priority) -> int"""
        return _blocks_swig9.float_to_short_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(float_to_short_sptr self) -> std::string"""
        return _blocks_swig9.float_to_short_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(float_to_short_sptr self) -> std::string"""
        return _blocks_swig9.float_to_short_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(float_to_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_short_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(float_to_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_short_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(float_to_short_sptr self) -> long"""
        return _blocks_swig9.float_to_short_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(float_to_short_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.float_to_short_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(float_to_short_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.float_to_short_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(float_to_short_sptr self) -> std::string"""
        return _blocks_swig9.float_to_short_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(float_to_short_sptr self, std::string name)"""
        return _blocks_swig9.float_to_short_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(float_to_short_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.float_to_short_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(float_to_short_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_short_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(float_to_short_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_short_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(float_to_short_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_short_sptr_message_subscribers(self, which_port)

# Register float_to_short_sptr in _blocks_swig9:
_blocks_swig9.float_to_short_sptr_swigregister(float_to_short_sptr)


float_to_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_short = float_to_short.make;

class float_to_uchar_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::float_to_uchar > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(float_to_uchar_sptr self) -> float_to_uchar_sptr
        __init__(float_to_uchar_sptr self, float_to_uchar p) -> float_to_uchar_sptr
        """
        _blocks_swig9.float_to_uchar_sptr_swiginit(self, _blocks_swig9.new_float_to_uchar_sptr(*args))

    def __deref__(self) -> "gr::blocks::float_to_uchar *":
        r"""__deref__(float_to_uchar_sptr self) -> float_to_uchar"""
        return _blocks_swig9.float_to_uchar_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_float_to_uchar_sptr

    def make(self) -> "gr::blocks::float_to_uchar::sptr":
        r"""
        make(float_to_uchar_sptr self) -> float_to_uchar_sptr
        Convert stream of floats to a stream of unsigned chars.

        Constructor Specific Documentation:

        Build a float to uchar block.
        """
        return _blocks_swig9.float_to_uchar_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(float_to_uchar_sptr self) -> unsigned int"""
        return _blocks_swig9.float_to_uchar_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(float_to_uchar_sptr self, int which, int delay)
        declare_sample_delay(float_to_uchar_sptr self, unsigned int delay)
        """
        return _blocks_swig9.float_to_uchar_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(float_to_uchar_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.float_to_uchar_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(float_to_uchar_sptr self, int multiple)"""
        return _blocks_swig9.float_to_uchar_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(float_to_uchar_sptr self) -> int"""
        return _blocks_swig9.float_to_uchar_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(float_to_uchar_sptr self) -> double"""
        return _blocks_swig9.float_to_uchar_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(float_to_uchar_sptr self) -> uint64_t"""
        return _blocks_swig9.float_to_uchar_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(float_to_uchar_sptr self) -> uint64_t"""
        return _blocks_swig9.float_to_uchar_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(float_to_uchar_sptr self) -> bool"""
        return _blocks_swig9.float_to_uchar_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(float_to_uchar_sptr self) -> bool"""
        return _blocks_swig9.float_to_uchar_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(float_to_uchar_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.float_to_uchar_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(float_to_uchar_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.float_to_uchar_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(float_to_uchar_sptr self, std::string level)"""
        return _blocks_swig9.float_to_uchar_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(float_to_uchar_sptr self) -> std::string"""
        return _blocks_swig9.float_to_uchar_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(float_to_uchar_sptr self) -> int"""
        return _blocks_swig9.float_to_uchar_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(float_to_uchar_sptr self, int m)"""
        return _blocks_swig9.float_to_uchar_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(float_to_uchar_sptr self)"""
        return _blocks_swig9.float_to_uchar_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(float_to_uchar_sptr self) -> bool"""
        return _blocks_swig9.float_to_uchar_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(float_to_uchar_sptr self, int m)"""
        return _blocks_swig9.float_to_uchar_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(float_to_uchar_sptr self) -> int"""
        return _blocks_swig9.float_to_uchar_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(float_to_uchar_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_uchar_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(float_to_uchar_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_uchar_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.float_to_uchar_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(float_to_uchar_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_uchar_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(float_to_uchar_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_uchar_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.float_to_uchar_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(float_to_uchar_sptr self, int which) -> float
        pc_input_buffers_full(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_uchar_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(float_to_uchar_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_uchar_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(float_to_uchar_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_uchar_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(float_to_uchar_sptr self, int which) -> float
        pc_output_buffers_full(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_uchar_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(float_to_uchar_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_uchar_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(float_to_uchar_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_uchar_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(float_to_uchar_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.float_to_uchar_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(float_to_uchar_sptr self)"""
        return _blocks_swig9.float_to_uchar_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(float_to_uchar_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.float_to_uchar_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(float_to_uchar_sptr self) -> int"""
        return _blocks_swig9.float_to_uchar_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(float_to_uchar_sptr self) -> int"""
        return _blocks_swig9.float_to_uchar_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(float_to_uchar_sptr self, int priority) -> int"""
        return _blocks_swig9.float_to_uchar_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(float_to_uchar_sptr self) -> std::string"""
        return _blocks_swig9.float_to_uchar_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(float_to_uchar_sptr self) -> std::string"""
        return _blocks_swig9.float_to_uchar_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(float_to_uchar_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_uchar_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(float_to_uchar_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_uchar_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(float_to_uchar_sptr self) -> long"""
        return _blocks_swig9.float_to_uchar_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(float_to_uchar_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.float_to_uchar_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(float_to_uchar_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.float_to_uchar_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(float_to_uchar_sptr self) -> std::string"""
        return _blocks_swig9.float_to_uchar_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(float_to_uchar_sptr self, std::string name)"""
        return _blocks_swig9.float_to_uchar_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(float_to_uchar_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.float_to_uchar_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(float_to_uchar_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_uchar_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(float_to_uchar_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_uchar_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(float_to_uchar_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.float_to_uchar_sptr_message_subscribers(self, which_port)

# Register float_to_uchar_sptr in _blocks_swig9:
_blocks_swig9.float_to_uchar_sptr_swigregister(float_to_uchar_sptr)


float_to_uchar_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_uchar = float_to_uchar.make;

class int_to_float_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::int_to_float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(int_to_float_sptr self) -> int_to_float_sptr
        __init__(int_to_float_sptr self, int_to_float p) -> int_to_float_sptr
        """
        _blocks_swig9.int_to_float_sptr_swiginit(self, _blocks_swig9.new_int_to_float_sptr(*args))

    def __deref__(self) -> "gr::blocks::int_to_float *":
        r"""__deref__(int_to_float_sptr self) -> int_to_float"""
        return _blocks_swig9.int_to_float_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_int_to_float_sptr

    def make(self, vlen: "size_t"=1, scale: "float"=1.0) -> "gr::blocks::int_to_float::sptr":
        r"""
        make(int_to_float_sptr self, size_t vlen=1, float scale=1.0) -> int_to_float_sptr
        Convert stream of ints to a stream of floats.

        Constructor Specific Documentation:

        Build an int to float block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar divider to change the output signal scale.
        """
        return _blocks_swig9.int_to_float_sptr_make(self, vlen, scale)

    def scale(self) -> "float":
        r"""
        scale(int_to_float_sptr self) -> float
        Get the scalar divider value.
        """
        return _blocks_swig9.int_to_float_sptr_scale(self)

    def set_scale(self, scale: "float") -> "void":
        r"""
        set_scale(int_to_float_sptr self, float scale)
        Set the scalar divider value.
        """
        return _blocks_swig9.int_to_float_sptr_set_scale(self, scale)

    def history(self) -> "unsigned int":
        r"""history(int_to_float_sptr self) -> unsigned int"""
        return _blocks_swig9.int_to_float_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(int_to_float_sptr self, int which, int delay)
        declare_sample_delay(int_to_float_sptr self, unsigned int delay)
        """
        return _blocks_swig9.int_to_float_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(int_to_float_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.int_to_float_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(int_to_float_sptr self, int multiple)"""
        return _blocks_swig9.int_to_float_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(int_to_float_sptr self) -> int"""
        return _blocks_swig9.int_to_float_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(int_to_float_sptr self) -> double"""
        return _blocks_swig9.int_to_float_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(int_to_float_sptr self) -> uint64_t"""
        return _blocks_swig9.int_to_float_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(int_to_float_sptr self) -> uint64_t"""
        return _blocks_swig9.int_to_float_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(int_to_float_sptr self) -> bool"""
        return _blocks_swig9.int_to_float_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(int_to_float_sptr self) -> bool"""
        return _blocks_swig9.int_to_float_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(int_to_float_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.int_to_float_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(int_to_float_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.int_to_float_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(int_to_float_sptr self, std::string level)"""
        return _blocks_swig9.int_to_float_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(int_to_float_sptr self) -> std::string"""
        return _blocks_swig9.int_to_float_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(int_to_float_sptr self) -> int"""
        return _blocks_swig9.int_to_float_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(int_to_float_sptr self, int m)"""
        return _blocks_swig9.int_to_float_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(int_to_float_sptr self)"""
        return _blocks_swig9.int_to_float_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(int_to_float_sptr self) -> bool"""
        return _blocks_swig9.int_to_float_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(int_to_float_sptr self, int m)"""
        return _blocks_swig9.int_to_float_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(int_to_float_sptr self) -> int"""
        return _blocks_swig9.int_to_float_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(int_to_float_sptr self, int i) -> long"""
        return _blocks_swig9.int_to_float_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(int_to_float_sptr self, long max_output_buffer)
        set_max_output_buffer(int_to_float_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.int_to_float_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(int_to_float_sptr self, int i) -> long"""
        return _blocks_swig9.int_to_float_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(int_to_float_sptr self, long min_output_buffer)
        set_min_output_buffer(int_to_float_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.int_to_float_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(int_to_float_sptr self, int which) -> float
        pc_input_buffers_full(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.int_to_float_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(int_to_float_sptr self, int which) -> float
        pc_input_buffers_full_avg(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.int_to_float_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(int_to_float_sptr self, int which) -> float
        pc_input_buffers_full_var(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.int_to_float_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(int_to_float_sptr self, int which) -> float
        pc_output_buffers_full(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.int_to_float_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(int_to_float_sptr self, int which) -> float
        pc_output_buffers_full_avg(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.int_to_float_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(int_to_float_sptr self, int which) -> float
        pc_output_buffers_full_var(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.int_to_float_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(int_to_float_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.int_to_float_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(int_to_float_sptr self)"""
        return _blocks_swig9.int_to_float_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(int_to_float_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.int_to_float_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(int_to_float_sptr self) -> int"""
        return _blocks_swig9.int_to_float_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(int_to_float_sptr self) -> int"""
        return _blocks_swig9.int_to_float_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(int_to_float_sptr self, int priority) -> int"""
        return _blocks_swig9.int_to_float_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(int_to_float_sptr self) -> std::string"""
        return _blocks_swig9.int_to_float_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(int_to_float_sptr self) -> std::string"""
        return _blocks_swig9.int_to_float_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(int_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.int_to_float_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(int_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.int_to_float_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(int_to_float_sptr self) -> long"""
        return _blocks_swig9.int_to_float_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(int_to_float_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.int_to_float_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(int_to_float_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.int_to_float_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(int_to_float_sptr self) -> std::string"""
        return _blocks_swig9.int_to_float_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(int_to_float_sptr self, std::string name)"""
        return _blocks_swig9.int_to_float_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(int_to_float_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.int_to_float_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(int_to_float_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.int_to_float_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(int_to_float_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.int_to_float_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(int_to_float_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.int_to_float_sptr_message_subscribers(self, which_port)

# Register int_to_float_sptr in _blocks_swig9:
_blocks_swig9.int_to_float_sptr_swigregister(int_to_float_sptr)


int_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
int_to_float = int_to_float.make;

class integrate_ss(object):
    r"""
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(decim: "int", vlen: "unsigned int"=1) -> "gr::blocks::integrate< short >::sptr":
        r"""
        make(int decim, unsigned int vlen=1) -> integrate_ss_sptr
        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_ss_make(decim, vlen)
    __swig_destroy__ = _blocks_swig9.delete_integrate_ss

# Register integrate_ss in _blocks_swig9:
_blocks_swig9.integrate_ss_swigregister(integrate_ss)

def integrate_ss_make(decim: "int", vlen: "unsigned int"=1) -> "gr::blocks::integrate< short >::sptr":
    r"""
    integrate_ss_make(int decim, unsigned int vlen=1) -> integrate_ss_sptr
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """
    return _blocks_swig9.integrate_ss_make(decim, vlen)

class integrate_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::integrate< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(integrate_ss_sptr self) -> integrate_ss_sptr
        __init__(integrate_ss_sptr self, integrate_ss p) -> integrate_ss_sptr
        """
        _blocks_swig9.integrate_ss_sptr_swiginit(self, _blocks_swig9.new_integrate_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::integrate< std::int16_t > *":
        r"""__deref__(integrate_ss_sptr self) -> integrate_ss"""
        return _blocks_swig9.integrate_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_integrate_ss_sptr

    def make(self, decim: "int", vlen: "unsigned int"=1) -> "gr::blocks::integrate< short >::sptr":
        r"""
        make(integrate_ss_sptr self, int decim, unsigned int vlen=1) -> integrate_ss_sptr
        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_ss_sptr_make(self, decim, vlen)

    def history(self) -> "unsigned int":
        r"""history(integrate_ss_sptr self) -> unsigned int"""
        return _blocks_swig9.integrate_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(integrate_ss_sptr self, int which, int delay)
        declare_sample_delay(integrate_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig9.integrate_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(integrate_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.integrate_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(integrate_ss_sptr self, int multiple)"""
        return _blocks_swig9.integrate_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(integrate_ss_sptr self) -> int"""
        return _blocks_swig9.integrate_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(integrate_ss_sptr self) -> double"""
        return _blocks_swig9.integrate_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(integrate_ss_sptr self) -> uint64_t"""
        return _blocks_swig9.integrate_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(integrate_ss_sptr self) -> uint64_t"""
        return _blocks_swig9.integrate_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(integrate_ss_sptr self) -> bool"""
        return _blocks_swig9.integrate_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(integrate_ss_sptr self) -> bool"""
        return _blocks_swig9.integrate_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(integrate_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.integrate_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(integrate_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.integrate_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(integrate_ss_sptr self, std::string level)"""
        return _blocks_swig9.integrate_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(integrate_ss_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(integrate_ss_sptr self) -> int"""
        return _blocks_swig9.integrate_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(integrate_ss_sptr self, int m)"""
        return _blocks_swig9.integrate_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(integrate_ss_sptr self)"""
        return _blocks_swig9.integrate_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(integrate_ss_sptr self) -> bool"""
        return _blocks_swig9.integrate_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(integrate_ss_sptr self, int m)"""
        return _blocks_swig9.integrate_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(integrate_ss_sptr self) -> int"""
        return _blocks_swig9.integrate_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(integrate_ss_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(integrate_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(integrate_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.integrate_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(integrate_ss_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(integrate_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(integrate_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.integrate_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(integrate_ss_sptr self, int which) -> float
        pc_input_buffers_full(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(integrate_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(integrate_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(integrate_ss_sptr self, int which) -> float
        pc_output_buffers_full(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(integrate_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(integrate_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(integrate_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.integrate_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(integrate_ss_sptr self)"""
        return _blocks_swig9.integrate_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(integrate_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.integrate_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(integrate_ss_sptr self) -> int"""
        return _blocks_swig9.integrate_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(integrate_ss_sptr self) -> int"""
        return _blocks_swig9.integrate_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(integrate_ss_sptr self, int priority) -> int"""
        return _blocks_swig9.integrate_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(integrate_ss_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(integrate_ss_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(integrate_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(integrate_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(integrate_ss_sptr self) -> long"""
        return _blocks_swig9.integrate_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(integrate_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.integrate_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(integrate_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.integrate_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(integrate_ss_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(integrate_ss_sptr self, std::string name)"""
        return _blocks_swig9.integrate_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(integrate_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.integrate_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(integrate_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.integrate_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(integrate_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.integrate_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(integrate_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.integrate_ss_sptr_message_subscribers(self, which_port)

# Register integrate_ss_sptr in _blocks_swig9:
_blocks_swig9.integrate_ss_sptr_swigregister(integrate_ss_sptr)


integrate_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_ss = integrate_ss.make

class integrate_ii(object):
    r"""
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(decim: "int", vlen: "unsigned int"=1) -> "gr::blocks::integrate< int >::sptr":
        r"""
        make(int decim, unsigned int vlen=1) -> integrate_ii_sptr
        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_ii_make(decim, vlen)
    __swig_destroy__ = _blocks_swig9.delete_integrate_ii

# Register integrate_ii in _blocks_swig9:
_blocks_swig9.integrate_ii_swigregister(integrate_ii)

def integrate_ii_make(decim: "int", vlen: "unsigned int"=1) -> "gr::blocks::integrate< int >::sptr":
    r"""
    integrate_ii_make(int decim, unsigned int vlen=1) -> integrate_ii_sptr
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """
    return _blocks_swig9.integrate_ii_make(decim, vlen)

class integrate_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::integrate< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(integrate_ii_sptr self) -> integrate_ii_sptr
        __init__(integrate_ii_sptr self, integrate_ii p) -> integrate_ii_sptr
        """
        _blocks_swig9.integrate_ii_sptr_swiginit(self, _blocks_swig9.new_integrate_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::integrate< std::int32_t > *":
        r"""__deref__(integrate_ii_sptr self) -> integrate_ii"""
        return _blocks_swig9.integrate_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_integrate_ii_sptr

    def make(self, decim: "int", vlen: "unsigned int"=1) -> "gr::blocks::integrate< int >::sptr":
        r"""
        make(integrate_ii_sptr self, int decim, unsigned int vlen=1) -> integrate_ii_sptr
        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_ii_sptr_make(self, decim, vlen)

    def history(self) -> "unsigned int":
        r"""history(integrate_ii_sptr self) -> unsigned int"""
        return _blocks_swig9.integrate_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(integrate_ii_sptr self, int which, int delay)
        declare_sample_delay(integrate_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig9.integrate_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(integrate_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.integrate_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(integrate_ii_sptr self, int multiple)"""
        return _blocks_swig9.integrate_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(integrate_ii_sptr self) -> int"""
        return _blocks_swig9.integrate_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(integrate_ii_sptr self) -> double"""
        return _blocks_swig9.integrate_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(integrate_ii_sptr self) -> uint64_t"""
        return _blocks_swig9.integrate_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(integrate_ii_sptr self) -> uint64_t"""
        return _blocks_swig9.integrate_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(integrate_ii_sptr self) -> bool"""
        return _blocks_swig9.integrate_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(integrate_ii_sptr self) -> bool"""
        return _blocks_swig9.integrate_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(integrate_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.integrate_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(integrate_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.integrate_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(integrate_ii_sptr self, std::string level)"""
        return _blocks_swig9.integrate_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(integrate_ii_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(integrate_ii_sptr self) -> int"""
        return _blocks_swig9.integrate_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(integrate_ii_sptr self, int m)"""
        return _blocks_swig9.integrate_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(integrate_ii_sptr self)"""
        return _blocks_swig9.integrate_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(integrate_ii_sptr self) -> bool"""
        return _blocks_swig9.integrate_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(integrate_ii_sptr self, int m)"""
        return _blocks_swig9.integrate_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(integrate_ii_sptr self) -> int"""
        return _blocks_swig9.integrate_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(integrate_ii_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(integrate_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(integrate_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.integrate_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(integrate_ii_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(integrate_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(integrate_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.integrate_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(integrate_ii_sptr self, int which) -> float
        pc_input_buffers_full(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(integrate_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(integrate_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(integrate_ii_sptr self, int which) -> float
        pc_output_buffers_full(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(integrate_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(integrate_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(integrate_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.integrate_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(integrate_ii_sptr self)"""
        return _blocks_swig9.integrate_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(integrate_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.integrate_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(integrate_ii_sptr self) -> int"""
        return _blocks_swig9.integrate_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(integrate_ii_sptr self) -> int"""
        return _blocks_swig9.integrate_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(integrate_ii_sptr self, int priority) -> int"""
        return _blocks_swig9.integrate_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(integrate_ii_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(integrate_ii_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(integrate_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(integrate_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(integrate_ii_sptr self) -> long"""
        return _blocks_swig9.integrate_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(integrate_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.integrate_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(integrate_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.integrate_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(integrate_ii_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(integrate_ii_sptr self, std::string name)"""
        return _blocks_swig9.integrate_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(integrate_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.integrate_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(integrate_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.integrate_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(integrate_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.integrate_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(integrate_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.integrate_ii_sptr_message_subscribers(self, which_port)

# Register integrate_ii_sptr in _blocks_swig9:
_blocks_swig9.integrate_ii_sptr_swigregister(integrate_ii_sptr)


integrate_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_ii = integrate_ii.make

class integrate_ff(object):
    r"""
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(decim: "int", vlen: "unsigned int"=1) -> "gr::blocks::integrate< float >::sptr":
        r"""
        make(int decim, unsigned int vlen=1) -> integrate_ff_sptr
        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_ff_make(decim, vlen)
    __swig_destroy__ = _blocks_swig9.delete_integrate_ff

# Register integrate_ff in _blocks_swig9:
_blocks_swig9.integrate_ff_swigregister(integrate_ff)

def integrate_ff_make(decim: "int", vlen: "unsigned int"=1) -> "gr::blocks::integrate< float >::sptr":
    r"""
    integrate_ff_make(int decim, unsigned int vlen=1) -> integrate_ff_sptr
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """
    return _blocks_swig9.integrate_ff_make(decim, vlen)

class integrate_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::integrate< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(integrate_ff_sptr self) -> integrate_ff_sptr
        __init__(integrate_ff_sptr self, integrate_ff p) -> integrate_ff_sptr
        """
        _blocks_swig9.integrate_ff_sptr_swiginit(self, _blocks_swig9.new_integrate_ff_sptr(*args))

    def __deref__(self) -> "gr::blocks::integrate< float > *":
        r"""__deref__(integrate_ff_sptr self) -> integrate_ff"""
        return _blocks_swig9.integrate_ff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_integrate_ff_sptr

    def make(self, decim: "int", vlen: "unsigned int"=1) -> "gr::blocks::integrate< float >::sptr":
        r"""
        make(integrate_ff_sptr self, int decim, unsigned int vlen=1) -> integrate_ff_sptr
        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_ff_sptr_make(self, decim, vlen)

    def history(self) -> "unsigned int":
        r"""history(integrate_ff_sptr self) -> unsigned int"""
        return _blocks_swig9.integrate_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(integrate_ff_sptr self, int which, int delay)
        declare_sample_delay(integrate_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig9.integrate_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(integrate_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.integrate_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(integrate_ff_sptr self, int multiple)"""
        return _blocks_swig9.integrate_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(integrate_ff_sptr self) -> int"""
        return _blocks_swig9.integrate_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(integrate_ff_sptr self) -> double"""
        return _blocks_swig9.integrate_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(integrate_ff_sptr self) -> uint64_t"""
        return _blocks_swig9.integrate_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(integrate_ff_sptr self) -> uint64_t"""
        return _blocks_swig9.integrate_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(integrate_ff_sptr self) -> bool"""
        return _blocks_swig9.integrate_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(integrate_ff_sptr self) -> bool"""
        return _blocks_swig9.integrate_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(integrate_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.integrate_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(integrate_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.integrate_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(integrate_ff_sptr self, std::string level)"""
        return _blocks_swig9.integrate_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(integrate_ff_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(integrate_ff_sptr self) -> int"""
        return _blocks_swig9.integrate_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(integrate_ff_sptr self, int m)"""
        return _blocks_swig9.integrate_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(integrate_ff_sptr self)"""
        return _blocks_swig9.integrate_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(integrate_ff_sptr self) -> bool"""
        return _blocks_swig9.integrate_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(integrate_ff_sptr self, int m)"""
        return _blocks_swig9.integrate_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(integrate_ff_sptr self) -> int"""
        return _blocks_swig9.integrate_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(integrate_ff_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(integrate_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(integrate_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.integrate_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(integrate_ff_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(integrate_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(integrate_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.integrate_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(integrate_ff_sptr self, int which) -> float
        pc_input_buffers_full(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(integrate_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(integrate_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(integrate_ff_sptr self, int which) -> float
        pc_output_buffers_full(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(integrate_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(integrate_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(integrate_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.integrate_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(integrate_ff_sptr self)"""
        return _blocks_swig9.integrate_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(integrate_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.integrate_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(integrate_ff_sptr self) -> int"""
        return _blocks_swig9.integrate_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(integrate_ff_sptr self) -> int"""
        return _blocks_swig9.integrate_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(integrate_ff_sptr self, int priority) -> int"""
        return _blocks_swig9.integrate_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(integrate_ff_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(integrate_ff_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(integrate_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(integrate_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(integrate_ff_sptr self) -> long"""
        return _blocks_swig9.integrate_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(integrate_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.integrate_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(integrate_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.integrate_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(integrate_ff_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(integrate_ff_sptr self, std::string name)"""
        return _blocks_swig9.integrate_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(integrate_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.integrate_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(integrate_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.integrate_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(integrate_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.integrate_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(integrate_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.integrate_ff_sptr_message_subscribers(self, which_port)

# Register integrate_ff_sptr in _blocks_swig9:
_blocks_swig9.integrate_ff_sptr_swigregister(integrate_ff_sptr)


integrate_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_ff = integrate_ff.make

class integrate_cc(object):
    r"""
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(decim: "int", vlen: "unsigned int"=1) -> "gr::blocks::integrate< std::complex< float > >::sptr":
        r"""
        make(int decim, unsigned int vlen=1) -> integrate_cc_sptr
        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_cc_make(decim, vlen)
    __swig_destroy__ = _blocks_swig9.delete_integrate_cc

# Register integrate_cc in _blocks_swig9:
_blocks_swig9.integrate_cc_swigregister(integrate_cc)

def integrate_cc_make(decim: "int", vlen: "unsigned int"=1) -> "gr::blocks::integrate< std::complex< float > >::sptr":
    r"""
    integrate_cc_make(int decim, unsigned int vlen=1) -> integrate_cc_sptr
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """
    return _blocks_swig9.integrate_cc_make(decim, vlen)

class integrate_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::integrate< gr_complex > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(integrate_cc_sptr self) -> integrate_cc_sptr
        __init__(integrate_cc_sptr self, integrate_cc p) -> integrate_cc_sptr
        """
        _blocks_swig9.integrate_cc_sptr_swiginit(self, _blocks_swig9.new_integrate_cc_sptr(*args))

    def __deref__(self) -> "gr::blocks::integrate< gr_complex > *":
        r"""__deref__(integrate_cc_sptr self) -> integrate_cc"""
        return _blocks_swig9.integrate_cc_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_integrate_cc_sptr

    def make(self, decim: "int", vlen: "unsigned int"=1) -> "gr::blocks::integrate< std::complex< float > >::sptr":
        r"""
        make(integrate_cc_sptr self, int decim, unsigned int vlen=1) -> integrate_cc_sptr
        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_cc_sptr_make(self, decim, vlen)

    def history(self) -> "unsigned int":
        r"""history(integrate_cc_sptr self) -> unsigned int"""
        return _blocks_swig9.integrate_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(integrate_cc_sptr self, int which, int delay)
        declare_sample_delay(integrate_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig9.integrate_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(integrate_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.integrate_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(integrate_cc_sptr self, int multiple)"""
        return _blocks_swig9.integrate_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(integrate_cc_sptr self) -> int"""
        return _blocks_swig9.integrate_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(integrate_cc_sptr self) -> double"""
        return _blocks_swig9.integrate_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(integrate_cc_sptr self) -> uint64_t"""
        return _blocks_swig9.integrate_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(integrate_cc_sptr self) -> uint64_t"""
        return _blocks_swig9.integrate_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(integrate_cc_sptr self) -> bool"""
        return _blocks_swig9.integrate_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(integrate_cc_sptr self) -> bool"""
        return _blocks_swig9.integrate_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(integrate_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.integrate_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(integrate_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.integrate_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(integrate_cc_sptr self, std::string level)"""
        return _blocks_swig9.integrate_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(integrate_cc_sptr self) -> std::string"""
        return _blocks_swig9.integrate_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(integrate_cc_sptr self) -> int"""
        return _blocks_swig9.integrate_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(integrate_cc_sptr self, int m)"""
        return _blocks_swig9.integrate_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(integrate_cc_sptr self)"""
        return _blocks_swig9.integrate_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(integrate_cc_sptr self) -> bool"""
        return _blocks_swig9.integrate_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(integrate_cc_sptr self, int m)"""
        return _blocks_swig9.integrate_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(integrate_cc_sptr self) -> int"""
        return _blocks_swig9.integrate_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(integrate_cc_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(integrate_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(integrate_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.integrate_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(integrate_cc_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(integrate_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(integrate_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.integrate_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(integrate_cc_sptr self, int which) -> float
        pc_input_buffers_full(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(integrate_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(integrate_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(integrate_cc_sptr self, int which) -> float
        pc_output_buffers_full(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(integrate_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(integrate_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(integrate_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.integrate_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(integrate_cc_sptr self)"""
        return _blocks_swig9.integrate_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(integrate_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.integrate_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(integrate_cc_sptr self) -> int"""
        return _blocks_swig9.integrate_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(integrate_cc_sptr self) -> int"""
        return _blocks_swig9.integrate_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(integrate_cc_sptr self, int priority) -> int"""
        return _blocks_swig9.integrate_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(integrate_cc_sptr self) -> std::string"""
        return _blocks_swig9.integrate_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(integrate_cc_sptr self) -> std::string"""
        return _blocks_swig9.integrate_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(integrate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(integrate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(integrate_cc_sptr self) -> long"""
        return _blocks_swig9.integrate_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(integrate_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.integrate_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(integrate_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.integrate_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(integrate_cc_sptr self) -> std::string"""
        return _blocks_swig9.integrate_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(integrate_cc_sptr self, std::string name)"""
        return _blocks_swig9.integrate_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(integrate_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.integrate_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(integrate_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.integrate_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(integrate_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.integrate_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(integrate_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.integrate_cc_sptr_message_subscribers(self, which_port)

# Register integrate_cc_sptr in _blocks_swig9:
_blocks_swig9.integrate_cc_sptr_swigregister(integrate_cc_sptr)


integrate_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_cc = integrate_cc.make

class interleave_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::interleave > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(interleave_sptr self) -> interleave_sptr
        __init__(interleave_sptr self, interleave p) -> interleave_sptr
        """
        _blocks_swig9.interleave_sptr_swiginit(self, _blocks_swig9.new_interleave_sptr(*args))

    def __deref__(self) -> "gr::blocks::interleave *":
        r"""__deref__(interleave_sptr self) -> interleave"""
        return _blocks_swig9.interleave_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_interleave_sptr

    def make(self, itemsize: "size_t", blocksize: "unsigned int"=1) -> "gr::blocks::interleave::sptr":
        r"""
        make(interleave_sptr self, size_t itemsize, unsigned int blocksize=1) -> interleave_sptr
        interleave N inputs into a single output

        This block interleaves blocks of samples. For each input connection, the samples are interleaved successively to the output connection. By default, the block interleaves a single sample from each input to the output unless blocksize is given in the constructor.

        Constructor Specific Documentation:

        Make a stream interleave block.

        Args:
            itemsize : stream itemsize
            blocksize : size of block of samples to interleave
        """
        return _blocks_swig9.interleave_sptr_make(self, itemsize, blocksize)

    def history(self) -> "unsigned int":
        r"""history(interleave_sptr self) -> unsigned int"""
        return _blocks_swig9.interleave_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(interleave_sptr self, int which, int delay)
        declare_sample_delay(interleave_sptr self, unsigned int delay)
        """
        return _blocks_swig9.interleave_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(interleave_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.interleave_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(interleave_sptr self, int multiple)"""
        return _blocks_swig9.interleave_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(interleave_sptr self) -> int"""
        return _blocks_swig9.interleave_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(interleave_sptr self) -> double"""
        return _blocks_swig9.interleave_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(interleave_sptr self) -> uint64_t"""
        return _blocks_swig9.interleave_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(interleave_sptr self) -> uint64_t"""
        return _blocks_swig9.interleave_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(interleave_sptr self) -> bool"""
        return _blocks_swig9.interleave_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(interleave_sptr self) -> bool"""
        return _blocks_swig9.interleave_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(interleave_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.interleave_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(interleave_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.interleave_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(interleave_sptr self, std::string level)"""
        return _blocks_swig9.interleave_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(interleave_sptr self) -> std::string"""
        return _blocks_swig9.interleave_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(interleave_sptr self) -> int"""
        return _blocks_swig9.interleave_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(interleave_sptr self, int m)"""
        return _blocks_swig9.interleave_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(interleave_sptr self)"""
        return _blocks_swig9.interleave_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(interleave_sptr self) -> bool"""
        return _blocks_swig9.interleave_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(interleave_sptr self, int m)"""
        return _blocks_swig9.interleave_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(interleave_sptr self) -> int"""
        return _blocks_swig9.interleave_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(interleave_sptr self, int i) -> long"""
        return _blocks_swig9.interleave_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(interleave_sptr self, long max_output_buffer)
        set_max_output_buffer(interleave_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.interleave_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(interleave_sptr self, int i) -> long"""
        return _blocks_swig9.interleave_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(interleave_sptr self, long min_output_buffer)
        set_min_output_buffer(interleave_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.interleave_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(interleave_sptr self, int which) -> float
        pc_input_buffers_full(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleave_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(interleave_sptr self, int which) -> float
        pc_input_buffers_full_avg(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleave_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(interleave_sptr self, int which) -> float
        pc_input_buffers_full_var(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleave_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(interleave_sptr self, int which) -> float
        pc_output_buffers_full(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleave_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(interleave_sptr self, int which) -> float
        pc_output_buffers_full_avg(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleave_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(interleave_sptr self, int which) -> float
        pc_output_buffers_full_var(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleave_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(interleave_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.interleave_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(interleave_sptr self)"""
        return _blocks_swig9.interleave_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(interleave_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.interleave_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(interleave_sptr self) -> int"""
        return _blocks_swig9.interleave_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(interleave_sptr self) -> int"""
        return _blocks_swig9.interleave_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(interleave_sptr self, int priority) -> int"""
        return _blocks_swig9.interleave_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(interleave_sptr self) -> std::string"""
        return _blocks_swig9.interleave_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(interleave_sptr self) -> std::string"""
        return _blocks_swig9.interleave_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(interleave_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.interleave_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(interleave_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.interleave_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(interleave_sptr self) -> long"""
        return _blocks_swig9.interleave_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(interleave_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.interleave_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(interleave_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.interleave_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(interleave_sptr self) -> std::string"""
        return _blocks_swig9.interleave_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(interleave_sptr self, std::string name)"""
        return _blocks_swig9.interleave_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(interleave_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.interleave_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(interleave_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.interleave_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(interleave_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.interleave_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(interleave_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.interleave_sptr_message_subscribers(self, which_port)

# Register interleave_sptr in _blocks_swig9:
_blocks_swig9.interleave_sptr_swigregister(interleave_sptr)


interleave_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interleave = interleave.make;

class interleaved_short_to_complex_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::interleaved_short_to_complex > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(interleaved_short_to_complex_sptr self) -> interleaved_short_to_complex_sptr
        __init__(interleaved_short_to_complex_sptr self, interleaved_short_to_complex p) -> interleaved_short_to_complex_sptr
        """
        _blocks_swig9.interleaved_short_to_complex_sptr_swiginit(self, _blocks_swig9.new_interleaved_short_to_complex_sptr(*args))

    def __deref__(self) -> "gr::blocks::interleaved_short_to_complex *":
        r"""__deref__(interleaved_short_to_complex_sptr self) -> interleaved_short_to_complex"""
        return _blocks_swig9.interleaved_short_to_complex_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_interleaved_short_to_complex_sptr

    def make(self, vector_input: "bool"=False, swap: "bool"=False) -> "gr::blocks::interleaved_short_to_complex::sptr":
        r"""
        make(interleaved_short_to_complex_sptr self, bool vector_input=False, bool swap=False) -> interleaved_short_to_complex_sptr
        Convert stream of interleaved shorts to a stream of complex.

        Constructor Specific Documentation:

        Build an interleaved short to complex block.

        Args:
            vector_input : 
            swap : 
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_make(self, vector_input, swap)

    def set_swap(self, swap: "bool") -> "void":
        r"""set_swap(interleaved_short_to_complex_sptr self, bool swap)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_swap(self, swap)

    def history(self) -> "unsigned int":
        r"""history(interleaved_short_to_complex_sptr self) -> unsigned int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(interleaved_short_to_complex_sptr self, int which, int delay)
        declare_sample_delay(interleaved_short_to_complex_sptr self, unsigned int delay)
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(interleaved_short_to_complex_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(interleaved_short_to_complex_sptr self, int multiple)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(interleaved_short_to_complex_sptr self) -> double"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(interleaved_short_to_complex_sptr self) -> uint64_t"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(interleaved_short_to_complex_sptr self) -> uint64_t"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(interleaved_short_to_complex_sptr self) -> bool"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(interleaved_short_to_complex_sptr self) -> bool"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(interleaved_short_to_complex_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(interleaved_short_to_complex_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(interleaved_short_to_complex_sptr self, std::string level)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(interleaved_short_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(interleaved_short_to_complex_sptr self, int m)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(interleaved_short_to_complex_sptr self)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(interleaved_short_to_complex_sptr self) -> bool"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(interleaved_short_to_complex_sptr self, int m)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(interleaved_short_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(interleaved_short_to_complex_sptr self, long max_output_buffer)
        set_max_output_buffer(interleaved_short_to_complex_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(interleaved_short_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(interleaved_short_to_complex_sptr self, long min_output_buffer)
        set_min_output_buffer(interleaved_short_to_complex_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(interleaved_short_to_complex_sptr self, int which) -> float
        pc_input_buffers_full(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(interleaved_short_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_avg(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(interleaved_short_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_var(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(interleaved_short_to_complex_sptr self, int which) -> float
        pc_output_buffers_full(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(interleaved_short_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_avg(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(interleaved_short_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_var(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(interleaved_short_to_complex_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(interleaved_short_to_complex_sptr self)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(interleaved_short_to_complex_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(interleaved_short_to_complex_sptr self, int priority) -> int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(interleaved_short_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(interleaved_short_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(interleaved_short_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(interleaved_short_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(interleaved_short_to_complex_sptr self) -> long"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(interleaved_short_to_complex_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(interleaved_short_to_complex_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(interleaved_short_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(interleaved_short_to_complex_sptr self, std::string name)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(interleaved_short_to_complex_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(interleaved_short_to_complex_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(interleaved_short_to_complex_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(interleaved_short_to_complex_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_message_subscribers(self, which_port)

# Register interleaved_short_to_complex_sptr in _blocks_swig9:
_blocks_swig9.interleaved_short_to_complex_sptr_swigregister(interleaved_short_to_complex_sptr)


interleaved_short_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interleaved_short_to_complex = interleaved_short_to_complex.make;

class interleaved_char_to_complex_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::interleaved_char_to_complex > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(interleaved_char_to_complex_sptr self) -> interleaved_char_to_complex_sptr
        __init__(interleaved_char_to_complex_sptr self, interleaved_char_to_complex p) -> interleaved_char_to_complex_sptr
        """
        _blocks_swig9.interleaved_char_to_complex_sptr_swiginit(self, _blocks_swig9.new_interleaved_char_to_complex_sptr(*args))

    def __deref__(self) -> "gr::blocks::interleaved_char_to_complex *":
        r"""__deref__(interleaved_char_to_complex_sptr self) -> interleaved_char_to_complex"""
        return _blocks_swig9.interleaved_char_to_complex_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_interleaved_char_to_complex_sptr

    def make(self, vector_input: "bool"=False) -> "gr::blocks::interleaved_char_to_complex::sptr":
        r"""
        make(interleaved_char_to_complex_sptr self, bool vector_input=False) -> interleaved_char_to_complex_sptr
        Convert stream of interleaved chars to a stream of complex.

        Constructor Specific Documentation:

        Build an interleaved char to complex block.

        Args:
            vector_input : 
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_make(self, vector_input)

    def history(self) -> "unsigned int":
        r"""history(interleaved_char_to_complex_sptr self) -> unsigned int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(interleaved_char_to_complex_sptr self, int which, int delay)
        declare_sample_delay(interleaved_char_to_complex_sptr self, unsigned int delay)
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(interleaved_char_to_complex_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(interleaved_char_to_complex_sptr self, int multiple)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(interleaved_char_to_complex_sptr self) -> double"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(interleaved_char_to_complex_sptr self) -> uint64_t"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(interleaved_char_to_complex_sptr self) -> uint64_t"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(interleaved_char_to_complex_sptr self) -> bool"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(interleaved_char_to_complex_sptr self) -> bool"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(interleaved_char_to_complex_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(interleaved_char_to_complex_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(interleaved_char_to_complex_sptr self, std::string level)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(interleaved_char_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(interleaved_char_to_complex_sptr self, int m)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(interleaved_char_to_complex_sptr self)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(interleaved_char_to_complex_sptr self) -> bool"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(interleaved_char_to_complex_sptr self, int m)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(interleaved_char_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(interleaved_char_to_complex_sptr self, long max_output_buffer)
        set_max_output_buffer(interleaved_char_to_complex_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(interleaved_char_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(interleaved_char_to_complex_sptr self, long min_output_buffer)
        set_min_output_buffer(interleaved_char_to_complex_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(interleaved_char_to_complex_sptr self, int which) -> float
        pc_input_buffers_full(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(interleaved_char_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_avg(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(interleaved_char_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_var(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(interleaved_char_to_complex_sptr self, int which) -> float
        pc_output_buffers_full(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(interleaved_char_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_avg(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(interleaved_char_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_var(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(interleaved_char_to_complex_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(interleaved_char_to_complex_sptr self)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(interleaved_char_to_complex_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(interleaved_char_to_complex_sptr self, int priority) -> int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(interleaved_char_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(interleaved_char_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(interleaved_char_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(interleaved_char_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(interleaved_char_to_complex_sptr self) -> long"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(interleaved_char_to_complex_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(interleaved_char_to_complex_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(interleaved_char_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(interleaved_char_to_complex_sptr self, std::string name)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(interleaved_char_to_complex_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(interleaved_char_to_complex_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(interleaved_char_to_complex_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(interleaved_char_to_complex_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_message_subscribers(self, which_port)

# Register interleaved_char_to_complex_sptr in _blocks_swig9:
_blocks_swig9.interleaved_char_to_complex_sptr_swigregister(interleaved_char_to_complex_sptr)


interleaved_char_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interleaved_char_to_complex = interleaved_char_to_complex.make;

class keep_m_in_n_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::keep_m_in_n > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(keep_m_in_n_sptr self) -> keep_m_in_n_sptr
        __init__(keep_m_in_n_sptr self, keep_m_in_n p) -> keep_m_in_n_sptr
        """
        _blocks_swig9.keep_m_in_n_sptr_swiginit(self, _blocks_swig9.new_keep_m_in_n_sptr(*args))

    def __deref__(self) -> "gr::blocks::keep_m_in_n *":
        r"""__deref__(keep_m_in_n_sptr self) -> keep_m_in_n"""
        return _blocks_swig9.keep_m_in_n_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_keep_m_in_n_sptr

    def make(self, itemsize: "size_t", m: "int", n: "int", offset: "int") -> "gr::blocks::keep_m_in_n::sptr":
        r"""
        make(keep_m_in_n_sptr self, size_t itemsize, int m, int n, int offset) -> keep_m_in_n_sptr
        decimate a stream, keeping the first  items out of every  starting after  items.

        Constructor Specific Documentation:

        Make a keep m in n block.

        Args:
            itemsize : stream itemsize
            m : number of items to take in block of  items
            n : block size in items
            offset : initial item offset into the stream
        """
        return _blocks_swig9.keep_m_in_n_sptr_make(self, itemsize, m, n, offset)

    def set_m(self, m: "int") -> "void":
        r"""set_m(keep_m_in_n_sptr self, int m)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_m(self, m)

    def set_n(self, n: "int") -> "void":
        r"""set_n(keep_m_in_n_sptr self, int n)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_n(self, n)

    def set_offset(self, offset: "int") -> "void":
        r"""set_offset(keep_m_in_n_sptr self, int offset)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_offset(self, offset)

    def history(self) -> "unsigned int":
        r"""history(keep_m_in_n_sptr self) -> unsigned int"""
        return _blocks_swig9.keep_m_in_n_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(keep_m_in_n_sptr self, int which, int delay)
        declare_sample_delay(keep_m_in_n_sptr self, unsigned int delay)
        """
        return _blocks_swig9.keep_m_in_n_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(keep_m_in_n_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.keep_m_in_n_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(keep_m_in_n_sptr self, int multiple)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_m_in_n_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(keep_m_in_n_sptr self) -> double"""
        return _blocks_swig9.keep_m_in_n_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(keep_m_in_n_sptr self) -> uint64_t"""
        return _blocks_swig9.keep_m_in_n_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(keep_m_in_n_sptr self) -> uint64_t"""
        return _blocks_swig9.keep_m_in_n_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(keep_m_in_n_sptr self) -> bool"""
        return _blocks_swig9.keep_m_in_n_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(keep_m_in_n_sptr self) -> bool"""
        return _blocks_swig9.keep_m_in_n_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(keep_m_in_n_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.keep_m_in_n_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(keep_m_in_n_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.keep_m_in_n_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(keep_m_in_n_sptr self, std::string level)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(keep_m_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_m_in_n_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_m_in_n_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(keep_m_in_n_sptr self, int m)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(keep_m_in_n_sptr self)"""
        return _blocks_swig9.keep_m_in_n_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(keep_m_in_n_sptr self) -> bool"""
        return _blocks_swig9.keep_m_in_n_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(keep_m_in_n_sptr self, int m)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_m_in_n_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(keep_m_in_n_sptr self, int i) -> long"""
        return _blocks_swig9.keep_m_in_n_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(keep_m_in_n_sptr self, long max_output_buffer)
        set_max_output_buffer(keep_m_in_n_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.keep_m_in_n_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(keep_m_in_n_sptr self, int i) -> long"""
        return _blocks_swig9.keep_m_in_n_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(keep_m_in_n_sptr self, long min_output_buffer)
        set_min_output_buffer(keep_m_in_n_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.keep_m_in_n_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(keep_m_in_n_sptr self, int which) -> float
        pc_input_buffers_full(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_m_in_n_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(keep_m_in_n_sptr self, int which) -> float
        pc_input_buffers_full_avg(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_m_in_n_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(keep_m_in_n_sptr self, int which) -> float
        pc_input_buffers_full_var(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_m_in_n_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(keep_m_in_n_sptr self, int which) -> float
        pc_output_buffers_full(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_m_in_n_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(keep_m_in_n_sptr self, int which) -> float
        pc_output_buffers_full_avg(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_m_in_n_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(keep_m_in_n_sptr self, int which) -> float
        pc_output_buffers_full_var(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_m_in_n_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(keep_m_in_n_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(keep_m_in_n_sptr self)"""
        return _blocks_swig9.keep_m_in_n_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(keep_m_in_n_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.keep_m_in_n_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_m_in_n_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_m_in_n_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(keep_m_in_n_sptr self, int priority) -> int"""
        return _blocks_swig9.keep_m_in_n_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(keep_m_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_m_in_n_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(keep_m_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_m_in_n_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(keep_m_in_n_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.keep_m_in_n_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(keep_m_in_n_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.keep_m_in_n_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(keep_m_in_n_sptr self) -> long"""
        return _blocks_swig9.keep_m_in_n_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(keep_m_in_n_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.keep_m_in_n_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(keep_m_in_n_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.keep_m_in_n_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(keep_m_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_m_in_n_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(keep_m_in_n_sptr self, std::string name)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(keep_m_in_n_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.keep_m_in_n_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(keep_m_in_n_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.keep_m_in_n_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(keep_m_in_n_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.keep_m_in_n_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(keep_m_in_n_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.keep_m_in_n_sptr_message_subscribers(self, which_port)

# Register keep_m_in_n_sptr in _blocks_swig9:
_blocks_swig9.keep_m_in_n_sptr_swigregister(keep_m_in_n_sptr)


keep_m_in_n_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
keep_m_in_n = keep_m_in_n.make;

class keep_one_in_n_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::keep_one_in_n > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(keep_one_in_n_sptr self) -> keep_one_in_n_sptr
        __init__(keep_one_in_n_sptr self, keep_one_in_n p) -> keep_one_in_n_sptr
        """
        _blocks_swig9.keep_one_in_n_sptr_swiginit(self, _blocks_swig9.new_keep_one_in_n_sptr(*args))

    def __deref__(self) -> "gr::blocks::keep_one_in_n *":
        r"""__deref__(keep_one_in_n_sptr self) -> keep_one_in_n"""
        return _blocks_swig9.keep_one_in_n_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_keep_one_in_n_sptr

    def make(self, itemsize: "size_t", n: "int") -> "gr::blocks::keep_one_in_n::sptr":
        r"""
        make(keep_one_in_n_sptr self, size_t itemsize, int n) -> keep_one_in_n_sptr
        decimate a stream, keeping the last item out of every .

        Constructor Specific Documentation:

        Make a keep one in n block.

        Args:
            itemsize : stream itemsize
            n : block size in items
        """
        return _blocks_swig9.keep_one_in_n_sptr_make(self, itemsize, n)

    def set_n(self, n: "int") -> "void":
        r"""set_n(keep_one_in_n_sptr self, int n)"""
        return _blocks_swig9.keep_one_in_n_sptr_set_n(self, n)

    def history(self) -> "unsigned int":
        r"""history(keep_one_in_n_sptr self) -> unsigned int"""
        return _blocks_swig9.keep_one_in_n_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(keep_one_in_n_sptr self, int which, int delay)
        declare_sample_delay(keep_one_in_n_sptr self, unsigned int delay)
        """
        return _blocks_swig9.keep_one_in_n_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(keep_one_in_n_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.keep_one_in_n_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(keep_one_in_n_sptr self, int multiple)"""
        return _blocks_swig9.keep_one_in_n_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_one_in_n_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(keep_one_in_n_sptr self) -> double"""
        return _blocks_swig9.keep_one_in_n_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(keep_one_in_n_sptr self) -> uint64_t"""
        return _blocks_swig9.keep_one_in_n_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(keep_one_in_n_sptr self) -> uint64_t"""
        return _blocks_swig9.keep_one_in_n_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(keep_one_in_n_sptr self) -> bool"""
        return _blocks_swig9.keep_one_in_n_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(keep_one_in_n_sptr self) -> bool"""
        return _blocks_swig9.keep_one_in_n_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(keep_one_in_n_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.keep_one_in_n_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(keep_one_in_n_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.keep_one_in_n_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(keep_one_in_n_sptr self, std::string level)"""
        return _blocks_swig9.keep_one_in_n_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(keep_one_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_one_in_n_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_one_in_n_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(keep_one_in_n_sptr self, int m)"""
        return _blocks_swig9.keep_one_in_n_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(keep_one_in_n_sptr self)"""
        return _blocks_swig9.keep_one_in_n_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(keep_one_in_n_sptr self) -> bool"""
        return _blocks_swig9.keep_one_in_n_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(keep_one_in_n_sptr self, int m)"""
        return _blocks_swig9.keep_one_in_n_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_one_in_n_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(keep_one_in_n_sptr self, int i) -> long"""
        return _blocks_swig9.keep_one_in_n_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(keep_one_in_n_sptr self, long max_output_buffer)
        set_max_output_buffer(keep_one_in_n_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.keep_one_in_n_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(keep_one_in_n_sptr self, int i) -> long"""
        return _blocks_swig9.keep_one_in_n_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(keep_one_in_n_sptr self, long min_output_buffer)
        set_min_output_buffer(keep_one_in_n_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.keep_one_in_n_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(keep_one_in_n_sptr self, int which) -> float
        pc_input_buffers_full(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_one_in_n_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(keep_one_in_n_sptr self, int which) -> float
        pc_input_buffers_full_avg(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_one_in_n_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(keep_one_in_n_sptr self, int which) -> float
        pc_input_buffers_full_var(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_one_in_n_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(keep_one_in_n_sptr self, int which) -> float
        pc_output_buffers_full(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_one_in_n_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(keep_one_in_n_sptr self, int which) -> float
        pc_output_buffers_full_avg(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_one_in_n_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(keep_one_in_n_sptr self, int which) -> float
        pc_output_buffers_full_var(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_one_in_n_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(keep_one_in_n_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.keep_one_in_n_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(keep_one_in_n_sptr self)"""
        return _blocks_swig9.keep_one_in_n_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(keep_one_in_n_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.keep_one_in_n_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_one_in_n_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_one_in_n_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(keep_one_in_n_sptr self, int priority) -> int"""
        return _blocks_swig9.keep_one_in_n_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(keep_one_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_one_in_n_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(keep_one_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_one_in_n_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(keep_one_in_n_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.keep_one_in_n_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(keep_one_in_n_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.keep_one_in_n_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(keep_one_in_n_sptr self) -> long"""
        return _blocks_swig9.keep_one_in_n_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(keep_one_in_n_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.keep_one_in_n_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(keep_one_in_n_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.keep_one_in_n_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(keep_one_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_one_in_n_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(keep_one_in_n_sptr self, std::string name)"""
        return _blocks_swig9.keep_one_in_n_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(keep_one_in_n_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.keep_one_in_n_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(keep_one_in_n_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.keep_one_in_n_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(keep_one_in_n_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.keep_one_in_n_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(keep_one_in_n_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.keep_one_in_n_sptr_message_subscribers(self, which_port)

# Register keep_one_in_n_sptr in _blocks_swig9:
_blocks_swig9.keep_one_in_n_sptr_swigregister(keep_one_in_n_sptr)


keep_one_in_n_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
keep_one_in_n = keep_one_in_n.make;

class lfsr_32k_source_s_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::lfsr_32k_source_s > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(lfsr_32k_source_s_sptr self) -> lfsr_32k_source_s_sptr
        __init__(lfsr_32k_source_s_sptr self, lfsr_32k_source_s p) -> lfsr_32k_source_s_sptr
        """
        _blocks_swig9.lfsr_32k_source_s_sptr_swiginit(self, _blocks_swig9.new_lfsr_32k_source_s_sptr(*args))

    def __deref__(self) -> "gr::blocks::lfsr_32k_source_s *":
        r"""__deref__(lfsr_32k_source_s_sptr self) -> lfsr_32k_source_s"""
        return _blocks_swig9.lfsr_32k_source_s_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_lfsr_32k_source_s_sptr

    def make(self) -> "gr::blocks::lfsr_32k_source_s::sptr":
        r"""
        make(lfsr_32k_source_s_sptr self) -> lfsr_32k_source_s_sptr
        LFSR pseudo-random source with period of 2^15 bits (2^11 shorts)

        This source is typically used along with gr::blocks::check_lfsr_32k_s to test the USRP using its digital loopback mode.

        Constructor Specific Documentation:

        Make a LFSR 32k source block.
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(lfsr_32k_source_s_sptr self) -> unsigned int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(lfsr_32k_source_s_sptr self, int which, int delay)
        declare_sample_delay(lfsr_32k_source_s_sptr self, unsigned int delay)
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(lfsr_32k_source_s_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(lfsr_32k_source_s_sptr self, int multiple)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(lfsr_32k_source_s_sptr self) -> double"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(lfsr_32k_source_s_sptr self) -> uint64_t"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(lfsr_32k_source_s_sptr self) -> uint64_t"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(lfsr_32k_source_s_sptr self) -> bool"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(lfsr_32k_source_s_sptr self) -> bool"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(lfsr_32k_source_s_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(lfsr_32k_source_s_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(lfsr_32k_source_s_sptr self, std::string level)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(lfsr_32k_source_s_sptr self) -> std::string"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(lfsr_32k_source_s_sptr self, int m)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(lfsr_32k_source_s_sptr self)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(lfsr_32k_source_s_sptr self) -> bool"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(lfsr_32k_source_s_sptr self, int m)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(lfsr_32k_source_s_sptr self, int i) -> long"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(lfsr_32k_source_s_sptr self, long max_output_buffer)
        set_max_output_buffer(lfsr_32k_source_s_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(lfsr_32k_source_s_sptr self, int i) -> long"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(lfsr_32k_source_s_sptr self, long min_output_buffer)
        set_min_output_buffer(lfsr_32k_source_s_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(lfsr_32k_source_s_sptr self, int which) -> float
        pc_input_buffers_full(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(lfsr_32k_source_s_sptr self, int which) -> float
        pc_input_buffers_full_avg(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(lfsr_32k_source_s_sptr self, int which) -> float
        pc_input_buffers_full_var(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(lfsr_32k_source_s_sptr self, int which) -> float
        pc_output_buffers_full(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(lfsr_32k_source_s_sptr self, int which) -> float
        pc_output_buffers_full_avg(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(lfsr_32k_source_s_sptr self, int which) -> float
        pc_output_buffers_full_var(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(lfsr_32k_source_s_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(lfsr_32k_source_s_sptr self)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(lfsr_32k_source_s_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(lfsr_32k_source_s_sptr self, int priority) -> int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(lfsr_32k_source_s_sptr self) -> std::string"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(lfsr_32k_source_s_sptr self) -> std::string"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(lfsr_32k_source_s_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(lfsr_32k_source_s_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(lfsr_32k_source_s_sptr self) -> long"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(lfsr_32k_source_s_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(lfsr_32k_source_s_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(lfsr_32k_source_s_sptr self) -> std::string"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(lfsr_32k_source_s_sptr self, std::string name)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(lfsr_32k_source_s_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(lfsr_32k_source_s_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(lfsr_32k_source_s_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(lfsr_32k_source_s_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_message_subscribers(self, which_port)

# Register lfsr_32k_source_s_sptr in _blocks_swig9:
_blocks_swig9.lfsr_32k_source_s_sptr_swigregister(lfsr_32k_source_s_sptr)


lfsr_32k_source_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
lfsr_32k_source_s = lfsr_32k_source_s.make;

class max_ff(object):
    r"""
    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::max_blk< float >::sptr":
        r"""
        make(size_t vlen, size_t vlen_out=1) -> max_ff_sptr
        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig9.max_ff_make(vlen, vlen_out)
    __swig_destroy__ = _blocks_swig9.delete_max_ff

# Register max_ff in _blocks_swig9:
_blocks_swig9.max_ff_swigregister(max_ff)

def max_ff_make(vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::max_blk< float >::sptr":
    r"""
    max_ff_make(size_t vlen, size_t vlen_out=1) -> max_ff_sptr
    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
    return _blocks_swig9.max_ff_make(vlen, vlen_out)

class max_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::max_blk< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(max_ff_sptr self) -> max_ff_sptr
        __init__(max_ff_sptr self, max_ff p) -> max_ff_sptr
        """
        _blocks_swig9.max_ff_sptr_swiginit(self, _blocks_swig9.new_max_ff_sptr(*args))

    def __deref__(self) -> "gr::blocks::max_blk< float > *":
        r"""__deref__(max_ff_sptr self) -> max_ff"""
        return _blocks_swig9.max_ff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_max_ff_sptr

    def make(self, vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::max_blk< float >::sptr":
        r"""
        make(max_ff_sptr self, size_t vlen, size_t vlen_out=1) -> max_ff_sptr
        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig9.max_ff_sptr_make(self, vlen, vlen_out)

    def history(self) -> "unsigned int":
        r"""history(max_ff_sptr self) -> unsigned int"""
        return _blocks_swig9.max_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(max_ff_sptr self, int which, int delay)
        declare_sample_delay(max_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig9.max_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(max_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.max_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(max_ff_sptr self, int multiple)"""
        return _blocks_swig9.max_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(max_ff_sptr self) -> int"""
        return _blocks_swig9.max_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(max_ff_sptr self) -> double"""
        return _blocks_swig9.max_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(max_ff_sptr self) -> uint64_t"""
        return _blocks_swig9.max_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(max_ff_sptr self) -> uint64_t"""
        return _blocks_swig9.max_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(max_ff_sptr self) -> bool"""
        return _blocks_swig9.max_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(max_ff_sptr self) -> bool"""
        return _blocks_swig9.max_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(max_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.max_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(max_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.max_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(max_ff_sptr self, std::string level)"""
        return _blocks_swig9.max_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(max_ff_sptr self) -> std::string"""
        return _blocks_swig9.max_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(max_ff_sptr self) -> int"""
        return _blocks_swig9.max_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(max_ff_sptr self, int m)"""
        return _blocks_swig9.max_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(max_ff_sptr self)"""
        return _blocks_swig9.max_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(max_ff_sptr self) -> bool"""
        return _blocks_swig9.max_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(max_ff_sptr self, int m)"""
        return _blocks_swig9.max_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(max_ff_sptr self) -> int"""
        return _blocks_swig9.max_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(max_ff_sptr self, int i) -> long"""
        return _blocks_swig9.max_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(max_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(max_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.max_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(max_ff_sptr self, int i) -> long"""
        return _blocks_swig9.max_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(max_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(max_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.max_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(max_ff_sptr self, int which) -> float
        pc_input_buffers_full(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(max_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(max_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(max_ff_sptr self, int which) -> float
        pc_output_buffers_full(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(max_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(max_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(max_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.max_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(max_ff_sptr self)"""
        return _blocks_swig9.max_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(max_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.max_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(max_ff_sptr self) -> int"""
        return _blocks_swig9.max_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(max_ff_sptr self) -> int"""
        return _blocks_swig9.max_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(max_ff_sptr self, int priority) -> int"""
        return _blocks_swig9.max_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(max_ff_sptr self) -> std::string"""
        return _blocks_swig9.max_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(max_ff_sptr self) -> std::string"""
        return _blocks_swig9.max_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(max_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.max_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(max_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.max_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(max_ff_sptr self) -> long"""
        return _blocks_swig9.max_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(max_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.max_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(max_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.max_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(max_ff_sptr self) -> std::string"""
        return _blocks_swig9.max_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(max_ff_sptr self, std::string name)"""
        return _blocks_swig9.max_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(max_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.max_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(max_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.max_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(max_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.max_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(max_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.max_ff_sptr_message_subscribers(self, which_port)

# Register max_ff_sptr in _blocks_swig9:
_blocks_swig9.max_ff_sptr_swigregister(max_ff_sptr)


max_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
max_ff = max_ff.make

class max_ii(object):
    r"""
    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::max_blk< int >::sptr":
        r"""
        make(size_t vlen, size_t vlen_out=1) -> max_ii_sptr
        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig9.max_ii_make(vlen, vlen_out)
    __swig_destroy__ = _blocks_swig9.delete_max_ii

# Register max_ii in _blocks_swig9:
_blocks_swig9.max_ii_swigregister(max_ii)

def max_ii_make(vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::max_blk< int >::sptr":
    r"""
    max_ii_make(size_t vlen, size_t vlen_out=1) -> max_ii_sptr
    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
    return _blocks_swig9.max_ii_make(vlen, vlen_out)

class max_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::max_blk< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(max_ii_sptr self) -> max_ii_sptr
        __init__(max_ii_sptr self, max_ii p) -> max_ii_sptr
        """
        _blocks_swig9.max_ii_sptr_swiginit(self, _blocks_swig9.new_max_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::max_blk< std::int32_t > *":
        r"""__deref__(max_ii_sptr self) -> max_ii"""
        return _blocks_swig9.max_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_max_ii_sptr

    def make(self, vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::max_blk< int >::sptr":
        r"""
        make(max_ii_sptr self, size_t vlen, size_t vlen_out=1) -> max_ii_sptr
        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig9.max_ii_sptr_make(self, vlen, vlen_out)

    def history(self) -> "unsigned int":
        r"""history(max_ii_sptr self) -> unsigned int"""
        return _blocks_swig9.max_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(max_ii_sptr self, int which, int delay)
        declare_sample_delay(max_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig9.max_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(max_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.max_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(max_ii_sptr self, int multiple)"""
        return _blocks_swig9.max_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(max_ii_sptr self) -> int"""
        return _blocks_swig9.max_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(max_ii_sptr self) -> double"""
        return _blocks_swig9.max_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(max_ii_sptr self) -> uint64_t"""
        return _blocks_swig9.max_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(max_ii_sptr self) -> uint64_t"""
        return _blocks_swig9.max_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(max_ii_sptr self) -> bool"""
        return _blocks_swig9.max_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(max_ii_sptr self) -> bool"""
        return _blocks_swig9.max_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(max_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.max_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(max_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.max_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(max_ii_sptr self, std::string level)"""
        return _blocks_swig9.max_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(max_ii_sptr self) -> std::string"""
        return _blocks_swig9.max_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(max_ii_sptr self) -> int"""
        return _blocks_swig9.max_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(max_ii_sptr self, int m)"""
        return _blocks_swig9.max_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(max_ii_sptr self)"""
        return _blocks_swig9.max_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(max_ii_sptr self) -> bool"""
        return _blocks_swig9.max_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(max_ii_sptr self, int m)"""
        return _blocks_swig9.max_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(max_ii_sptr self) -> int"""
        return _blocks_swig9.max_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(max_ii_sptr self, int i) -> long"""
        return _blocks_swig9.max_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(max_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(max_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.max_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(max_ii_sptr self, int i) -> long"""
        return _blocks_swig9.max_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(max_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(max_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.max_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(max_ii_sptr self, int which) -> float
        pc_input_buffers_full(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(max_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(max_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(max_ii_sptr self, int which) -> float
        pc_output_buffers_full(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(max_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(max_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(max_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.max_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(max_ii_sptr self)"""
        return _blocks_swig9.max_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(max_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.max_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(max_ii_sptr self) -> int"""
        return _blocks_swig9.max_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(max_ii_sptr self) -> int"""
        return _blocks_swig9.max_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(max_ii_sptr self, int priority) -> int"""
        return _blocks_swig9.max_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(max_ii_sptr self) -> std::string"""
        return _blocks_swig9.max_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(max_ii_sptr self) -> std::string"""
        return _blocks_swig9.max_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(max_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.max_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(max_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.max_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(max_ii_sptr self) -> long"""
        return _blocks_swig9.max_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(max_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.max_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(max_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.max_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(max_ii_sptr self) -> std::string"""
        return _blocks_swig9.max_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(max_ii_sptr self, std::string name)"""
        return _blocks_swig9.max_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(max_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.max_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(max_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.max_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(max_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.max_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(max_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.max_ii_sptr_message_subscribers(self, which_port)

# Register max_ii_sptr in _blocks_swig9:
_blocks_swig9.max_ii_sptr_swigregister(max_ii_sptr)


max_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
max_ii = max_ii.make

class max_ss(object):
    r"""
    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::max_blk< short >::sptr":
        r"""
        make(size_t vlen, size_t vlen_out=1) -> max_ss_sptr
        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig9.max_ss_make(vlen, vlen_out)
    __swig_destroy__ = _blocks_swig9.delete_max_ss

# Register max_ss in _blocks_swig9:
_blocks_swig9.max_ss_swigregister(max_ss)

def max_ss_make(vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::max_blk< short >::sptr":
    r"""
    max_ss_make(size_t vlen, size_t vlen_out=1) -> max_ss_sptr
    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
    return _blocks_swig9.max_ss_make(vlen, vlen_out)

class max_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::max_blk< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(max_ss_sptr self) -> max_ss_sptr
        __init__(max_ss_sptr self, max_ss p) -> max_ss_sptr
        """
        _blocks_swig9.max_ss_sptr_swiginit(self, _blocks_swig9.new_max_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::max_blk< std::int16_t > *":
        r"""__deref__(max_ss_sptr self) -> max_ss"""
        return _blocks_swig9.max_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig9.delete_max_ss_sptr

    def make(self, vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::max_blk< short >::sptr":
        r"""
        make(max_ss_sptr self, size_t vlen, size_t vlen_out=1) -> max_ss_sptr
        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig9.max_ss_sptr_make(self, vlen, vlen_out)

    def history(self) -> "unsigned int":
        r"""history(max_ss_sptr self) -> unsigned int"""
        return _blocks_swig9.max_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(max_ss_sptr self, int which, int delay)
        declare_sample_delay(max_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig9.max_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(max_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.max_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(max_ss_sptr self, int multiple)"""
        return _blocks_swig9.max_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(max_ss_sptr self) -> int"""
        return _blocks_swig9.max_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(max_ss_sptr self) -> double"""
        return _blocks_swig9.max_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(max_ss_sptr self) -> uint64_t"""
        return _blocks_swig9.max_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(max_ss_sptr self) -> uint64_t"""
        return _blocks_swig9.max_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(max_ss_sptr self) -> bool"""
        return _blocks_swig9.max_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(max_ss_sptr self) -> bool"""
        return _blocks_swig9.max_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(max_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.max_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(max_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.max_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(max_ss_sptr self, std::string level)"""
        return _blocks_swig9.max_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(max_ss_sptr self) -> std::string"""
        return _blocks_swig9.max_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(max_ss_sptr self) -> int"""
        return _blocks_swig9.max_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(max_ss_sptr self, int m)"""
        return _blocks_swig9.max_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(max_ss_sptr self)"""
        return _blocks_swig9.max_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(max_ss_sptr self) -> bool"""
        return _blocks_swig9.max_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(max_ss_sptr self, int m)"""
        return _blocks_swig9.max_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(max_ss_sptr self) -> int"""
        return _blocks_swig9.max_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(max_ss_sptr self, int i) -> long"""
        return _blocks_swig9.max_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(max_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(max_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.max_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(max_ss_sptr self, int i) -> long"""
        return _blocks_swig9.max_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(max_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(max_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.max_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(max_ss_sptr self, int which) -> float
        pc_input_buffers_full(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(max_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(max_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(max_ss_sptr self, int which) -> float
        pc_output_buffers_full(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(max_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(max_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(max_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.max_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(max_ss_sptr self)"""
        return _blocks_swig9.max_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(max_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.max_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(max_ss_sptr self) -> int"""
        return _blocks_swig9.max_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(max_ss_sptr self) -> int"""
        return _blocks_swig9.max_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(max_ss_sptr self, int priority) -> int"""
        return _blocks_swig9.max_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(max_ss_sptr self) -> std::string"""
        return _blocks_swig9.max_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(max_ss_sptr self) -> std::string"""
        return _blocks_swig9.max_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(max_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.max_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(max_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.max_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(max_ss_sptr self) -> long"""
        return _blocks_swig9.max_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(max_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.max_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(max_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.max_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(max_ss_sptr self) -> std::string"""
        return _blocks_swig9.max_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(max_ss_sptr self, std::string name)"""
        return _blocks_swig9.max_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(max_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig9.max_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(max_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.max_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(max_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig9.max_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(max_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig9.max_ss_sptr_message_subscribers(self, which_port)

# Register max_ss_sptr in _blocks_swig9:
_blocks_swig9.max_ss_sptr_swigregister(max_ss_sptr)


max_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
max_ss = max_ss.make



