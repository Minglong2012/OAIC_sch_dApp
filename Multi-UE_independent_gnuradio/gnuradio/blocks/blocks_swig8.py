# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _blocks_swig8
else:
    import _blocks_swig8

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def high_res_timer_now() -> "gr::high_res_timer_type":
    r"""high_res_timer_now() -> gr::high_res_timer_type"""
    return _blocks_swig8.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    r"""high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _blocks_swig8.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    r"""high_res_timer_tps() -> gr::high_res_timer_type"""
    return _blocks_swig8.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    r"""high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _blocks_swig8.high_res_timer_epoch()
class add_const_bb(object):
    r"""
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_bb.

    Args:
        k : additive constant
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "unsigned char") -> "gr::blocks::add_const_bb::sptr":
        r"""
        make(unsigned char k) -> add_const_bb_sptr
        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_bb.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_bb_make(k)

    def k(self) -> "unsigned char":
        r"""
        k(add_const_bb self) -> unsigned char
        Return additive constant.
        """
        return _blocks_swig8.add_const_bb_k(self)

    def set_k(self, k: "unsigned char") -> "void":
        r"""
        set_k(add_const_bb self, unsigned char k)
        Set additive constant.
        """
        return _blocks_swig8.add_const_bb_set_k(self, k)
    __swig_destroy__ = _blocks_swig8.delete_add_const_bb

# Register add_const_bb in _blocks_swig8:
_blocks_swig8.add_const_bb_swigregister(add_const_bb)

def add_const_bb_make(k: "unsigned char") -> "gr::blocks::add_const_bb::sptr":
    r"""
    add_const_bb_make(unsigned char k) -> add_const_bb_sptr
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_bb.

    Args:
        k : additive constant
    """
    return _blocks_swig8.add_const_bb_make(k)

class add_const_ff(object):
    r"""
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ff.

    Args:
        k : additive constant
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "float") -> "gr::blocks::add_const_ff::sptr":
        r"""
        make(float k) -> add_const_ff_sptr
        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ff.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_ff_make(k)

    def k(self) -> "float":
        r"""
        k(add_const_ff self) -> float
        Return additive constant.
        """
        return _blocks_swig8.add_const_ff_k(self)

    def set_k(self, k: "float") -> "void":
        r"""
        set_k(add_const_ff self, float k)
        Set additive constant.
        """
        return _blocks_swig8.add_const_ff_set_k(self, k)
    __swig_destroy__ = _blocks_swig8.delete_add_const_ff

# Register add_const_ff in _blocks_swig8:
_blocks_swig8.add_const_ff_swigregister(add_const_ff)

def add_const_ff_make(k: "float") -> "gr::blocks::add_const_ff::sptr":
    r"""
    add_const_ff_make(float k) -> add_const_ff_sptr
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ff.

    Args:
        k : additive constant
    """
    return _blocks_swig8.add_const_ff_make(k)

class add_const_ss(object):
    r"""
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ss.

    Args:
        k : additive constant
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "short") -> "gr::blocks::add_const_ss::sptr":
        r"""
        make(short k) -> add_const_ss_sptr
        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ss.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_ss_make(k)

    def k(self) -> "short":
        r"""
        k(add_const_ss self) -> short
        Return additive constant.
        """
        return _blocks_swig8.add_const_ss_k(self)

    def set_k(self, k: "short") -> "void":
        r"""
        set_k(add_const_ss self, short k)
        Set additive constant.
        """
        return _blocks_swig8.add_const_ss_set_k(self, k)
    __swig_destroy__ = _blocks_swig8.delete_add_const_ss

# Register add_const_ss in _blocks_swig8:
_blocks_swig8.add_const_ss_swigregister(add_const_ss)

def add_const_ss_make(k: "short") -> "gr::blocks::add_const_ss::sptr":
    r"""
    add_const_ss_make(short k) -> add_const_ss_sptr
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ss.

    Args:
        k : additive constant
    """
    return _blocks_swig8.add_const_ss_make(k)

class add_const_ii(object):
    r"""
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ii.

    Args:
        k : additive constant
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "int") -> "gr::blocks::add_const_ii::sptr":
        r"""
        make(int k) -> add_const_ii_sptr
        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ii.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_ii_make(k)

    def k(self) -> "int":
        r"""
        k(add_const_ii self) -> int
        Return additive constant.
        """
        return _blocks_swig8.add_const_ii_k(self)

    def set_k(self, k: "int") -> "void":
        r"""
        set_k(add_const_ii self, int k)
        Set additive constant.
        """
        return _blocks_swig8.add_const_ii_set_k(self, k)
    __swig_destroy__ = _blocks_swig8.delete_add_const_ii

# Register add_const_ii in _blocks_swig8:
_blocks_swig8.add_const_ii_swigregister(add_const_ii)

def add_const_ii_make(k: "int") -> "gr::blocks::add_const_ii::sptr":
    r"""
    add_const_ii_make(int k) -> add_const_ii_sptr
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ii.

    Args:
        k : additive constant
    """
    return _blocks_swig8.add_const_ii_make(k)

class add_const_cc(object):
    r"""
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_cc.

    Args:
        k : additive constant
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "gr_complex") -> "gr::blocks::add_const_cc::sptr":
        r"""
        make(gr_complex k) -> add_const_cc_sptr
        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_cc.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_cc_make(k)

    def k(self) -> "gr_complex":
        r"""
        k(add_const_cc self) -> gr_complex
        Return additive constant.
        """
        return _blocks_swig8.add_const_cc_k(self)

    def set_k(self, k: "gr_complex") -> "void":
        r"""
        set_k(add_const_cc self, gr_complex k)
        Set additive constant.
        """
        return _blocks_swig8.add_const_cc_set_k(self, k)
    __swig_destroy__ = _blocks_swig8.delete_add_const_cc

# Register add_const_cc in _blocks_swig8:
_blocks_swig8.add_const_cc_swigregister(add_const_cc)

def add_const_cc_make(k: "gr_complex") -> "gr::blocks::add_const_cc::sptr":
    r"""
    add_const_cc_make(gr_complex k) -> add_const_cc_sptr
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_cc.

    Args:
        k : additive constant
    """
    return _blocks_swig8.add_const_cc_make(k)

class abs_ff(object):
    r"""
    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_blk.

    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::abs_blk< float >::sptr":
        r"""
        make(size_t vlen=1) -> abs_ff_sptr
        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_blk.

        Args:
            vlen : 
        """
        return _blocks_swig8.abs_ff_make(vlen)
    __swig_destroy__ = _blocks_swig8.delete_abs_ff

# Register abs_ff in _blocks_swig8:
_blocks_swig8.abs_ff_swigregister(abs_ff)

def abs_ff_make(vlen: "size_t"=1) -> "gr::blocks::abs_blk< float >::sptr":
    r"""
    abs_ff_make(size_t vlen=1) -> abs_ff_sptr
    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_blk.

    Args:
        vlen : 
    """
    return _blocks_swig8.abs_ff_make(vlen)

class abs_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::abs_blk< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(abs_ff_sptr self) -> abs_ff_sptr
        __init__(abs_ff_sptr self, abs_ff p) -> abs_ff_sptr
        """
        _blocks_swig8.abs_ff_sptr_swiginit(self, _blocks_swig8.new_abs_ff_sptr(*args))

    def __deref__(self) -> "gr::blocks::abs_blk< float > *":
        r"""__deref__(abs_ff_sptr self) -> abs_ff"""
        return _blocks_swig8.abs_ff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_abs_ff_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::abs_blk< float >::sptr":
        r"""
        make(abs_ff_sptr self, size_t vlen=1) -> abs_ff_sptr
        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_blk.

        Args:
            vlen : 
        """
        return _blocks_swig8.abs_ff_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(abs_ff_sptr self) -> unsigned int"""
        return _blocks_swig8.abs_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(abs_ff_sptr self, int which, int delay)
        declare_sample_delay(abs_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig8.abs_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(abs_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.abs_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(abs_ff_sptr self, int multiple)"""
        return _blocks_swig8.abs_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(abs_ff_sptr self) -> int"""
        return _blocks_swig8.abs_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(abs_ff_sptr self) -> double"""
        return _blocks_swig8.abs_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(abs_ff_sptr self) -> uint64_t"""
        return _blocks_swig8.abs_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(abs_ff_sptr self) -> uint64_t"""
        return _blocks_swig8.abs_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(abs_ff_sptr self) -> bool"""
        return _blocks_swig8.abs_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(abs_ff_sptr self) -> bool"""
        return _blocks_swig8.abs_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(abs_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.abs_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(abs_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.abs_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(abs_ff_sptr self, std::string level)"""
        return _blocks_swig8.abs_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(abs_ff_sptr self) -> std::string"""
        return _blocks_swig8.abs_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(abs_ff_sptr self) -> int"""
        return _blocks_swig8.abs_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(abs_ff_sptr self, int m)"""
        return _blocks_swig8.abs_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(abs_ff_sptr self)"""
        return _blocks_swig8.abs_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(abs_ff_sptr self) -> bool"""
        return _blocks_swig8.abs_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(abs_ff_sptr self, int m)"""
        return _blocks_swig8.abs_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(abs_ff_sptr self) -> int"""
        return _blocks_swig8.abs_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(abs_ff_sptr self, int i) -> long"""
        return _blocks_swig8.abs_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(abs_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(abs_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.abs_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(abs_ff_sptr self, int i) -> long"""
        return _blocks_swig8.abs_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(abs_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(abs_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.abs_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(abs_ff_sptr self, int which) -> float
        pc_input_buffers_full(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(abs_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(abs_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(abs_ff_sptr self, int which) -> float
        pc_output_buffers_full(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(abs_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(abs_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(abs_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.abs_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(abs_ff_sptr self)"""
        return _blocks_swig8.abs_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(abs_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.abs_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(abs_ff_sptr self) -> int"""
        return _blocks_swig8.abs_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(abs_ff_sptr self) -> int"""
        return _blocks_swig8.abs_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(abs_ff_sptr self, int priority) -> int"""
        return _blocks_swig8.abs_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(abs_ff_sptr self) -> std::string"""
        return _blocks_swig8.abs_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(abs_ff_sptr self) -> std::string"""
        return _blocks_swig8.abs_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(abs_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.abs_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(abs_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.abs_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(abs_ff_sptr self) -> long"""
        return _blocks_swig8.abs_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(abs_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.abs_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(abs_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.abs_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(abs_ff_sptr self) -> std::string"""
        return _blocks_swig8.abs_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(abs_ff_sptr self, std::string name)"""
        return _blocks_swig8.abs_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(abs_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.abs_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(abs_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.abs_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(abs_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.abs_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(abs_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.abs_ff_sptr_message_subscribers(self, which_port)

# Register abs_ff_sptr in _blocks_swig8:
_blocks_swig8.abs_ff_sptr_swigregister(abs_ff_sptr)


abs_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
abs_ff = abs_ff.make

class abs_ss(object):
    r"""
    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_blk.

    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::abs_blk< short >::sptr":
        r"""
        make(size_t vlen=1) -> abs_ss_sptr
        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_blk.

        Args:
            vlen : 
        """
        return _blocks_swig8.abs_ss_make(vlen)
    __swig_destroy__ = _blocks_swig8.delete_abs_ss

# Register abs_ss in _blocks_swig8:
_blocks_swig8.abs_ss_swigregister(abs_ss)

def abs_ss_make(vlen: "size_t"=1) -> "gr::blocks::abs_blk< short >::sptr":
    r"""
    abs_ss_make(size_t vlen=1) -> abs_ss_sptr
    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_blk.

    Args:
        vlen : 
    """
    return _blocks_swig8.abs_ss_make(vlen)

class abs_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::abs_blk< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(abs_ss_sptr self) -> abs_ss_sptr
        __init__(abs_ss_sptr self, abs_ss p) -> abs_ss_sptr
        """
        _blocks_swig8.abs_ss_sptr_swiginit(self, _blocks_swig8.new_abs_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::abs_blk< std::int16_t > *":
        r"""__deref__(abs_ss_sptr self) -> abs_ss"""
        return _blocks_swig8.abs_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_abs_ss_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::abs_blk< short >::sptr":
        r"""
        make(abs_ss_sptr self, size_t vlen=1) -> abs_ss_sptr
        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_blk.

        Args:
            vlen : 
        """
        return _blocks_swig8.abs_ss_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(abs_ss_sptr self) -> unsigned int"""
        return _blocks_swig8.abs_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(abs_ss_sptr self, int which, int delay)
        declare_sample_delay(abs_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig8.abs_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(abs_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.abs_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(abs_ss_sptr self, int multiple)"""
        return _blocks_swig8.abs_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(abs_ss_sptr self) -> int"""
        return _blocks_swig8.abs_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(abs_ss_sptr self) -> double"""
        return _blocks_swig8.abs_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(abs_ss_sptr self) -> uint64_t"""
        return _blocks_swig8.abs_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(abs_ss_sptr self) -> uint64_t"""
        return _blocks_swig8.abs_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(abs_ss_sptr self) -> bool"""
        return _blocks_swig8.abs_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(abs_ss_sptr self) -> bool"""
        return _blocks_swig8.abs_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(abs_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.abs_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(abs_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.abs_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(abs_ss_sptr self, std::string level)"""
        return _blocks_swig8.abs_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(abs_ss_sptr self) -> std::string"""
        return _blocks_swig8.abs_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(abs_ss_sptr self) -> int"""
        return _blocks_swig8.abs_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(abs_ss_sptr self, int m)"""
        return _blocks_swig8.abs_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(abs_ss_sptr self)"""
        return _blocks_swig8.abs_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(abs_ss_sptr self) -> bool"""
        return _blocks_swig8.abs_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(abs_ss_sptr self, int m)"""
        return _blocks_swig8.abs_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(abs_ss_sptr self) -> int"""
        return _blocks_swig8.abs_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(abs_ss_sptr self, int i) -> long"""
        return _blocks_swig8.abs_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(abs_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(abs_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.abs_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(abs_ss_sptr self, int i) -> long"""
        return _blocks_swig8.abs_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(abs_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(abs_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.abs_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(abs_ss_sptr self, int which) -> float
        pc_input_buffers_full(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(abs_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(abs_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(abs_ss_sptr self, int which) -> float
        pc_output_buffers_full(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(abs_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(abs_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(abs_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.abs_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(abs_ss_sptr self)"""
        return _blocks_swig8.abs_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(abs_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.abs_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(abs_ss_sptr self) -> int"""
        return _blocks_swig8.abs_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(abs_ss_sptr self) -> int"""
        return _blocks_swig8.abs_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(abs_ss_sptr self, int priority) -> int"""
        return _blocks_swig8.abs_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(abs_ss_sptr self) -> std::string"""
        return _blocks_swig8.abs_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(abs_ss_sptr self) -> std::string"""
        return _blocks_swig8.abs_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(abs_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.abs_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(abs_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.abs_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(abs_ss_sptr self) -> long"""
        return _blocks_swig8.abs_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(abs_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.abs_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(abs_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.abs_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(abs_ss_sptr self) -> std::string"""
        return _blocks_swig8.abs_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(abs_ss_sptr self, std::string name)"""
        return _blocks_swig8.abs_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(abs_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.abs_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(abs_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.abs_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(abs_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.abs_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(abs_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.abs_ss_sptr_message_subscribers(self, which_port)

# Register abs_ss_sptr in _blocks_swig8:
_blocks_swig8.abs_ss_sptr_swigregister(abs_ss_sptr)


abs_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
abs_ss = abs_ss.make

class abs_ii(object):
    r"""
    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_blk.

    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::abs_blk< int >::sptr":
        r"""
        make(size_t vlen=1) -> abs_ii_sptr
        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_blk.

        Args:
            vlen : 
        """
        return _blocks_swig8.abs_ii_make(vlen)
    __swig_destroy__ = _blocks_swig8.delete_abs_ii

# Register abs_ii in _blocks_swig8:
_blocks_swig8.abs_ii_swigregister(abs_ii)

def abs_ii_make(vlen: "size_t"=1) -> "gr::blocks::abs_blk< int >::sptr":
    r"""
    abs_ii_make(size_t vlen=1) -> abs_ii_sptr
    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_blk.

    Args:
        vlen : 
    """
    return _blocks_swig8.abs_ii_make(vlen)

class abs_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::abs_blk< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(abs_ii_sptr self) -> abs_ii_sptr
        __init__(abs_ii_sptr self, abs_ii p) -> abs_ii_sptr
        """
        _blocks_swig8.abs_ii_sptr_swiginit(self, _blocks_swig8.new_abs_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::abs_blk< std::int32_t > *":
        r"""__deref__(abs_ii_sptr self) -> abs_ii"""
        return _blocks_swig8.abs_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_abs_ii_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::abs_blk< int >::sptr":
        r"""
        make(abs_ii_sptr self, size_t vlen=1) -> abs_ii_sptr
        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_blk.

        Args:
            vlen : 
        """
        return _blocks_swig8.abs_ii_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(abs_ii_sptr self) -> unsigned int"""
        return _blocks_swig8.abs_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(abs_ii_sptr self, int which, int delay)
        declare_sample_delay(abs_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig8.abs_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(abs_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.abs_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(abs_ii_sptr self, int multiple)"""
        return _blocks_swig8.abs_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(abs_ii_sptr self) -> int"""
        return _blocks_swig8.abs_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(abs_ii_sptr self) -> double"""
        return _blocks_swig8.abs_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(abs_ii_sptr self) -> uint64_t"""
        return _blocks_swig8.abs_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(abs_ii_sptr self) -> uint64_t"""
        return _blocks_swig8.abs_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(abs_ii_sptr self) -> bool"""
        return _blocks_swig8.abs_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(abs_ii_sptr self) -> bool"""
        return _blocks_swig8.abs_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(abs_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.abs_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(abs_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.abs_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(abs_ii_sptr self, std::string level)"""
        return _blocks_swig8.abs_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(abs_ii_sptr self) -> std::string"""
        return _blocks_swig8.abs_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(abs_ii_sptr self) -> int"""
        return _blocks_swig8.abs_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(abs_ii_sptr self, int m)"""
        return _blocks_swig8.abs_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(abs_ii_sptr self)"""
        return _blocks_swig8.abs_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(abs_ii_sptr self) -> bool"""
        return _blocks_swig8.abs_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(abs_ii_sptr self, int m)"""
        return _blocks_swig8.abs_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(abs_ii_sptr self) -> int"""
        return _blocks_swig8.abs_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(abs_ii_sptr self, int i) -> long"""
        return _blocks_swig8.abs_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(abs_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(abs_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.abs_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(abs_ii_sptr self, int i) -> long"""
        return _blocks_swig8.abs_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(abs_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(abs_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.abs_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(abs_ii_sptr self, int which) -> float
        pc_input_buffers_full(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(abs_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(abs_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(abs_ii_sptr self, int which) -> float
        pc_output_buffers_full(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(abs_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(abs_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(abs_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.abs_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(abs_ii_sptr self)"""
        return _blocks_swig8.abs_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(abs_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.abs_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(abs_ii_sptr self) -> int"""
        return _blocks_swig8.abs_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(abs_ii_sptr self) -> int"""
        return _blocks_swig8.abs_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(abs_ii_sptr self, int priority) -> int"""
        return _blocks_swig8.abs_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(abs_ii_sptr self) -> std::string"""
        return _blocks_swig8.abs_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(abs_ii_sptr self) -> std::string"""
        return _blocks_swig8.abs_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(abs_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.abs_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(abs_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.abs_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(abs_ii_sptr self) -> long"""
        return _blocks_swig8.abs_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(abs_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.abs_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(abs_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.abs_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(abs_ii_sptr self) -> std::string"""
        return _blocks_swig8.abs_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(abs_ii_sptr self, std::string name)"""
        return _blocks_swig8.abs_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(abs_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.abs_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(abs_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.abs_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(abs_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.abs_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(abs_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.abs_ii_sptr_message_subscribers(self, which_port)

# Register abs_ii_sptr in _blocks_swig8:
_blocks_swig8.abs_ii_sptr_swigregister(abs_ii_sptr)


abs_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
abs_ii = abs_ii.make

class add_ff(object):
    r"""
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::add_blk< float >::sptr":
        r"""
        make(size_t vlen=1) -> add_ff_sptr
        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_ff_make(vlen)
    __swig_destroy__ = _blocks_swig8.delete_add_ff

# Register add_ff in _blocks_swig8:
_blocks_swig8.add_ff_swigregister(add_ff)

def add_ff_make(vlen: "size_t"=1) -> "gr::blocks::add_blk< float >::sptr":
    r"""
    add_ff_make(size_t vlen=1) -> add_ff_sptr
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig8.add_ff_make(vlen)

class add_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_blk< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_ff_sptr self) -> add_ff_sptr
        __init__(add_ff_sptr self, add_ff p) -> add_ff_sptr
        """
        _blocks_swig8.add_ff_sptr_swiginit(self, _blocks_swig8.new_add_ff_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_blk< float > *":
        r"""__deref__(add_ff_sptr self) -> add_ff"""
        return _blocks_swig8.add_ff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_ff_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::add_blk< float >::sptr":
        r"""
        make(add_ff_sptr self, size_t vlen=1) -> add_ff_sptr
        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_ff_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(add_ff_sptr self) -> unsigned int"""
        return _blocks_swig8.add_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_ff_sptr self, int which, int delay)
        declare_sample_delay(add_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_ff_sptr self, int multiple)"""
        return _blocks_swig8.add_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_ff_sptr self) -> int"""
        return _blocks_swig8.add_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_ff_sptr self) -> double"""
        return _blocks_swig8.add_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_ff_sptr self) -> uint64_t"""
        return _blocks_swig8.add_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_ff_sptr self) -> uint64_t"""
        return _blocks_swig8.add_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_ff_sptr self) -> bool"""
        return _blocks_swig8.add_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_ff_sptr self) -> bool"""
        return _blocks_swig8.add_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_ff_sptr self, std::string level)"""
        return _blocks_swig8.add_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_ff_sptr self) -> int"""
        return _blocks_swig8.add_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_ff_sptr self, int m)"""
        return _blocks_swig8.add_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_ff_sptr self)"""
        return _blocks_swig8.add_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_ff_sptr self) -> bool"""
        return _blocks_swig8.add_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_ff_sptr self, int m)"""
        return _blocks_swig8.add_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_ff_sptr self) -> int"""
        return _blocks_swig8.add_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_ff_sptr self, int i) -> long"""
        return _blocks_swig8.add_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(add_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_ff_sptr self, int i) -> long"""
        return _blocks_swig8.add_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(add_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_ff_sptr self, int which) -> float
        pc_input_buffers_full(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_ff_sptr self, int which) -> float
        pc_output_buffers_full(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_ff_sptr self)"""
        return _blocks_swig8.add_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_ff_sptr self) -> int"""
        return _blocks_swig8.add_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_ff_sptr self) -> int"""
        return _blocks_swig8.add_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_ff_sptr self, int priority) -> int"""
        return _blocks_swig8.add_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_ff_sptr self) -> long"""
        return _blocks_swig8.add_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_ff_sptr self, std::string name)"""
        return _blocks_swig8.add_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_ff_sptr_message_subscribers(self, which_port)

# Register add_ff_sptr in _blocks_swig8:
_blocks_swig8.add_ff_sptr_swigregister(add_ff_sptr)


add_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_ff = add_ff.make

class add_ss(object):
    r"""
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::add_blk< short >::sptr":
        r"""
        make(size_t vlen=1) -> add_ss_sptr
        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_ss_make(vlen)
    __swig_destroy__ = _blocks_swig8.delete_add_ss

# Register add_ss in _blocks_swig8:
_blocks_swig8.add_ss_swigregister(add_ss)

def add_ss_make(vlen: "size_t"=1) -> "gr::blocks::add_blk< short >::sptr":
    r"""
    add_ss_make(size_t vlen=1) -> add_ss_sptr
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig8.add_ss_make(vlen)

class add_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_blk< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_ss_sptr self) -> add_ss_sptr
        __init__(add_ss_sptr self, add_ss p) -> add_ss_sptr
        """
        _blocks_swig8.add_ss_sptr_swiginit(self, _blocks_swig8.new_add_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_blk< std::int16_t > *":
        r"""__deref__(add_ss_sptr self) -> add_ss"""
        return _blocks_swig8.add_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_ss_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::add_blk< short >::sptr":
        r"""
        make(add_ss_sptr self, size_t vlen=1) -> add_ss_sptr
        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_ss_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(add_ss_sptr self) -> unsigned int"""
        return _blocks_swig8.add_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_ss_sptr self, int which, int delay)
        declare_sample_delay(add_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_ss_sptr self, int multiple)"""
        return _blocks_swig8.add_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_ss_sptr self) -> int"""
        return _blocks_swig8.add_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_ss_sptr self) -> double"""
        return _blocks_swig8.add_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_ss_sptr self) -> uint64_t"""
        return _blocks_swig8.add_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_ss_sptr self) -> uint64_t"""
        return _blocks_swig8.add_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_ss_sptr self) -> bool"""
        return _blocks_swig8.add_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_ss_sptr self) -> bool"""
        return _blocks_swig8.add_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_ss_sptr self, std::string level)"""
        return _blocks_swig8.add_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_ss_sptr self) -> int"""
        return _blocks_swig8.add_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_ss_sptr self, int m)"""
        return _blocks_swig8.add_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_ss_sptr self)"""
        return _blocks_swig8.add_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_ss_sptr self) -> bool"""
        return _blocks_swig8.add_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_ss_sptr self, int m)"""
        return _blocks_swig8.add_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_ss_sptr self) -> int"""
        return _blocks_swig8.add_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_ss_sptr self, int i) -> long"""
        return _blocks_swig8.add_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(add_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_ss_sptr self, int i) -> long"""
        return _blocks_swig8.add_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(add_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_ss_sptr self, int which) -> float
        pc_input_buffers_full(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_ss_sptr self, int which) -> float
        pc_output_buffers_full(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_ss_sptr self)"""
        return _blocks_swig8.add_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_ss_sptr self) -> int"""
        return _blocks_swig8.add_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_ss_sptr self) -> int"""
        return _blocks_swig8.add_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_ss_sptr self, int priority) -> int"""
        return _blocks_swig8.add_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_ss_sptr self) -> long"""
        return _blocks_swig8.add_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_ss_sptr self, std::string name)"""
        return _blocks_swig8.add_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_ss_sptr_message_subscribers(self, which_port)

# Register add_ss_sptr in _blocks_swig8:
_blocks_swig8.add_ss_sptr_swigregister(add_ss_sptr)


add_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_ss = add_ss.make

class add_ii(object):
    r"""
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::add_blk< int >::sptr":
        r"""
        make(size_t vlen=1) -> add_ii_sptr
        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_ii_make(vlen)
    __swig_destroy__ = _blocks_swig8.delete_add_ii

# Register add_ii in _blocks_swig8:
_blocks_swig8.add_ii_swigregister(add_ii)

def add_ii_make(vlen: "size_t"=1) -> "gr::blocks::add_blk< int >::sptr":
    r"""
    add_ii_make(size_t vlen=1) -> add_ii_sptr
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig8.add_ii_make(vlen)

class add_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_blk< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_ii_sptr self) -> add_ii_sptr
        __init__(add_ii_sptr self, add_ii p) -> add_ii_sptr
        """
        _blocks_swig8.add_ii_sptr_swiginit(self, _blocks_swig8.new_add_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_blk< std::int32_t > *":
        r"""__deref__(add_ii_sptr self) -> add_ii"""
        return _blocks_swig8.add_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_ii_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::add_blk< int >::sptr":
        r"""
        make(add_ii_sptr self, size_t vlen=1) -> add_ii_sptr
        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_ii_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(add_ii_sptr self) -> unsigned int"""
        return _blocks_swig8.add_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_ii_sptr self, int which, int delay)
        declare_sample_delay(add_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_ii_sptr self, int multiple)"""
        return _blocks_swig8.add_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_ii_sptr self) -> int"""
        return _blocks_swig8.add_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_ii_sptr self) -> double"""
        return _blocks_swig8.add_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_ii_sptr self) -> uint64_t"""
        return _blocks_swig8.add_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_ii_sptr self) -> uint64_t"""
        return _blocks_swig8.add_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_ii_sptr self) -> bool"""
        return _blocks_swig8.add_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_ii_sptr self) -> bool"""
        return _blocks_swig8.add_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_ii_sptr self, std::string level)"""
        return _blocks_swig8.add_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_ii_sptr self) -> int"""
        return _blocks_swig8.add_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_ii_sptr self, int m)"""
        return _blocks_swig8.add_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_ii_sptr self)"""
        return _blocks_swig8.add_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_ii_sptr self) -> bool"""
        return _blocks_swig8.add_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_ii_sptr self, int m)"""
        return _blocks_swig8.add_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_ii_sptr self) -> int"""
        return _blocks_swig8.add_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_ii_sptr self, int i) -> long"""
        return _blocks_swig8.add_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(add_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_ii_sptr self, int i) -> long"""
        return _blocks_swig8.add_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(add_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_ii_sptr self, int which) -> float
        pc_input_buffers_full(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_ii_sptr self, int which) -> float
        pc_output_buffers_full(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_ii_sptr self)"""
        return _blocks_swig8.add_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_ii_sptr self) -> int"""
        return _blocks_swig8.add_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_ii_sptr self) -> int"""
        return _blocks_swig8.add_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_ii_sptr self, int priority) -> int"""
        return _blocks_swig8.add_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_ii_sptr self) -> long"""
        return _blocks_swig8.add_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_ii_sptr self, std::string name)"""
        return _blocks_swig8.add_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_ii_sptr_message_subscribers(self, which_port)

# Register add_ii_sptr in _blocks_swig8:
_blocks_swig8.add_ii_sptr_swigregister(add_ii_sptr)


add_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_ii = add_ii.make

class add_cc(object):
    r"""
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::add_blk< std::complex< float > >::sptr":
        r"""
        make(size_t vlen=1) -> add_cc_sptr
        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_cc_make(vlen)
    __swig_destroy__ = _blocks_swig8.delete_add_cc

# Register add_cc in _blocks_swig8:
_blocks_swig8.add_cc_swigregister(add_cc)

def add_cc_make(vlen: "size_t"=1) -> "gr::blocks::add_blk< std::complex< float > >::sptr":
    r"""
    add_cc_make(size_t vlen=1) -> add_cc_sptr
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig8.add_cc_make(vlen)

class add_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_blk< gr_complex > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_cc_sptr self) -> add_cc_sptr
        __init__(add_cc_sptr self, add_cc p) -> add_cc_sptr
        """
        _blocks_swig8.add_cc_sptr_swiginit(self, _blocks_swig8.new_add_cc_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_blk< gr_complex > *":
        r"""__deref__(add_cc_sptr self) -> add_cc"""
        return _blocks_swig8.add_cc_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_cc_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::add_blk< std::complex< float > >::sptr":
        r"""
        make(add_cc_sptr self, size_t vlen=1) -> add_cc_sptr
        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_cc_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(add_cc_sptr self) -> unsigned int"""
        return _blocks_swig8.add_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_cc_sptr self, int which, int delay)
        declare_sample_delay(add_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_cc_sptr self, int multiple)"""
        return _blocks_swig8.add_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_cc_sptr self) -> int"""
        return _blocks_swig8.add_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_cc_sptr self) -> double"""
        return _blocks_swig8.add_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_cc_sptr self) -> uint64_t"""
        return _blocks_swig8.add_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_cc_sptr self) -> uint64_t"""
        return _blocks_swig8.add_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_cc_sptr self) -> bool"""
        return _blocks_swig8.add_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_cc_sptr self) -> bool"""
        return _blocks_swig8.add_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_cc_sptr self, std::string level)"""
        return _blocks_swig8.add_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_cc_sptr self) -> int"""
        return _blocks_swig8.add_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_cc_sptr self, int m)"""
        return _blocks_swig8.add_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_cc_sptr self)"""
        return _blocks_swig8.add_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_cc_sptr self) -> bool"""
        return _blocks_swig8.add_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_cc_sptr self, int m)"""
        return _blocks_swig8.add_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_cc_sptr self) -> int"""
        return _blocks_swig8.add_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_cc_sptr self, int i) -> long"""
        return _blocks_swig8.add_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(add_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_cc_sptr self, int i) -> long"""
        return _blocks_swig8.add_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(add_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_cc_sptr self, int which) -> float
        pc_input_buffers_full(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_cc_sptr self, int which) -> float
        pc_output_buffers_full(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_cc_sptr self)"""
        return _blocks_swig8.add_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_cc_sptr self) -> int"""
        return _blocks_swig8.add_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_cc_sptr self) -> int"""
        return _blocks_swig8.add_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_cc_sptr self, int priority) -> int"""
        return _blocks_swig8.add_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_cc_sptr self) -> long"""
        return _blocks_swig8.add_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_cc_sptr self, std::string name)"""
        return _blocks_swig8.add_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_cc_sptr_message_subscribers(self, which_port)

# Register add_cc_sptr in _blocks_swig8:
_blocks_swig8.add_cc_sptr_swigregister(add_cc_sptr)


add_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_cc = add_cc.make

class add_const_bb_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_const_bb > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_const_bb_sptr self) -> add_const_bb_sptr
        __init__(add_const_bb_sptr self, add_const_bb p) -> add_const_bb_sptr
        """
        _blocks_swig8.add_const_bb_sptr_swiginit(self, _blocks_swig8.new_add_const_bb_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_const_bb *":
        r"""__deref__(add_const_bb_sptr self) -> add_const_bb"""
        return _blocks_swig8.add_const_bb_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_const_bb_sptr

    def make(self, k: "unsigned char") -> "gr::blocks::add_const_bb::sptr":
        r"""
        make(add_const_bb_sptr self, unsigned char k) -> add_const_bb_sptr
        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_bb.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_bb_sptr_make(self, k)

    def k(self) -> "unsigned char":
        r"""
        k(add_const_bb_sptr self) -> unsigned char
        Return additive constant.
        """
        return _blocks_swig8.add_const_bb_sptr_k(self)

    def set_k(self, k: "unsigned char") -> "void":
        r"""
        set_k(add_const_bb_sptr self, unsigned char k)
        Set additive constant.
        """
        return _blocks_swig8.add_const_bb_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(add_const_bb_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_bb_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_const_bb_sptr self, int which, int delay)
        declare_sample_delay(add_const_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_const_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_bb_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_const_bb_sptr self, int multiple)"""
        return _blocks_swig8.add_const_bb_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_const_bb_sptr self) -> int"""
        return _blocks_swig8.add_const_bb_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_const_bb_sptr self) -> double"""
        return _blocks_swig8.add_const_bb_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_const_bb_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_bb_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_const_bb_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_bb_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_const_bb_sptr self) -> bool"""
        return _blocks_swig8.add_const_bb_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_const_bb_sptr self) -> bool"""
        return _blocks_swig8.add_const_bb_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_const_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_bb_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_const_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_bb_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_const_bb_sptr self, std::string level)"""
        return _blocks_swig8.add_const_bb_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_const_bb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_bb_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_const_bb_sptr self) -> int"""
        return _blocks_swig8.add_const_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_const_bb_sptr self, int m)"""
        return _blocks_swig8.add_const_bb_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_const_bb_sptr self)"""
        return _blocks_swig8.add_const_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_const_bb_sptr self) -> bool"""
        return _blocks_swig8.add_const_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_const_bb_sptr self, int m)"""
        return _blocks_swig8.add_const_bb_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_const_bb_sptr self) -> int"""
        return _blocks_swig8.add_const_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_const_bb_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_bb_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_const_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_const_bb_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_bb_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_const_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_const_bb_sptr self, int which) -> float
        pc_input_buffers_full(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_const_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_const_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_const_bb_sptr self, int which) -> float
        pc_output_buffers_full(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_const_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_const_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_const_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_bb_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_const_bb_sptr self)"""
        return _blocks_swig8.add_const_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_const_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_bb_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_const_bb_sptr self) -> int"""
        return _blocks_swig8.add_const_bb_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_const_bb_sptr self) -> int"""
        return _blocks_swig8.add_const_bb_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_const_bb_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_bb_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_const_bb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_bb_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_const_bb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_bb_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_const_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_bb_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_const_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_bb_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_const_bb_sptr self) -> long"""
        return _blocks_swig8.add_const_bb_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_const_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_bb_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_const_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_bb_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_const_bb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_bb_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_const_bb_sptr self, std::string name)"""
        return _blocks_swig8.add_const_bb_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_const_bb_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_const_bb_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_const_bb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_bb_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_const_bb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_bb_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_const_bb_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_bb_sptr_message_subscribers(self, which_port)

# Register add_const_bb_sptr in _blocks_swig8:
_blocks_swig8.add_const_bb_sptr_swigregister(add_const_bb_sptr)


add_const_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_bb = add_const_bb.make;

class add_const_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_const_ff > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_const_ff_sptr self) -> add_const_ff_sptr
        __init__(add_const_ff_sptr self, add_const_ff p) -> add_const_ff_sptr
        """
        _blocks_swig8.add_const_ff_sptr_swiginit(self, _blocks_swig8.new_add_const_ff_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_const_ff *":
        r"""__deref__(add_const_ff_sptr self) -> add_const_ff"""
        return _blocks_swig8.add_const_ff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_const_ff_sptr

    def make(self, k: "float") -> "gr::blocks::add_const_ff::sptr":
        r"""
        make(add_const_ff_sptr self, float k) -> add_const_ff_sptr
        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ff.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_ff_sptr_make(self, k)

    def k(self) -> "float":
        r"""
        k(add_const_ff_sptr self) -> float
        Return additive constant.
        """
        return _blocks_swig8.add_const_ff_sptr_k(self)

    def set_k(self, k: "float") -> "void":
        r"""
        set_k(add_const_ff_sptr self, float k)
        Set additive constant.
        """
        return _blocks_swig8.add_const_ff_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(add_const_ff_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_const_ff_sptr self, int which, int delay)
        declare_sample_delay(add_const_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_const_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_const_ff_sptr self, int multiple)"""
        return _blocks_swig8.add_const_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_const_ff_sptr self) -> int"""
        return _blocks_swig8.add_const_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_const_ff_sptr self) -> double"""
        return _blocks_swig8.add_const_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_const_ff_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_const_ff_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_const_ff_sptr self) -> bool"""
        return _blocks_swig8.add_const_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_const_ff_sptr self) -> bool"""
        return _blocks_swig8.add_const_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_const_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_const_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_const_ff_sptr self, std::string level)"""
        return _blocks_swig8.add_const_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_const_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_const_ff_sptr self) -> int"""
        return _blocks_swig8.add_const_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_const_ff_sptr self, int m)"""
        return _blocks_swig8.add_const_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_const_ff_sptr self)"""
        return _blocks_swig8.add_const_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_const_ff_sptr self) -> bool"""
        return _blocks_swig8.add_const_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_const_ff_sptr self, int m)"""
        return _blocks_swig8.add_const_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_const_ff_sptr self) -> int"""
        return _blocks_swig8.add_const_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_const_ff_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_const_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_const_ff_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_const_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_const_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_const_ff_sptr self)"""
        return _blocks_swig8.add_const_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_const_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_const_ff_sptr self) -> int"""
        return _blocks_swig8.add_const_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_const_ff_sptr self) -> int"""
        return _blocks_swig8.add_const_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_const_ff_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_const_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_const_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_const_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_const_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_const_ff_sptr self) -> long"""
        return _blocks_swig8.add_const_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_const_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_const_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_const_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_const_ff_sptr self, std::string name)"""
        return _blocks_swig8.add_const_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_const_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_const_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_const_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_const_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_const_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_ff_sptr_message_subscribers(self, which_port)

# Register add_const_ff_sptr in _blocks_swig8:
_blocks_swig8.add_const_ff_sptr_swigregister(add_const_ff_sptr)


add_const_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ff = add_const_ff.make;

class add_const_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_const_ss > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_const_ss_sptr self) -> add_const_ss_sptr
        __init__(add_const_ss_sptr self, add_const_ss p) -> add_const_ss_sptr
        """
        _blocks_swig8.add_const_ss_sptr_swiginit(self, _blocks_swig8.new_add_const_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_const_ss *":
        r"""__deref__(add_const_ss_sptr self) -> add_const_ss"""
        return _blocks_swig8.add_const_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_const_ss_sptr

    def make(self, k: "short") -> "gr::blocks::add_const_ss::sptr":
        r"""
        make(add_const_ss_sptr self, short k) -> add_const_ss_sptr
        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ss.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_ss_sptr_make(self, k)

    def k(self) -> "short":
        r"""
        k(add_const_ss_sptr self) -> short
        Return additive constant.
        """
        return _blocks_swig8.add_const_ss_sptr_k(self)

    def set_k(self, k: "short") -> "void":
        r"""
        set_k(add_const_ss_sptr self, short k)
        Set additive constant.
        """
        return _blocks_swig8.add_const_ss_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(add_const_ss_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_const_ss_sptr self, int which, int delay)
        declare_sample_delay(add_const_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_const_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_const_ss_sptr self, int multiple)"""
        return _blocks_swig8.add_const_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_const_ss_sptr self) -> int"""
        return _blocks_swig8.add_const_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_const_ss_sptr self) -> double"""
        return _blocks_swig8.add_const_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_const_ss_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_const_ss_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_const_ss_sptr self) -> bool"""
        return _blocks_swig8.add_const_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_const_ss_sptr self) -> bool"""
        return _blocks_swig8.add_const_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_const_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_const_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_const_ss_sptr self, std::string level)"""
        return _blocks_swig8.add_const_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_const_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_const_ss_sptr self) -> int"""
        return _blocks_swig8.add_const_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_const_ss_sptr self, int m)"""
        return _blocks_swig8.add_const_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_const_ss_sptr self)"""
        return _blocks_swig8.add_const_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_const_ss_sptr self) -> bool"""
        return _blocks_swig8.add_const_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_const_ss_sptr self, int m)"""
        return _blocks_swig8.add_const_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_const_ss_sptr self) -> int"""
        return _blocks_swig8.add_const_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_const_ss_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_const_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_const_ss_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_const_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_const_ss_sptr self, int which) -> float
        pc_input_buffers_full(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_const_ss_sptr self, int which) -> float
        pc_output_buffers_full(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_const_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_const_ss_sptr self)"""
        return _blocks_swig8.add_const_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_const_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_const_ss_sptr self) -> int"""
        return _blocks_swig8.add_const_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_const_ss_sptr self) -> int"""
        return _blocks_swig8.add_const_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_const_ss_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_const_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_const_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_const_ss_sptr self) -> long"""
        return _blocks_swig8.add_const_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_const_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_const_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_const_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_const_ss_sptr self, std::string name)"""
        return _blocks_swig8.add_const_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_const_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_const_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_const_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_const_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_const_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_ss_sptr_message_subscribers(self, which_port)

# Register add_const_ss_sptr in _blocks_swig8:
_blocks_swig8.add_const_ss_sptr_swigregister(add_const_ss_sptr)


add_const_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ss = add_const_ss.make;

class add_const_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_const_ii > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_const_ii_sptr self) -> add_const_ii_sptr
        __init__(add_const_ii_sptr self, add_const_ii p) -> add_const_ii_sptr
        """
        _blocks_swig8.add_const_ii_sptr_swiginit(self, _blocks_swig8.new_add_const_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_const_ii *":
        r"""__deref__(add_const_ii_sptr self) -> add_const_ii"""
        return _blocks_swig8.add_const_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_const_ii_sptr

    def make(self, k: "int") -> "gr::blocks::add_const_ii::sptr":
        r"""
        make(add_const_ii_sptr self, int k) -> add_const_ii_sptr
        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ii.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_ii_sptr_make(self, k)

    def k(self) -> "int":
        r"""
        k(add_const_ii_sptr self) -> int
        Return additive constant.
        """
        return _blocks_swig8.add_const_ii_sptr_k(self)

    def set_k(self, k: "int") -> "void":
        r"""
        set_k(add_const_ii_sptr self, int k)
        Set additive constant.
        """
        return _blocks_swig8.add_const_ii_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(add_const_ii_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_const_ii_sptr self, int which, int delay)
        declare_sample_delay(add_const_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_const_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_const_ii_sptr self, int multiple)"""
        return _blocks_swig8.add_const_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_const_ii_sptr self) -> int"""
        return _blocks_swig8.add_const_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_const_ii_sptr self) -> double"""
        return _blocks_swig8.add_const_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_const_ii_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_const_ii_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_const_ii_sptr self) -> bool"""
        return _blocks_swig8.add_const_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_const_ii_sptr self) -> bool"""
        return _blocks_swig8.add_const_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_const_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_const_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_const_ii_sptr self, std::string level)"""
        return _blocks_swig8.add_const_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_const_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_const_ii_sptr self) -> int"""
        return _blocks_swig8.add_const_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_const_ii_sptr self, int m)"""
        return _blocks_swig8.add_const_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_const_ii_sptr self)"""
        return _blocks_swig8.add_const_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_const_ii_sptr self) -> bool"""
        return _blocks_swig8.add_const_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_const_ii_sptr self, int m)"""
        return _blocks_swig8.add_const_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_const_ii_sptr self) -> int"""
        return _blocks_swig8.add_const_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_const_ii_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_const_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_const_ii_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_const_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_const_ii_sptr self, int which) -> float
        pc_input_buffers_full(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_const_ii_sptr self, int which) -> float
        pc_output_buffers_full(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_const_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_const_ii_sptr self)"""
        return _blocks_swig8.add_const_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_const_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_const_ii_sptr self) -> int"""
        return _blocks_swig8.add_const_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_const_ii_sptr self) -> int"""
        return _blocks_swig8.add_const_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_const_ii_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_const_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_const_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_const_ii_sptr self) -> long"""
        return _blocks_swig8.add_const_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_const_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_const_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_const_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_const_ii_sptr self, std::string name)"""
        return _blocks_swig8.add_const_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_const_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_const_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_const_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_const_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_const_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_ii_sptr_message_subscribers(self, which_port)

# Register add_const_ii_sptr in _blocks_swig8:
_blocks_swig8.add_const_ii_sptr_swigregister(add_const_ii_sptr)


add_const_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ii = add_const_ii.make;

class add_const_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_const_cc > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_const_cc_sptr self) -> add_const_cc_sptr
        __init__(add_const_cc_sptr self, add_const_cc p) -> add_const_cc_sptr
        """
        _blocks_swig8.add_const_cc_sptr_swiginit(self, _blocks_swig8.new_add_const_cc_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_const_cc *":
        r"""__deref__(add_const_cc_sptr self) -> add_const_cc"""
        return _blocks_swig8.add_const_cc_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_const_cc_sptr

    def make(self, k: "gr_complex") -> "gr::blocks::add_const_cc::sptr":
        r"""
        make(add_const_cc_sptr self, gr_complex k) -> add_const_cc_sptr
        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_cc.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_cc_sptr_make(self, k)

    def k(self) -> "gr_complex":
        r"""
        k(add_const_cc_sptr self) -> gr_complex
        Return additive constant.
        """
        return _blocks_swig8.add_const_cc_sptr_k(self)

    def set_k(self, k: "gr_complex") -> "void":
        r"""
        set_k(add_const_cc_sptr self, gr_complex k)
        Set additive constant.
        """
        return _blocks_swig8.add_const_cc_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(add_const_cc_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_const_cc_sptr self, int which, int delay)
        declare_sample_delay(add_const_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_const_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_const_cc_sptr self, int multiple)"""
        return _blocks_swig8.add_const_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_const_cc_sptr self) -> int"""
        return _blocks_swig8.add_const_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_const_cc_sptr self) -> double"""
        return _blocks_swig8.add_const_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_const_cc_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_const_cc_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_const_cc_sptr self) -> bool"""
        return _blocks_swig8.add_const_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_const_cc_sptr self) -> bool"""
        return _blocks_swig8.add_const_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_const_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_const_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_const_cc_sptr self, std::string level)"""
        return _blocks_swig8.add_const_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_const_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_const_cc_sptr self) -> int"""
        return _blocks_swig8.add_const_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_const_cc_sptr self, int m)"""
        return _blocks_swig8.add_const_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_const_cc_sptr self)"""
        return _blocks_swig8.add_const_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_const_cc_sptr self) -> bool"""
        return _blocks_swig8.add_const_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_const_cc_sptr self, int m)"""
        return _blocks_swig8.add_const_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_const_cc_sptr self) -> int"""
        return _blocks_swig8.add_const_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_const_cc_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_const_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_const_cc_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_const_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_const_cc_sptr self, int which) -> float
        pc_input_buffers_full(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_const_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_const_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_const_cc_sptr self, int which) -> float
        pc_output_buffers_full(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_const_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_const_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_const_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_const_cc_sptr self)"""
        return _blocks_swig8.add_const_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_const_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_const_cc_sptr self) -> int"""
        return _blocks_swig8.add_const_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_const_cc_sptr self) -> int"""
        return _blocks_swig8.add_const_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_const_cc_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_const_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_const_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_const_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_const_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_const_cc_sptr self) -> long"""
        return _blocks_swig8.add_const_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_const_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_const_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_const_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_const_cc_sptr self, std::string name)"""
        return _blocks_swig8.add_const_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_const_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_const_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_const_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_const_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_const_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_cc_sptr_message_subscribers(self, which_port)

# Register add_const_cc_sptr in _blocks_swig8:
_blocks_swig8.add_const_cc_sptr_swigregister(add_const_cc_sptr)


add_const_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_cc = add_const_cc.make;

class add_const_vbb(object):
    r"""
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_v.

    Args:
        k : additive constant vector
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "std::vector< std::uint8_t,std::allocator< std::uint8_t > >") -> "gr::blocks::add_const_v< unsigned char >::sptr":
        r"""
        make(std::vector< std::uint8_t,std::allocator< std::uint8_t > > k) -> add_const_vbb_sptr
        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_v.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vbb_make(k)

    def k(self) -> "std::vector< std::uint8_t,std::allocator< std::uint8_t > >":
        r"""
        k(add_const_vbb self) -> std::vector< std::uint8_t,std::allocator< std::uint8_t > >
        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vbb_k(self)

    def set_k(self, k: "std::vector< std::uint8_t,std::allocator< std::uint8_t > >") -> "void":
        r"""
        set_k(add_const_vbb self, std::vector< std::uint8_t,std::allocator< std::uint8_t > > k)
        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vbb_set_k(self, k)
    __swig_destroy__ = _blocks_swig8.delete_add_const_vbb

# Register add_const_vbb in _blocks_swig8:
_blocks_swig8.add_const_vbb_swigregister(add_const_vbb)

def add_const_vbb_make(k: "std::vector< std::uint8_t,std::allocator< std::uint8_t > >") -> "gr::blocks::add_const_v< unsigned char >::sptr":
    r"""
    add_const_vbb_make(std::vector< std::uint8_t,std::allocator< std::uint8_t > > k) -> add_const_vbb_sptr
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_v.

    Args:
        k : additive constant vector
    """
    return _blocks_swig8.add_const_vbb_make(k)

class add_const_vbb_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_const_v< std::uint8_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_const_vbb_sptr self) -> add_const_vbb_sptr
        __init__(add_const_vbb_sptr self, add_const_vbb p) -> add_const_vbb_sptr
        """
        _blocks_swig8.add_const_vbb_sptr_swiginit(self, _blocks_swig8.new_add_const_vbb_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_const_v< std::uint8_t > *":
        r"""__deref__(add_const_vbb_sptr self) -> add_const_vbb"""
        return _blocks_swig8.add_const_vbb_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_const_vbb_sptr

    def make(self, k: "std::vector< std::uint8_t,std::allocator< std::uint8_t > >") -> "gr::blocks::add_const_v< unsigned char >::sptr":
        r"""
        make(add_const_vbb_sptr self, std::vector< std::uint8_t,std::allocator< std::uint8_t > > k) -> add_const_vbb_sptr
        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_v.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vbb_sptr_make(self, k)

    def k(self) -> "std::vector< std::uint8_t,std::allocator< std::uint8_t > >":
        r"""
        k(add_const_vbb_sptr self) -> std::vector< std::uint8_t,std::allocator< std::uint8_t > >
        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vbb_sptr_k(self)

    def set_k(self, k: "std::vector< std::uint8_t,std::allocator< std::uint8_t > >") -> "void":
        r"""
        set_k(add_const_vbb_sptr self, std::vector< std::uint8_t,std::allocator< std::uint8_t > > k)
        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vbb_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(add_const_vbb_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_vbb_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_const_vbb_sptr self, int which, int delay)
        declare_sample_delay(add_const_vbb_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_vbb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_const_vbb_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_vbb_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_const_vbb_sptr self, int multiple)"""
        return _blocks_swig8.add_const_vbb_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_const_vbb_sptr self) -> int"""
        return _blocks_swig8.add_const_vbb_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_const_vbb_sptr self) -> double"""
        return _blocks_swig8.add_const_vbb_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_const_vbb_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_vbb_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_const_vbb_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_vbb_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_const_vbb_sptr self) -> bool"""
        return _blocks_swig8.add_const_vbb_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_const_vbb_sptr self) -> bool"""
        return _blocks_swig8.add_const_vbb_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_const_vbb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_vbb_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_const_vbb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_vbb_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_const_vbb_sptr self, std::string level)"""
        return _blocks_swig8.add_const_vbb_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_const_vbb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vbb_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_const_vbb_sptr self) -> int"""
        return _blocks_swig8.add_const_vbb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_const_vbb_sptr self, int m)"""
        return _blocks_swig8.add_const_vbb_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_const_vbb_sptr self)"""
        return _blocks_swig8.add_const_vbb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_const_vbb_sptr self) -> bool"""
        return _blocks_swig8.add_const_vbb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_const_vbb_sptr self, int m)"""
        return _blocks_swig8.add_const_vbb_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_const_vbb_sptr self) -> int"""
        return _blocks_swig8.add_const_vbb_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_const_vbb_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vbb_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_const_vbb_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vbb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_vbb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_const_vbb_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vbb_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_const_vbb_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vbb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_vbb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_const_vbb_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vbb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_const_vbb_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vbb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_const_vbb_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vbb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_const_vbb_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vbb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_const_vbb_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vbb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_const_vbb_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vbb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_const_vbb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_vbb_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_const_vbb_sptr self)"""
        return _blocks_swig8.add_const_vbb_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_const_vbb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_vbb_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_const_vbb_sptr self) -> int"""
        return _blocks_swig8.add_const_vbb_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_const_vbb_sptr self) -> int"""
        return _blocks_swig8.add_const_vbb_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_const_vbb_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_vbb_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_const_vbb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vbb_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_const_vbb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vbb_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_const_vbb_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vbb_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_const_vbb_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vbb_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_const_vbb_sptr self) -> long"""
        return _blocks_swig8.add_const_vbb_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_const_vbb_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_vbb_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_const_vbb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_vbb_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_const_vbb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vbb_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_const_vbb_sptr self, std::string name)"""
        return _blocks_swig8.add_const_vbb_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_const_vbb_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_const_vbb_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_const_vbb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vbb_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_const_vbb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vbb_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_const_vbb_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vbb_sptr_message_subscribers(self, which_port)

# Register add_const_vbb_sptr in _blocks_swig8:
_blocks_swig8.add_const_vbb_sptr_swigregister(add_const_vbb_sptr)


add_const_vbb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vbb = add_const_vbb.make

class add_const_vff(object):
    r"""
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_v.

    Args:
        k : additive constant vector
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "pmt_vector_float") -> "gr::blocks::add_const_v< float >::sptr":
        r"""
        make(pmt_vector_float k) -> add_const_vff_sptr
        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_v.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vff_make(k)

    def k(self) -> "std::vector< float,std::allocator< float > >":
        r"""
        k(add_const_vff self) -> pmt_vector_float
        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vff_k(self)

    def set_k(self, k: "pmt_vector_float") -> "void":
        r"""
        set_k(add_const_vff self, pmt_vector_float k)
        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vff_set_k(self, k)
    __swig_destroy__ = _blocks_swig8.delete_add_const_vff

# Register add_const_vff in _blocks_swig8:
_blocks_swig8.add_const_vff_swigregister(add_const_vff)

def add_const_vff_make(k: "pmt_vector_float") -> "gr::blocks::add_const_v< float >::sptr":
    r"""
    add_const_vff_make(pmt_vector_float k) -> add_const_vff_sptr
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_v.

    Args:
        k : additive constant vector
    """
    return _blocks_swig8.add_const_vff_make(k)

class add_const_vff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_const_v< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_const_vff_sptr self) -> add_const_vff_sptr
        __init__(add_const_vff_sptr self, add_const_vff p) -> add_const_vff_sptr
        """
        _blocks_swig8.add_const_vff_sptr_swiginit(self, _blocks_swig8.new_add_const_vff_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_const_v< float > *":
        r"""__deref__(add_const_vff_sptr self) -> add_const_vff"""
        return _blocks_swig8.add_const_vff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_const_vff_sptr

    def make(self, k: "pmt_vector_float") -> "gr::blocks::add_const_v< float >::sptr":
        r"""
        make(add_const_vff_sptr self, pmt_vector_float k) -> add_const_vff_sptr
        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_v.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vff_sptr_make(self, k)

    def k(self) -> "std::vector< float,std::allocator< float > >":
        r"""
        k(add_const_vff_sptr self) -> pmt_vector_float
        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vff_sptr_k(self)

    def set_k(self, k: "pmt_vector_float") -> "void":
        r"""
        set_k(add_const_vff_sptr self, pmt_vector_float k)
        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vff_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(add_const_vff_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_vff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_const_vff_sptr self, int which, int delay)
        declare_sample_delay(add_const_vff_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_vff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_const_vff_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_vff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_const_vff_sptr self, int multiple)"""
        return _blocks_swig8.add_const_vff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_const_vff_sptr self) -> int"""
        return _blocks_swig8.add_const_vff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_const_vff_sptr self) -> double"""
        return _blocks_swig8.add_const_vff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_const_vff_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_vff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_const_vff_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_vff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_const_vff_sptr self) -> bool"""
        return _blocks_swig8.add_const_vff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_const_vff_sptr self) -> bool"""
        return _blocks_swig8.add_const_vff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_const_vff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_vff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_const_vff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_vff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_const_vff_sptr self, std::string level)"""
        return _blocks_swig8.add_const_vff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_const_vff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_const_vff_sptr self) -> int"""
        return _blocks_swig8.add_const_vff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_const_vff_sptr self, int m)"""
        return _blocks_swig8.add_const_vff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_const_vff_sptr self)"""
        return _blocks_swig8.add_const_vff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_const_vff_sptr self) -> bool"""
        return _blocks_swig8.add_const_vff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_const_vff_sptr self, int m)"""
        return _blocks_swig8.add_const_vff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_const_vff_sptr self) -> int"""
        return _blocks_swig8.add_const_vff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_const_vff_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_const_vff_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_vff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_const_vff_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_const_vff_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_vff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_const_vff_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_const_vff_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_const_vff_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_const_vff_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_const_vff_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_const_vff_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_const_vff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_vff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_const_vff_sptr self)"""
        return _blocks_swig8.add_const_vff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_const_vff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_vff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_const_vff_sptr self) -> int"""
        return _blocks_swig8.add_const_vff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_const_vff_sptr self) -> int"""
        return _blocks_swig8.add_const_vff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_const_vff_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_vff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_const_vff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_const_vff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_const_vff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_const_vff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_const_vff_sptr self) -> long"""
        return _blocks_swig8.add_const_vff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_const_vff_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_vff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_const_vff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_vff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_const_vff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_const_vff_sptr self, std::string name)"""
        return _blocks_swig8.add_const_vff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_const_vff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_const_vff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_const_vff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_const_vff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_const_vff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vff_sptr_message_subscribers(self, which_port)

# Register add_const_vff_sptr in _blocks_swig8:
_blocks_swig8.add_const_vff_sptr_swigregister(add_const_vff_sptr)


add_const_vff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vff = add_const_vff.make

class add_const_vss(object):
    r"""
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_v.

    Args:
        k : additive constant vector
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "std::vector< std::int16_t,std::allocator< std::int16_t > >") -> "gr::blocks::add_const_v< short >::sptr":
        r"""
        make(std::vector< std::int16_t,std::allocator< std::int16_t > > k) -> add_const_vss_sptr
        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_v.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vss_make(k)

    def k(self) -> "std::vector< std::int16_t,std::allocator< std::int16_t > >":
        r"""
        k(add_const_vss self) -> std::vector< std::int16_t,std::allocator< std::int16_t > >
        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vss_k(self)

    def set_k(self, k: "std::vector< std::int16_t,std::allocator< std::int16_t > >") -> "void":
        r"""
        set_k(add_const_vss self, std::vector< std::int16_t,std::allocator< std::int16_t > > k)
        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vss_set_k(self, k)
    __swig_destroy__ = _blocks_swig8.delete_add_const_vss

# Register add_const_vss in _blocks_swig8:
_blocks_swig8.add_const_vss_swigregister(add_const_vss)

def add_const_vss_make(k: "std::vector< std::int16_t,std::allocator< std::int16_t > >") -> "gr::blocks::add_const_v< short >::sptr":
    r"""
    add_const_vss_make(std::vector< std::int16_t,std::allocator< std::int16_t > > k) -> add_const_vss_sptr
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_v.

    Args:
        k : additive constant vector
    """
    return _blocks_swig8.add_const_vss_make(k)

class add_const_vss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_const_v< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_const_vss_sptr self) -> add_const_vss_sptr
        __init__(add_const_vss_sptr self, add_const_vss p) -> add_const_vss_sptr
        """
        _blocks_swig8.add_const_vss_sptr_swiginit(self, _blocks_swig8.new_add_const_vss_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_const_v< std::int16_t > *":
        r"""__deref__(add_const_vss_sptr self) -> add_const_vss"""
        return _blocks_swig8.add_const_vss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_const_vss_sptr

    def make(self, k: "std::vector< std::int16_t,std::allocator< std::int16_t > >") -> "gr::blocks::add_const_v< short >::sptr":
        r"""
        make(add_const_vss_sptr self, std::vector< std::int16_t,std::allocator< std::int16_t > > k) -> add_const_vss_sptr
        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_v.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vss_sptr_make(self, k)

    def k(self) -> "std::vector< std::int16_t,std::allocator< std::int16_t > >":
        r"""
        k(add_const_vss_sptr self) -> std::vector< std::int16_t,std::allocator< std::int16_t > >
        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vss_sptr_k(self)

    def set_k(self, k: "std::vector< std::int16_t,std::allocator< std::int16_t > >") -> "void":
        r"""
        set_k(add_const_vss_sptr self, std::vector< std::int16_t,std::allocator< std::int16_t > > k)
        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vss_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(add_const_vss_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_vss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_const_vss_sptr self, int which, int delay)
        declare_sample_delay(add_const_vss_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_vss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_const_vss_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_vss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_const_vss_sptr self, int multiple)"""
        return _blocks_swig8.add_const_vss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_const_vss_sptr self) -> int"""
        return _blocks_swig8.add_const_vss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_const_vss_sptr self) -> double"""
        return _blocks_swig8.add_const_vss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_const_vss_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_vss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_const_vss_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_vss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_const_vss_sptr self) -> bool"""
        return _blocks_swig8.add_const_vss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_const_vss_sptr self) -> bool"""
        return _blocks_swig8.add_const_vss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_const_vss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_vss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_const_vss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_vss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_const_vss_sptr self, std::string level)"""
        return _blocks_swig8.add_const_vss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_const_vss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_const_vss_sptr self) -> int"""
        return _blocks_swig8.add_const_vss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_const_vss_sptr self, int m)"""
        return _blocks_swig8.add_const_vss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_const_vss_sptr self)"""
        return _blocks_swig8.add_const_vss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_const_vss_sptr self) -> bool"""
        return _blocks_swig8.add_const_vss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_const_vss_sptr self, int m)"""
        return _blocks_swig8.add_const_vss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_const_vss_sptr self) -> int"""
        return _blocks_swig8.add_const_vss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_const_vss_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_const_vss_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_vss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_const_vss_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_const_vss_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_vss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_const_vss_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_const_vss_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_const_vss_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_const_vss_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_const_vss_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_const_vss_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_const_vss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_vss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_const_vss_sptr self)"""
        return _blocks_swig8.add_const_vss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_const_vss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_vss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_const_vss_sptr self) -> int"""
        return _blocks_swig8.add_const_vss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_const_vss_sptr self) -> int"""
        return _blocks_swig8.add_const_vss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_const_vss_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_vss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_const_vss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_const_vss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_const_vss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_const_vss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_const_vss_sptr self) -> long"""
        return _blocks_swig8.add_const_vss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_const_vss_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_vss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_const_vss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_vss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_const_vss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_const_vss_sptr self, std::string name)"""
        return _blocks_swig8.add_const_vss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_const_vss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_const_vss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_const_vss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_const_vss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_const_vss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vss_sptr_message_subscribers(self, which_port)

# Register add_const_vss_sptr in _blocks_swig8:
_blocks_swig8.add_const_vss_sptr_swigregister(add_const_vss_sptr)


add_const_vss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vss = add_const_vss.make

class add_const_vii(object):
    r"""
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_v.

    Args:
        k : additive constant vector
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "std::vector< std::int32_t,std::allocator< std::int32_t > >") -> "gr::blocks::add_const_v< int >::sptr":
        r"""
        make(std::vector< std::int32_t,std::allocator< std::int32_t > > k) -> add_const_vii_sptr
        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_v.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vii_make(k)

    def k(self) -> "std::vector< std::int32_t,std::allocator< std::int32_t > >":
        r"""
        k(add_const_vii self) -> std::vector< std::int32_t,std::allocator< std::int32_t > >
        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vii_k(self)

    def set_k(self, k: "std::vector< std::int32_t,std::allocator< std::int32_t > >") -> "void":
        r"""
        set_k(add_const_vii self, std::vector< std::int32_t,std::allocator< std::int32_t > > k)
        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vii_set_k(self, k)
    __swig_destroy__ = _blocks_swig8.delete_add_const_vii

# Register add_const_vii in _blocks_swig8:
_blocks_swig8.add_const_vii_swigregister(add_const_vii)

def add_const_vii_make(k: "std::vector< std::int32_t,std::allocator< std::int32_t > >") -> "gr::blocks::add_const_v< int >::sptr":
    r"""
    add_const_vii_make(std::vector< std::int32_t,std::allocator< std::int32_t > > k) -> add_const_vii_sptr
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_v.

    Args:
        k : additive constant vector
    """
    return _blocks_swig8.add_const_vii_make(k)

class add_const_vii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_const_v< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_const_vii_sptr self) -> add_const_vii_sptr
        __init__(add_const_vii_sptr self, add_const_vii p) -> add_const_vii_sptr
        """
        _blocks_swig8.add_const_vii_sptr_swiginit(self, _blocks_swig8.new_add_const_vii_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_const_v< std::int32_t > *":
        r"""__deref__(add_const_vii_sptr self) -> add_const_vii"""
        return _blocks_swig8.add_const_vii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_const_vii_sptr

    def make(self, k: "std::vector< std::int32_t,std::allocator< std::int32_t > >") -> "gr::blocks::add_const_v< int >::sptr":
        r"""
        make(add_const_vii_sptr self, std::vector< std::int32_t,std::allocator< std::int32_t > > k) -> add_const_vii_sptr
        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_v.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vii_sptr_make(self, k)

    def k(self) -> "std::vector< std::int32_t,std::allocator< std::int32_t > >":
        r"""
        k(add_const_vii_sptr self) -> std::vector< std::int32_t,std::allocator< std::int32_t > >
        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vii_sptr_k(self)

    def set_k(self, k: "std::vector< std::int32_t,std::allocator< std::int32_t > >") -> "void":
        r"""
        set_k(add_const_vii_sptr self, std::vector< std::int32_t,std::allocator< std::int32_t > > k)
        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vii_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(add_const_vii_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_vii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_const_vii_sptr self, int which, int delay)
        declare_sample_delay(add_const_vii_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_vii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_const_vii_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_vii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_const_vii_sptr self, int multiple)"""
        return _blocks_swig8.add_const_vii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_const_vii_sptr self) -> int"""
        return _blocks_swig8.add_const_vii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_const_vii_sptr self) -> double"""
        return _blocks_swig8.add_const_vii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_const_vii_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_vii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_const_vii_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_vii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_const_vii_sptr self) -> bool"""
        return _blocks_swig8.add_const_vii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_const_vii_sptr self) -> bool"""
        return _blocks_swig8.add_const_vii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_const_vii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_vii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_const_vii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_vii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_const_vii_sptr self, std::string level)"""
        return _blocks_swig8.add_const_vii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_const_vii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_const_vii_sptr self) -> int"""
        return _blocks_swig8.add_const_vii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_const_vii_sptr self, int m)"""
        return _blocks_swig8.add_const_vii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_const_vii_sptr self)"""
        return _blocks_swig8.add_const_vii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_const_vii_sptr self) -> bool"""
        return _blocks_swig8.add_const_vii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_const_vii_sptr self, int m)"""
        return _blocks_swig8.add_const_vii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_const_vii_sptr self) -> int"""
        return _blocks_swig8.add_const_vii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_const_vii_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_const_vii_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_vii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_const_vii_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_const_vii_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_vii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_const_vii_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_const_vii_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_const_vii_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_const_vii_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_const_vii_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_const_vii_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_const_vii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_vii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_const_vii_sptr self)"""
        return _blocks_swig8.add_const_vii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_const_vii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_vii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_const_vii_sptr self) -> int"""
        return _blocks_swig8.add_const_vii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_const_vii_sptr self) -> int"""
        return _blocks_swig8.add_const_vii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_const_vii_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_vii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_const_vii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_const_vii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_const_vii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_const_vii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_const_vii_sptr self) -> long"""
        return _blocks_swig8.add_const_vii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_const_vii_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_vii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_const_vii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_vii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_const_vii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_const_vii_sptr self, std::string name)"""
        return _blocks_swig8.add_const_vii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_const_vii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_const_vii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_const_vii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_const_vii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_const_vii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vii_sptr_message_subscribers(self, which_port)

# Register add_const_vii_sptr in _blocks_swig8:
_blocks_swig8.add_const_vii_sptr_swigregister(add_const_vii_sptr)


add_const_vii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vii = add_const_vii.make

class add_const_vcc(object):
    r"""
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_v.

    Args:
        k : additive constant vector
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "pmt_vector_cfloat") -> "gr::blocks::add_const_v< std::complex< float > >::sptr":
        r"""
        make(pmt_vector_cfloat k) -> add_const_vcc_sptr
        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_v.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vcc_make(k)

    def k(self) -> "std::vector< std::complex< float >,std::allocator< std::complex< float > > >":
        r"""
        k(add_const_vcc self) -> pmt_vector_cfloat
        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vcc_k(self)

    def set_k(self, k: "pmt_vector_cfloat") -> "void":
        r"""
        set_k(add_const_vcc self, pmt_vector_cfloat k)
        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vcc_set_k(self, k)
    __swig_destroy__ = _blocks_swig8.delete_add_const_vcc

# Register add_const_vcc in _blocks_swig8:
_blocks_swig8.add_const_vcc_swigregister(add_const_vcc)

def add_const_vcc_make(k: "pmt_vector_cfloat") -> "gr::blocks::add_const_v< std::complex< float > >::sptr":
    r"""
    add_const_vcc_make(pmt_vector_cfloat k) -> add_const_vcc_sptr
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_v.

    Args:
        k : additive constant vector
    """
    return _blocks_swig8.add_const_vcc_make(k)

class add_const_vcc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::add_const_v< gr_complex > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_const_vcc_sptr self) -> add_const_vcc_sptr
        __init__(add_const_vcc_sptr self, add_const_vcc p) -> add_const_vcc_sptr
        """
        _blocks_swig8.add_const_vcc_sptr_swiginit(self, _blocks_swig8.new_add_const_vcc_sptr(*args))

    def __deref__(self) -> "gr::blocks::add_const_v< gr_complex > *":
        r"""__deref__(add_const_vcc_sptr self) -> add_const_vcc"""
        return _blocks_swig8.add_const_vcc_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_add_const_vcc_sptr

    def make(self, k: "pmt_vector_cfloat") -> "gr::blocks::add_const_v< std::complex< float > >::sptr":
        r"""
        make(add_const_vcc_sptr self, pmt_vector_cfloat k) -> add_const_vcc_sptr
        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_v.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vcc_sptr_make(self, k)

    def k(self) -> "std::vector< std::complex< float >,std::allocator< std::complex< float > > >":
        r"""
        k(add_const_vcc_sptr self) -> pmt_vector_cfloat
        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vcc_sptr_k(self)

    def set_k(self, k: "pmt_vector_cfloat") -> "void":
        r"""
        set_k(add_const_vcc_sptr self, pmt_vector_cfloat k)
        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vcc_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(add_const_vcc_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_vcc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_const_vcc_sptr self, int which, int delay)
        declare_sample_delay(add_const_vcc_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_vcc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_const_vcc_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_vcc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_const_vcc_sptr self, int multiple)"""
        return _blocks_swig8.add_const_vcc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_const_vcc_sptr self) -> int"""
        return _blocks_swig8.add_const_vcc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_const_vcc_sptr self) -> double"""
        return _blocks_swig8.add_const_vcc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_const_vcc_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_vcc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_const_vcc_sptr self) -> uint64_t"""
        return _blocks_swig8.add_const_vcc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_const_vcc_sptr self) -> bool"""
        return _blocks_swig8.add_const_vcc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_const_vcc_sptr self) -> bool"""
        return _blocks_swig8.add_const_vcc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_const_vcc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_vcc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_const_vcc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_vcc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_const_vcc_sptr self, std::string level)"""
        return _blocks_swig8.add_const_vcc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_const_vcc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vcc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_const_vcc_sptr self) -> int"""
        return _blocks_swig8.add_const_vcc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_const_vcc_sptr self, int m)"""
        return _blocks_swig8.add_const_vcc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_const_vcc_sptr self)"""
        return _blocks_swig8.add_const_vcc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_const_vcc_sptr self) -> bool"""
        return _blocks_swig8.add_const_vcc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_const_vcc_sptr self, int m)"""
        return _blocks_swig8.add_const_vcc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_const_vcc_sptr self) -> int"""
        return _blocks_swig8.add_const_vcc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_const_vcc_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vcc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_const_vcc_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vcc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_vcc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_const_vcc_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vcc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_const_vcc_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vcc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_vcc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vcc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vcc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vcc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vcc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vcc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vcc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_const_vcc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_vcc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_const_vcc_sptr self)"""
        return _blocks_swig8.add_const_vcc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_const_vcc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_vcc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_const_vcc_sptr self) -> int"""
        return _blocks_swig8.add_const_vcc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_const_vcc_sptr self) -> int"""
        return _blocks_swig8.add_const_vcc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_const_vcc_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_vcc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_const_vcc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vcc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_const_vcc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vcc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_const_vcc_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vcc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_const_vcc_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vcc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_const_vcc_sptr self) -> long"""
        return _blocks_swig8.add_const_vcc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_const_vcc_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_vcc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_const_vcc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_vcc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_const_vcc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vcc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_const_vcc_sptr self, std::string name)"""
        return _blocks_swig8.add_const_vcc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_const_vcc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.add_const_vcc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_const_vcc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vcc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_const_vcc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vcc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_const_vcc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.add_const_vcc_sptr_message_subscribers(self, which_port)

# Register add_const_vcc_sptr in _blocks_swig8:
_blocks_swig8.add_const_vcc_sptr_swigregister(add_const_vcc_sptr)


add_const_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vcc = add_const_vcc.make

class and_bb(object):
    r"""
    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::and_blk< unsigned char >::sptr":
        r"""
        make(size_t vlen=1) -> and_bb_sptr
        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.and_bb_make(vlen)
    __swig_destroy__ = _blocks_swig8.delete_and_bb

# Register and_bb in _blocks_swig8:
_blocks_swig8.and_bb_swigregister(and_bb)

def and_bb_make(vlen: "size_t"=1) -> "gr::blocks::and_blk< unsigned char >::sptr":
    r"""
    and_bb_make(size_t vlen=1) -> and_bb_sptr
    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig8.and_bb_make(vlen)

class and_bb_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::and_blk< std::uint8_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(and_bb_sptr self) -> and_bb_sptr
        __init__(and_bb_sptr self, and_bb p) -> and_bb_sptr
        """
        _blocks_swig8.and_bb_sptr_swiginit(self, _blocks_swig8.new_and_bb_sptr(*args))

    def __deref__(self) -> "gr::blocks::and_blk< std::uint8_t > *":
        r"""__deref__(and_bb_sptr self) -> and_bb"""
        return _blocks_swig8.and_bb_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_and_bb_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::and_blk< unsigned char >::sptr":
        r"""
        make(and_bb_sptr self, size_t vlen=1) -> and_bb_sptr
        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.and_bb_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(and_bb_sptr self) -> unsigned int"""
        return _blocks_swig8.and_bb_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(and_bb_sptr self, int which, int delay)
        declare_sample_delay(and_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig8.and_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(and_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.and_bb_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(and_bb_sptr self, int multiple)"""
        return _blocks_swig8.and_bb_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(and_bb_sptr self) -> int"""
        return _blocks_swig8.and_bb_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(and_bb_sptr self) -> double"""
        return _blocks_swig8.and_bb_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(and_bb_sptr self) -> uint64_t"""
        return _blocks_swig8.and_bb_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(and_bb_sptr self) -> uint64_t"""
        return _blocks_swig8.and_bb_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(and_bb_sptr self) -> bool"""
        return _blocks_swig8.and_bb_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(and_bb_sptr self) -> bool"""
        return _blocks_swig8.and_bb_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(and_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.and_bb_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(and_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.and_bb_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(and_bb_sptr self, std::string level)"""
        return _blocks_swig8.and_bb_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(and_bb_sptr self) -> std::string"""
        return _blocks_swig8.and_bb_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(and_bb_sptr self) -> int"""
        return _blocks_swig8.and_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(and_bb_sptr self, int m)"""
        return _blocks_swig8.and_bb_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(and_bb_sptr self)"""
        return _blocks_swig8.and_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(and_bb_sptr self) -> bool"""
        return _blocks_swig8.and_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(and_bb_sptr self, int m)"""
        return _blocks_swig8.and_bb_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(and_bb_sptr self) -> int"""
        return _blocks_swig8.and_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(and_bb_sptr self, int i) -> long"""
        return _blocks_swig8.and_bb_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(and_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(and_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.and_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(and_bb_sptr self, int i) -> long"""
        return _blocks_swig8.and_bb_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(and_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(and_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.and_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(and_bb_sptr self, int which) -> float
        pc_input_buffers_full(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(and_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(and_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(and_bb_sptr self, int which) -> float
        pc_output_buffers_full(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(and_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(and_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(and_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.and_bb_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(and_bb_sptr self)"""
        return _blocks_swig8.and_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(and_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.and_bb_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(and_bb_sptr self) -> int"""
        return _blocks_swig8.and_bb_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(and_bb_sptr self) -> int"""
        return _blocks_swig8.and_bb_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(and_bb_sptr self, int priority) -> int"""
        return _blocks_swig8.and_bb_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(and_bb_sptr self) -> std::string"""
        return _blocks_swig8.and_bb_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(and_bb_sptr self) -> std::string"""
        return _blocks_swig8.and_bb_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(and_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.and_bb_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(and_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.and_bb_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(and_bb_sptr self) -> long"""
        return _blocks_swig8.and_bb_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(and_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.and_bb_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(and_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.and_bb_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(and_bb_sptr self) -> std::string"""
        return _blocks_swig8.and_bb_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(and_bb_sptr self, std::string name)"""
        return _blocks_swig8.and_bb_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(and_bb_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.and_bb_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(and_bb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.and_bb_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(and_bb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.and_bb_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(and_bb_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.and_bb_sptr_message_subscribers(self, which_port)

# Register and_bb_sptr in _blocks_swig8:
_blocks_swig8.and_bb_sptr_swigregister(and_bb_sptr)


and_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_bb = and_bb.make

class and_ss(object):
    r"""
    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::and_blk< short >::sptr":
        r"""
        make(size_t vlen=1) -> and_ss_sptr
        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.and_ss_make(vlen)
    __swig_destroy__ = _blocks_swig8.delete_and_ss

# Register and_ss in _blocks_swig8:
_blocks_swig8.and_ss_swigregister(and_ss)

def and_ss_make(vlen: "size_t"=1) -> "gr::blocks::and_blk< short >::sptr":
    r"""
    and_ss_make(size_t vlen=1) -> and_ss_sptr
    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig8.and_ss_make(vlen)

class and_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::and_blk< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(and_ss_sptr self) -> and_ss_sptr
        __init__(and_ss_sptr self, and_ss p) -> and_ss_sptr
        """
        _blocks_swig8.and_ss_sptr_swiginit(self, _blocks_swig8.new_and_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::and_blk< std::int16_t > *":
        r"""__deref__(and_ss_sptr self) -> and_ss"""
        return _blocks_swig8.and_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_and_ss_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::and_blk< short >::sptr":
        r"""
        make(and_ss_sptr self, size_t vlen=1) -> and_ss_sptr
        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.and_ss_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(and_ss_sptr self) -> unsigned int"""
        return _blocks_swig8.and_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(and_ss_sptr self, int which, int delay)
        declare_sample_delay(and_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig8.and_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(and_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.and_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(and_ss_sptr self, int multiple)"""
        return _blocks_swig8.and_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(and_ss_sptr self) -> int"""
        return _blocks_swig8.and_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(and_ss_sptr self) -> double"""
        return _blocks_swig8.and_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(and_ss_sptr self) -> uint64_t"""
        return _blocks_swig8.and_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(and_ss_sptr self) -> uint64_t"""
        return _blocks_swig8.and_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(and_ss_sptr self) -> bool"""
        return _blocks_swig8.and_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(and_ss_sptr self) -> bool"""
        return _blocks_swig8.and_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(and_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.and_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(and_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.and_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(and_ss_sptr self, std::string level)"""
        return _blocks_swig8.and_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(and_ss_sptr self) -> std::string"""
        return _blocks_swig8.and_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(and_ss_sptr self) -> int"""
        return _blocks_swig8.and_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(and_ss_sptr self, int m)"""
        return _blocks_swig8.and_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(and_ss_sptr self)"""
        return _blocks_swig8.and_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(and_ss_sptr self) -> bool"""
        return _blocks_swig8.and_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(and_ss_sptr self, int m)"""
        return _blocks_swig8.and_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(and_ss_sptr self) -> int"""
        return _blocks_swig8.and_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(and_ss_sptr self, int i) -> long"""
        return _blocks_swig8.and_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(and_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(and_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.and_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(and_ss_sptr self, int i) -> long"""
        return _blocks_swig8.and_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(and_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(and_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.and_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(and_ss_sptr self, int which) -> float
        pc_input_buffers_full(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(and_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(and_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(and_ss_sptr self, int which) -> float
        pc_output_buffers_full(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(and_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(and_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(and_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.and_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(and_ss_sptr self)"""
        return _blocks_swig8.and_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(and_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.and_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(and_ss_sptr self) -> int"""
        return _blocks_swig8.and_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(and_ss_sptr self) -> int"""
        return _blocks_swig8.and_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(and_ss_sptr self, int priority) -> int"""
        return _blocks_swig8.and_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(and_ss_sptr self) -> std::string"""
        return _blocks_swig8.and_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(and_ss_sptr self) -> std::string"""
        return _blocks_swig8.and_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(and_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.and_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(and_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.and_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(and_ss_sptr self) -> long"""
        return _blocks_swig8.and_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(and_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.and_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(and_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.and_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(and_ss_sptr self) -> std::string"""
        return _blocks_swig8.and_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(and_ss_sptr self, std::string name)"""
        return _blocks_swig8.and_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(and_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.and_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(and_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.and_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(and_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.and_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(and_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.and_ss_sptr_message_subscribers(self, which_port)

# Register and_ss_sptr in _blocks_swig8:
_blocks_swig8.and_ss_sptr_swigregister(and_ss_sptr)


and_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_ss = and_ss.make

class and_ii(object):
    r"""
    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::and_blk< int >::sptr":
        r"""
        make(size_t vlen=1) -> and_ii_sptr
        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.and_ii_make(vlen)
    __swig_destroy__ = _blocks_swig8.delete_and_ii

# Register and_ii in _blocks_swig8:
_blocks_swig8.and_ii_swigregister(and_ii)

def and_ii_make(vlen: "size_t"=1) -> "gr::blocks::and_blk< int >::sptr":
    r"""
    and_ii_make(size_t vlen=1) -> and_ii_sptr
    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig8.and_ii_make(vlen)

class and_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::and_blk< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(and_ii_sptr self) -> and_ii_sptr
        __init__(and_ii_sptr self, and_ii p) -> and_ii_sptr
        """
        _blocks_swig8.and_ii_sptr_swiginit(self, _blocks_swig8.new_and_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::and_blk< std::int32_t > *":
        r"""__deref__(and_ii_sptr self) -> and_ii"""
        return _blocks_swig8.and_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig8.delete_and_ii_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::and_blk< int >::sptr":
        r"""
        make(and_ii_sptr self, size_t vlen=1) -> and_ii_sptr
        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.and_ii_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(and_ii_sptr self) -> unsigned int"""
        return _blocks_swig8.and_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(and_ii_sptr self, int which, int delay)
        declare_sample_delay(and_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig8.and_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(and_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.and_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(and_ii_sptr self, int multiple)"""
        return _blocks_swig8.and_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(and_ii_sptr self) -> int"""
        return _blocks_swig8.and_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(and_ii_sptr self) -> double"""
        return _blocks_swig8.and_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(and_ii_sptr self) -> uint64_t"""
        return _blocks_swig8.and_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(and_ii_sptr self) -> uint64_t"""
        return _blocks_swig8.and_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(and_ii_sptr self) -> bool"""
        return _blocks_swig8.and_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(and_ii_sptr self) -> bool"""
        return _blocks_swig8.and_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(and_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.and_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(and_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.and_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(and_ii_sptr self, std::string level)"""
        return _blocks_swig8.and_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(and_ii_sptr self) -> std::string"""
        return _blocks_swig8.and_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(and_ii_sptr self) -> int"""
        return _blocks_swig8.and_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(and_ii_sptr self, int m)"""
        return _blocks_swig8.and_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(and_ii_sptr self)"""
        return _blocks_swig8.and_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(and_ii_sptr self) -> bool"""
        return _blocks_swig8.and_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(and_ii_sptr self, int m)"""
        return _blocks_swig8.and_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(and_ii_sptr self) -> int"""
        return _blocks_swig8.and_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(and_ii_sptr self, int i) -> long"""
        return _blocks_swig8.and_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(and_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(and_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.and_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(and_ii_sptr self, int i) -> long"""
        return _blocks_swig8.and_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(and_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(and_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.and_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(and_ii_sptr self, int which) -> float
        pc_input_buffers_full(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(and_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(and_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(and_ii_sptr self, int which) -> float
        pc_output_buffers_full(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(and_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(and_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(and_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.and_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(and_ii_sptr self)"""
        return _blocks_swig8.and_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(and_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.and_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(and_ii_sptr self) -> int"""
        return _blocks_swig8.and_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(and_ii_sptr self) -> int"""
        return _blocks_swig8.and_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(and_ii_sptr self, int priority) -> int"""
        return _blocks_swig8.and_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(and_ii_sptr self) -> std::string"""
        return _blocks_swig8.and_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(and_ii_sptr self) -> std::string"""
        return _blocks_swig8.and_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(and_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.and_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(and_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.and_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(and_ii_sptr self) -> long"""
        return _blocks_swig8.and_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(and_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.and_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(and_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.and_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(and_ii_sptr self) -> std::string"""
        return _blocks_swig8.and_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(and_ii_sptr self, std::string name)"""
        return _blocks_swig8.and_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(and_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig8.and_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(and_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.and_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(and_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig8.and_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(and_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig8.and_ii_sptr_message_subscribers(self, which_port)

# Register and_ii_sptr in _blocks_swig8:
_blocks_swig8.and_ii_sptr_swigregister(and_ii_sptr)


and_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_ii = and_ii.make



