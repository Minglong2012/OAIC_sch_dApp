# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _blocks_swig3
else:
    import _blocks_swig3

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def high_res_timer_now() -> "gr::high_res_timer_type":
    r"""high_res_timer_now() -> gr::high_res_timer_type"""
    return _blocks_swig3.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    r"""high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _blocks_swig3.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    r"""high_res_timer_tps() -> gr::high_res_timer_type"""
    return _blocks_swig3.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    r"""high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _blocks_swig3.high_res_timer_epoch()
class multiply_conjugate_cc(object):
    r"""
    Multiplies stream 0 by the complex conjugate of stream 1.

    Constructor Specific Documentation:

    Multiplies a streams by the conjugate of a second stream.

    Args:
        vlen : Vector length
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::multiply_conjugate_cc::sptr":
        r"""
        make(size_t vlen=1) -> multiply_conjugate_cc_sptr
        Multiplies stream 0 by the complex conjugate of stream 1.

        Constructor Specific Documentation:

        Multiplies a streams by the conjugate of a second stream.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_conjugate_cc_make(vlen)
    __swig_destroy__ = _blocks_swig3.delete_multiply_conjugate_cc

# Register multiply_conjugate_cc in _blocks_swig3:
_blocks_swig3.multiply_conjugate_cc_swigregister(multiply_conjugate_cc)

def multiply_conjugate_cc_make(vlen: "size_t"=1) -> "gr::blocks::multiply_conjugate_cc::sptr":
    r"""
    multiply_conjugate_cc_make(size_t vlen=1) -> multiply_conjugate_cc_sptr
    Multiplies stream 0 by the complex conjugate of stream 1.

    Constructor Specific Documentation:

    Multiplies a streams by the conjugate of a second stream.

    Args:
        vlen : Vector length
    """
    return _blocks_swig3.multiply_conjugate_cc_make(vlen)

class multiply_by_tag_value_cc(object):
    r"""
    output = input * complex constant

    The complex constant used by this block is found from a tag with the name specified by . The tag must contain a float/double or complex PMT value that will be converted into a gr_complex value. All input data is multiplied by this value until a new tag with an update value is found. The block starts with a value of '1.0' for the multiplier constant.

    Constructor Specific Documentation:

    Create an instance of multiply_by_tag_value_cc.

    Args:
        tag_name : Tag's key that it will use to get the multiplicative constant.
        vlen : Vector length of incoming stream
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(tag_name: "std::string const &", vlen: "size_t"=1) -> "gr::blocks::multiply_by_tag_value_cc::sptr":
        r"""
        make(std::string const & tag_name, size_t vlen=1) -> multiply_by_tag_value_cc_sptr
        output = input * complex constant

        The complex constant used by this block is found from a tag with the name specified by . The tag must contain a float/double or complex PMT value that will be converted into a gr_complex value. All input data is multiplied by this value until a new tag with an update value is found. The block starts with a value of '1.0' for the multiplier constant.

        Constructor Specific Documentation:

        Create an instance of multiply_by_tag_value_cc.

        Args:
            tag_name : Tag's key that it will use to get the multiplicative constant.
            vlen : Vector length of incoming stream
        """
        return _blocks_swig3.multiply_by_tag_value_cc_make(tag_name, vlen)

    def k(self) -> "gr_complex":
        r"""
        k(multiply_by_tag_value_cc self) -> gr_complex
        Get the current multiplicative constant. This block does not allow external setters.
        """
        return _blocks_swig3.multiply_by_tag_value_cc_k(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_by_tag_value_cc

# Register multiply_by_tag_value_cc in _blocks_swig3:
_blocks_swig3.multiply_by_tag_value_cc_swigregister(multiply_by_tag_value_cc)

def multiply_by_tag_value_cc_make(tag_name: "std::string const &", vlen: "size_t"=1) -> "gr::blocks::multiply_by_tag_value_cc::sptr":
    r"""
    multiply_by_tag_value_cc_make(std::string const & tag_name, size_t vlen=1) -> multiply_by_tag_value_cc_sptr
    output = input * complex constant

    The complex constant used by this block is found from a tag with the name specified by . The tag must contain a float/double or complex PMT value that will be converted into a gr_complex value. All input data is multiplied by this value until a new tag with an update value is found. The block starts with a value of '1.0' for the multiplier constant.

    Constructor Specific Documentation:

    Create an instance of multiply_by_tag_value_cc.

    Args:
        tag_name : Tag's key that it will use to get the multiplicative constant.
        vlen : Vector length of incoming stream
    """
    return _blocks_swig3.multiply_by_tag_value_cc_make(tag_name, vlen)

class multiply_ss(object):
    r"""
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::multiply< short >::sptr":
        r"""
        make(size_t vlen=1) -> multiply_ss_sptr
        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ss_make(vlen)
    __swig_destroy__ = _blocks_swig3.delete_multiply_ss

# Register multiply_ss in _blocks_swig3:
_blocks_swig3.multiply_ss_swigregister(multiply_ss)

def multiply_ss_make(vlen: "size_t"=1) -> "gr::blocks::multiply< short >::sptr":
    r"""
    multiply_ss_make(size_t vlen=1) -> multiply_ss_sptr
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig3.multiply_ss_make(vlen)

class multiply_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_ss_sptr self) -> multiply_ss_sptr
        __init__(multiply_ss_sptr self, multiply_ss p) -> multiply_ss_sptr
        """
        _blocks_swig3.multiply_ss_sptr_swiginit(self, _blocks_swig3.new_multiply_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply< std::int16_t > *":
        r"""__deref__(multiply_ss_sptr self) -> multiply_ss"""
        return _blocks_swig3.multiply_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_ss_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::multiply< short >::sptr":
        r"""
        make(multiply_ss_sptr self, size_t vlen=1) -> multiply_ss_sptr
        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ss_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(multiply_ss_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_ss_sptr self, int which, int delay)
        declare_sample_delay(multiply_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_ss_sptr self, int multiple)"""
        return _blocks_swig3.multiply_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_ss_sptr self) -> double"""
        return _blocks_swig3.multiply_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_ss_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_ss_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_ss_sptr self, std::string level)"""
        return _blocks_swig3.multiply_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_ss_sptr self, int m)"""
        return _blocks_swig3.multiply_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_ss_sptr self)"""
        return _blocks_swig3.multiply_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_ss_sptr self, int m)"""
        return _blocks_swig3.multiply_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_ss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_ss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_ss_sptr self, int which) -> float
        pc_input_buffers_full(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_ss_sptr self, int which) -> float
        pc_output_buffers_full(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_ss_sptr self)"""
        return _blocks_swig3.multiply_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_ss_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_ss_sptr self) -> long"""
        return _blocks_swig3.multiply_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_ss_sptr self, std::string name)"""
        return _blocks_swig3.multiply_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_ss_sptr_message_subscribers(self, which_port)

# Register multiply_ss_sptr in _blocks_swig3:
_blocks_swig3.multiply_ss_sptr_swigregister(multiply_ss_sptr)


multiply_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_ss = multiply_ss.make

class multiply_ii(object):
    r"""
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::multiply< int >::sptr":
        r"""
        make(size_t vlen=1) -> multiply_ii_sptr
        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ii_make(vlen)
    __swig_destroy__ = _blocks_swig3.delete_multiply_ii

# Register multiply_ii in _blocks_swig3:
_blocks_swig3.multiply_ii_swigregister(multiply_ii)

def multiply_ii_make(vlen: "size_t"=1) -> "gr::blocks::multiply< int >::sptr":
    r"""
    multiply_ii_make(size_t vlen=1) -> multiply_ii_sptr
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig3.multiply_ii_make(vlen)

class multiply_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_ii_sptr self) -> multiply_ii_sptr
        __init__(multiply_ii_sptr self, multiply_ii p) -> multiply_ii_sptr
        """
        _blocks_swig3.multiply_ii_sptr_swiginit(self, _blocks_swig3.new_multiply_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply< std::int32_t > *":
        r"""__deref__(multiply_ii_sptr self) -> multiply_ii"""
        return _blocks_swig3.multiply_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_ii_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::multiply< int >::sptr":
        r"""
        make(multiply_ii_sptr self, size_t vlen=1) -> multiply_ii_sptr
        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ii_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(multiply_ii_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_ii_sptr self, int which, int delay)
        declare_sample_delay(multiply_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_ii_sptr self, int multiple)"""
        return _blocks_swig3.multiply_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_ii_sptr self) -> double"""
        return _blocks_swig3.multiply_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_ii_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_ii_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_ii_sptr self, std::string level)"""
        return _blocks_swig3.multiply_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_ii_sptr self, int m)"""
        return _blocks_swig3.multiply_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_ii_sptr self)"""
        return _blocks_swig3.multiply_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_ii_sptr self, int m)"""
        return _blocks_swig3.multiply_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_ii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_ii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_ii_sptr self, int which) -> float
        pc_input_buffers_full(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_ii_sptr self, int which) -> float
        pc_output_buffers_full(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_ii_sptr self)"""
        return _blocks_swig3.multiply_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_ii_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_ii_sptr self) -> long"""
        return _blocks_swig3.multiply_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_ii_sptr self, std::string name)"""
        return _blocks_swig3.multiply_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_ii_sptr_message_subscribers(self, which_port)

# Register multiply_ii_sptr in _blocks_swig3:
_blocks_swig3.multiply_ii_sptr_swigregister(multiply_ii_sptr)


multiply_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_ii = multiply_ii.make

class multiply_ff(object):
    r"""
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::multiply< float >::sptr":
        r"""
        make(size_t vlen=1) -> multiply_ff_sptr
        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ff_make(vlen)
    __swig_destroy__ = _blocks_swig3.delete_multiply_ff

# Register multiply_ff in _blocks_swig3:
_blocks_swig3.multiply_ff_swigregister(multiply_ff)

def multiply_ff_make(vlen: "size_t"=1) -> "gr::blocks::multiply< float >::sptr":
    r"""
    multiply_ff_make(size_t vlen=1) -> multiply_ff_sptr
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig3.multiply_ff_make(vlen)

class multiply_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_ff_sptr self) -> multiply_ff_sptr
        __init__(multiply_ff_sptr self, multiply_ff p) -> multiply_ff_sptr
        """
        _blocks_swig3.multiply_ff_sptr_swiginit(self, _blocks_swig3.new_multiply_ff_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply< float > *":
        r"""__deref__(multiply_ff_sptr self) -> multiply_ff"""
        return _blocks_swig3.multiply_ff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_ff_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::multiply< float >::sptr":
        r"""
        make(multiply_ff_sptr self, size_t vlen=1) -> multiply_ff_sptr
        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ff_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(multiply_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_ff_sptr self, int which, int delay)
        declare_sample_delay(multiply_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_ff_sptr self, int multiple)"""
        return _blocks_swig3.multiply_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_ff_sptr self) -> double"""
        return _blocks_swig3.multiply_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_ff_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_ff_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_ff_sptr self, std::string level)"""
        return _blocks_swig3.multiply_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_ff_sptr self)"""
        return _blocks_swig3.multiply_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_ff_sptr self, int which) -> float
        pc_input_buffers_full(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_ff_sptr self, int which) -> float
        pc_output_buffers_full(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_ff_sptr self)"""
        return _blocks_swig3.multiply_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_ff_sptr self) -> long"""
        return _blocks_swig3.multiply_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_ff_sptr self, std::string name)"""
        return _blocks_swig3.multiply_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_ff_sptr_message_subscribers(self, which_port)

# Register multiply_ff_sptr in _blocks_swig3:
_blocks_swig3.multiply_ff_sptr_swigregister(multiply_ff_sptr)


multiply_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_ff = multiply_ff.make

class multiply_cc(object):
    r"""
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::multiply< std::complex< float > >::sptr":
        r"""
        make(size_t vlen=1) -> multiply_cc_sptr
        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_cc_make(vlen)
    __swig_destroy__ = _blocks_swig3.delete_multiply_cc

# Register multiply_cc in _blocks_swig3:
_blocks_swig3.multiply_cc_swigregister(multiply_cc)

def multiply_cc_make(vlen: "size_t"=1) -> "gr::blocks::multiply< std::complex< float > >::sptr":
    r"""
    multiply_cc_make(size_t vlen=1) -> multiply_cc_sptr
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig3.multiply_cc_make(vlen)

class multiply_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply< gr_complex > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_cc_sptr self) -> multiply_cc_sptr
        __init__(multiply_cc_sptr self, multiply_cc p) -> multiply_cc_sptr
        """
        _blocks_swig3.multiply_cc_sptr_swiginit(self, _blocks_swig3.new_multiply_cc_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply< gr_complex > *":
        r"""__deref__(multiply_cc_sptr self) -> multiply_cc"""
        return _blocks_swig3.multiply_cc_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_cc_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::multiply< std::complex< float > >::sptr":
        r"""
        make(multiply_cc_sptr self, size_t vlen=1) -> multiply_cc_sptr
        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_cc_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(multiply_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_cc_sptr self, int multiple)"""
        return _blocks_swig3.multiply_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_cc_sptr self) -> double"""
        return _blocks_swig3.multiply_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_cc_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_cc_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_cc_sptr self, std::string level)"""
        return _blocks_swig3.multiply_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_cc_sptr self)"""
        return _blocks_swig3.multiply_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_cc_sptr self)"""
        return _blocks_swig3.multiply_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_cc_sptr self) -> long"""
        return _blocks_swig3.multiply_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_cc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_cc_sptr_message_subscribers(self, which_port)

# Register multiply_cc_sptr in _blocks_swig3:
_blocks_swig3.multiply_cc_sptr_swigregister(multiply_cc_sptr)


multiply_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_cc = multiply_cc.make

class multiply_conjugate_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply_conjugate_cc > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_conjugate_cc_sptr self) -> multiply_conjugate_cc_sptr
        __init__(multiply_conjugate_cc_sptr self, multiply_conjugate_cc p) -> multiply_conjugate_cc_sptr
        """
        _blocks_swig3.multiply_conjugate_cc_sptr_swiginit(self, _blocks_swig3.new_multiply_conjugate_cc_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply_conjugate_cc *":
        r"""__deref__(multiply_conjugate_cc_sptr self) -> multiply_conjugate_cc"""
        return _blocks_swig3.multiply_conjugate_cc_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_conjugate_cc_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::multiply_conjugate_cc::sptr":
        r"""
        make(multiply_conjugate_cc_sptr self, size_t vlen=1) -> multiply_conjugate_cc_sptr
        Multiplies stream 0 by the complex conjugate of stream 1.

        Constructor Specific Documentation:

        Multiplies a streams by the conjugate of a second stream.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(multiply_conjugate_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_conjugate_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_conjugate_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_conjugate_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_conjugate_cc_sptr self, int multiple)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_conjugate_cc_sptr self) -> double"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_conjugate_cc_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_conjugate_cc_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_conjugate_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_conjugate_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_conjugate_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_conjugate_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_conjugate_cc_sptr self, std::string level)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_conjugate_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_conjugate_cc_sptr self)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_conjugate_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_conjugate_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_conjugate_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_conjugate_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_conjugate_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_conjugate_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_conjugate_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_conjugate_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_conjugate_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_conjugate_cc_sptr self)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_conjugate_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_conjugate_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_conjugate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_conjugate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_conjugate_cc_sptr self) -> long"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_conjugate_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_conjugate_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_conjugate_cc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_conjugate_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_conjugate_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_conjugate_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_conjugate_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_message_subscribers(self, which_port)

# Register multiply_conjugate_cc_sptr in _blocks_swig3:
_blocks_swig3.multiply_conjugate_cc_sptr_swigregister(multiply_conjugate_cc_sptr)


multiply_conjugate_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_conjugate_cc = multiply_conjugate_cc.make;

class multiply_const_ss(object):
    r"""
    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const.

    Args:
        k : multiplicative constant
        vlen : number of items in vector
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "std::int16_t", vlen: "size_t"=1) -> "gr::blocks::multiply_const< short >::sptr":
        r"""
        make(std::int16_t k, size_t vlen=1) -> multiply_const_ss_sptr
        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const.

        Args:
            k : multiplicative constant
            vlen : number of items in vector
        """
        return _blocks_swig3.multiply_const_ss_make(k, vlen)

    def k(self) -> "std::int16_t":
        r"""
        k(multiply_const_ss self) -> std::int16_t
        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ss_k(self)

    def set_k(self, k: "std::int16_t") -> "void":
        r"""
        set_k(multiply_const_ss self, std::int16_t k)
        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ss_set_k(self, k)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ss

# Register multiply_const_ss in _blocks_swig3:
_blocks_swig3.multiply_const_ss_swigregister(multiply_const_ss)

def multiply_const_ss_make(k: "std::int16_t", vlen: "size_t"=1) -> "gr::blocks::multiply_const< short >::sptr":
    r"""
    multiply_const_ss_make(std::int16_t k, size_t vlen=1) -> multiply_const_ss_sptr
    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const.

    Args:
        k : multiplicative constant
        vlen : number of items in vector
    """
    return _blocks_swig3.multiply_const_ss_make(k, vlen)

class multiply_const_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply_const< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_const_ss_sptr self) -> multiply_const_ss_sptr
        __init__(multiply_const_ss_sptr self, multiply_const_ss p) -> multiply_const_ss_sptr
        """
        _blocks_swig3.multiply_const_ss_sptr_swiginit(self, _blocks_swig3.new_multiply_const_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply_const< std::int16_t > *":
        r"""__deref__(multiply_const_ss_sptr self) -> multiply_const_ss"""
        return _blocks_swig3.multiply_const_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ss_sptr

    def make(self, k: "std::int16_t", vlen: "size_t"=1) -> "gr::blocks::multiply_const< short >::sptr":
        r"""
        make(multiply_const_ss_sptr self, std::int16_t k, size_t vlen=1) -> multiply_const_ss_sptr
        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const.

        Args:
            k : multiplicative constant
            vlen : number of items in vector
        """
        return _blocks_swig3.multiply_const_ss_sptr_make(self, k, vlen)

    def k(self) -> "std::int16_t":
        r"""
        k(multiply_const_ss_sptr self) -> std::int16_t
        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ss_sptr_k(self)

    def set_k(self, k: "std::int16_t") -> "void":
        r"""
        set_k(multiply_const_ss_sptr self, std::int16_t k)
        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ss_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(multiply_const_ss_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_const_ss_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_const_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_const_ss_sptr self, int multiple)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_const_ss_sptr self) -> double"""
        return _blocks_swig3.multiply_const_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_const_ss_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_const_ss_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_const_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_const_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_const_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_const_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_const_ss_sptr self, std::string level)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_const_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_const_ss_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_const_ss_sptr self)"""
        return _blocks_swig3.multiply_const_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_const_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_const_ss_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_const_ss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_const_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_const_ss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_const_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_const_ss_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_const_ss_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_const_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_const_ss_sptr self)"""
        return _blocks_swig3.multiply_const_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_const_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_const_ss_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_const_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_const_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_const_ss_sptr self) -> long"""
        return _blocks_swig3.multiply_const_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_const_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_const_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_const_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_const_ss_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_const_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_const_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_const_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_const_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_const_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_ss_sptr_message_subscribers(self, which_port)

# Register multiply_const_ss_sptr in _blocks_swig3:
_blocks_swig3.multiply_const_ss_sptr_swigregister(multiply_const_ss_sptr)


multiply_const_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_ss = multiply_const_ss.make

class multiply_const_ii(object):
    r"""
    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const.

    Args:
        k : multiplicative constant
        vlen : number of items in vector
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "std::int32_t", vlen: "size_t"=1) -> "gr::blocks::multiply_const< int >::sptr":
        r"""
        make(std::int32_t k, size_t vlen=1) -> multiply_const_ii_sptr
        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const.

        Args:
            k : multiplicative constant
            vlen : number of items in vector
        """
        return _blocks_swig3.multiply_const_ii_make(k, vlen)

    def k(self) -> "std::int32_t":
        r"""
        k(multiply_const_ii self) -> std::int32_t
        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ii_k(self)

    def set_k(self, k: "std::int32_t") -> "void":
        r"""
        set_k(multiply_const_ii self, std::int32_t k)
        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ii_set_k(self, k)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ii

# Register multiply_const_ii in _blocks_swig3:
_blocks_swig3.multiply_const_ii_swigregister(multiply_const_ii)

def multiply_const_ii_make(k: "std::int32_t", vlen: "size_t"=1) -> "gr::blocks::multiply_const< int >::sptr":
    r"""
    multiply_const_ii_make(std::int32_t k, size_t vlen=1) -> multiply_const_ii_sptr
    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const.

    Args:
        k : multiplicative constant
        vlen : number of items in vector
    """
    return _blocks_swig3.multiply_const_ii_make(k, vlen)

class multiply_const_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply_const< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_const_ii_sptr self) -> multiply_const_ii_sptr
        __init__(multiply_const_ii_sptr self, multiply_const_ii p) -> multiply_const_ii_sptr
        """
        _blocks_swig3.multiply_const_ii_sptr_swiginit(self, _blocks_swig3.new_multiply_const_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply_const< std::int32_t > *":
        r"""__deref__(multiply_const_ii_sptr self) -> multiply_const_ii"""
        return _blocks_swig3.multiply_const_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ii_sptr

    def make(self, k: "std::int32_t", vlen: "size_t"=1) -> "gr::blocks::multiply_const< int >::sptr":
        r"""
        make(multiply_const_ii_sptr self, std::int32_t k, size_t vlen=1) -> multiply_const_ii_sptr
        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const.

        Args:
            k : multiplicative constant
            vlen : number of items in vector
        """
        return _blocks_swig3.multiply_const_ii_sptr_make(self, k, vlen)

    def k(self) -> "std::int32_t":
        r"""
        k(multiply_const_ii_sptr self) -> std::int32_t
        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ii_sptr_k(self)

    def set_k(self, k: "std::int32_t") -> "void":
        r"""
        set_k(multiply_const_ii_sptr self, std::int32_t k)
        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ii_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(multiply_const_ii_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_const_ii_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_const_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_const_ii_sptr self, int multiple)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_const_ii_sptr self) -> double"""
        return _blocks_swig3.multiply_const_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_const_ii_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_const_ii_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_const_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_const_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_const_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_const_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_const_ii_sptr self, std::string level)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_const_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_const_ii_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_const_ii_sptr self)"""
        return _blocks_swig3.multiply_const_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_const_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_const_ii_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_const_ii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_const_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_const_ii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_const_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_const_ii_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_const_ii_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_const_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_const_ii_sptr self)"""
        return _blocks_swig3.multiply_const_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_const_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_const_ii_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_const_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_const_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_const_ii_sptr self) -> long"""
        return _blocks_swig3.multiply_const_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_const_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_const_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_const_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_const_ii_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_const_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_const_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_const_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_const_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_const_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_ii_sptr_message_subscribers(self, which_port)

# Register multiply_const_ii_sptr in _blocks_swig3:
_blocks_swig3.multiply_const_ii_sptr_swigregister(multiply_const_ii_sptr)


multiply_const_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_ii = multiply_const_ii.make

class multiply_const_ff(object):
    r"""
    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const.

    Args:
        k : multiplicative constant
        vlen : number of items in vector
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "float", vlen: "size_t"=1) -> "gr::blocks::multiply_const< float >::sptr":
        r"""
        make(float k, size_t vlen=1) -> multiply_const_ff_sptr
        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const.

        Args:
            k : multiplicative constant
            vlen : number of items in vector
        """
        return _blocks_swig3.multiply_const_ff_make(k, vlen)

    def k(self) -> "float":
        r"""
        k(multiply_const_ff self) -> float
        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ff_k(self)

    def set_k(self, k: "float") -> "void":
        r"""
        set_k(multiply_const_ff self, float k)
        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ff_set_k(self, k)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ff

# Register multiply_const_ff in _blocks_swig3:
_blocks_swig3.multiply_const_ff_swigregister(multiply_const_ff)

def multiply_const_ff_make(k: "float", vlen: "size_t"=1) -> "gr::blocks::multiply_const< float >::sptr":
    r"""
    multiply_const_ff_make(float k, size_t vlen=1) -> multiply_const_ff_sptr
    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const.

    Args:
        k : multiplicative constant
        vlen : number of items in vector
    """
    return _blocks_swig3.multiply_const_ff_make(k, vlen)

class multiply_const_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply_const< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_const_ff_sptr self) -> multiply_const_ff_sptr
        __init__(multiply_const_ff_sptr self, multiply_const_ff p) -> multiply_const_ff_sptr
        """
        _blocks_swig3.multiply_const_ff_sptr_swiginit(self, _blocks_swig3.new_multiply_const_ff_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply_const< float > *":
        r"""__deref__(multiply_const_ff_sptr self) -> multiply_const_ff"""
        return _blocks_swig3.multiply_const_ff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ff_sptr

    def make(self, k: "float", vlen: "size_t"=1) -> "gr::blocks::multiply_const< float >::sptr":
        r"""
        make(multiply_const_ff_sptr self, float k, size_t vlen=1) -> multiply_const_ff_sptr
        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const.

        Args:
            k : multiplicative constant
            vlen : number of items in vector
        """
        return _blocks_swig3.multiply_const_ff_sptr_make(self, k, vlen)

    def k(self) -> "float":
        r"""
        k(multiply_const_ff_sptr self) -> float
        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ff_sptr_k(self)

    def set_k(self, k: "float") -> "void":
        r"""
        set_k(multiply_const_ff_sptr self, float k)
        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ff_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(multiply_const_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_const_ff_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_const_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_const_ff_sptr self, int multiple)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_const_ff_sptr self) -> double"""
        return _blocks_swig3.multiply_const_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_const_ff_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_const_ff_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_const_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_const_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_const_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_const_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_const_ff_sptr self, std::string level)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_const_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_const_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_const_ff_sptr self)"""
        return _blocks_swig3.multiply_const_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_const_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_const_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_const_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_const_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_const_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_const_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_const_ff_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_const_ff_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_const_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_const_ff_sptr self)"""
        return _blocks_swig3.multiply_const_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_const_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_const_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_const_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_const_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_const_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_const_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_const_ff_sptr self) -> long"""
        return _blocks_swig3.multiply_const_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_const_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_const_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_const_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_const_ff_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_const_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_const_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_const_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_const_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_const_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_ff_sptr_message_subscribers(self, which_port)

# Register multiply_const_ff_sptr in _blocks_swig3:
_blocks_swig3.multiply_const_ff_sptr_swigregister(multiply_const_ff_sptr)


multiply_const_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_ff = multiply_const_ff.make

class multiply_const_cc(object):
    r"""
    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const.

    Args:
        k : multiplicative constant
        vlen : number of items in vector
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "std::complex< float >", vlen: "size_t"=1) -> "gr::blocks::multiply_const< std::complex< float > >::sptr":
        r"""
        make(std::complex< float > k, size_t vlen=1) -> multiply_const_cc_sptr
        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const.

        Args:
            k : multiplicative constant
            vlen : number of items in vector
        """
        return _blocks_swig3.multiply_const_cc_make(k, vlen)

    def k(self) -> "std::complex< float >":
        r"""
        k(multiply_const_cc self) -> std::complex< float >
        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_cc_k(self)

    def set_k(self, k: "std::complex< float >") -> "void":
        r"""
        set_k(multiply_const_cc self, std::complex< float > k)
        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_cc_set_k(self, k)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_cc

# Register multiply_const_cc in _blocks_swig3:
_blocks_swig3.multiply_const_cc_swigregister(multiply_const_cc)

def multiply_const_cc_make(k: "std::complex< float >", vlen: "size_t"=1) -> "gr::blocks::multiply_const< std::complex< float > >::sptr":
    r"""
    multiply_const_cc_make(std::complex< float > k, size_t vlen=1) -> multiply_const_cc_sptr
    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const.

    Args:
        k : multiplicative constant
        vlen : number of items in vector
    """
    return _blocks_swig3.multiply_const_cc_make(k, vlen)

class multiply_const_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply_const< gr_complex > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_const_cc_sptr self) -> multiply_const_cc_sptr
        __init__(multiply_const_cc_sptr self, multiply_const_cc p) -> multiply_const_cc_sptr
        """
        _blocks_swig3.multiply_const_cc_sptr_swiginit(self, _blocks_swig3.new_multiply_const_cc_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply_const< gr_complex > *":
        r"""__deref__(multiply_const_cc_sptr self) -> multiply_const_cc"""
        return _blocks_swig3.multiply_const_cc_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_cc_sptr

    def make(self, k: "std::complex< float >", vlen: "size_t"=1) -> "gr::blocks::multiply_const< std::complex< float > >::sptr":
        r"""
        make(multiply_const_cc_sptr self, std::complex< float > k, size_t vlen=1) -> multiply_const_cc_sptr
        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const.

        Args:
            k : multiplicative constant
            vlen : number of items in vector
        """
        return _blocks_swig3.multiply_const_cc_sptr_make(self, k, vlen)

    def k(self) -> "std::complex< float >":
        r"""
        k(multiply_const_cc_sptr self) -> std::complex< float >
        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_cc_sptr_k(self)

    def set_k(self, k: "std::complex< float >") -> "void":
        r"""
        set_k(multiply_const_cc_sptr self, std::complex< float > k)
        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_cc_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(multiply_const_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_const_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_const_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_const_cc_sptr self, int multiple)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_const_cc_sptr self) -> double"""
        return _blocks_swig3.multiply_const_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_const_cc_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_const_cc_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_const_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_const_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_const_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_const_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_const_cc_sptr self, std::string level)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_const_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_const_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_const_cc_sptr self)"""
        return _blocks_swig3.multiply_const_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_const_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_const_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_const_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_const_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_const_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_const_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_const_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_const_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_const_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_const_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_const_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_const_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_const_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_const_cc_sptr self)"""
        return _blocks_swig3.multiply_const_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_const_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_const_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_const_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_const_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_const_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_const_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_const_cc_sptr self) -> long"""
        return _blocks_swig3.multiply_const_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_const_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_const_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_const_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_const_cc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_const_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_const_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_const_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_const_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_const_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_cc_sptr_message_subscribers(self, which_port)

# Register multiply_const_cc_sptr in _blocks_swig3:
_blocks_swig3.multiply_const_cc_sptr_swigregister(multiply_const_cc_sptr)


multiply_const_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_cc = multiply_const_cc.make

class multiply_const_vss(object):
    r"""
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_v.

    Args:
        k : multiplicative constant vector
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "std::vector< std::int16_t,std::allocator< std::int16_t > >") -> "gr::blocks::multiply_const_v< short >::sptr":
        r"""
        make(std::vector< std::int16_t,std::allocator< std::int16_t > > k) -> multiply_const_vss_sptr
        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_v.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vss_make(k)

    def k(self) -> "std::vector< std::int16_t,std::allocator< std::int16_t > >":
        r"""
        k(multiply_const_vss self) -> std::vector< std::int16_t,std::allocator< std::int16_t > >
        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vss_k(self)

    def set_k(self, k: "std::vector< std::int16_t,std::allocator< std::int16_t > >") -> "void":
        r"""
        set_k(multiply_const_vss self, std::vector< std::int16_t,std::allocator< std::int16_t > > k)
        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vss_set_k(self, k)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vss

# Register multiply_const_vss in _blocks_swig3:
_blocks_swig3.multiply_const_vss_swigregister(multiply_const_vss)

def multiply_const_vss_make(k: "std::vector< std::int16_t,std::allocator< std::int16_t > >") -> "gr::blocks::multiply_const_v< short >::sptr":
    r"""
    multiply_const_vss_make(std::vector< std::int16_t,std::allocator< std::int16_t > > k) -> multiply_const_vss_sptr
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_v.

    Args:
        k : multiplicative constant vector
    """
    return _blocks_swig3.multiply_const_vss_make(k)

class multiply_const_vss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply_const_v< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_const_vss_sptr self) -> multiply_const_vss_sptr
        __init__(multiply_const_vss_sptr self, multiply_const_vss p) -> multiply_const_vss_sptr
        """
        _blocks_swig3.multiply_const_vss_sptr_swiginit(self, _blocks_swig3.new_multiply_const_vss_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply_const_v< std::int16_t > *":
        r"""__deref__(multiply_const_vss_sptr self) -> multiply_const_vss"""
        return _blocks_swig3.multiply_const_vss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vss_sptr

    def make(self, k: "std::vector< std::int16_t,std::allocator< std::int16_t > >") -> "gr::blocks::multiply_const_v< short >::sptr":
        r"""
        make(multiply_const_vss_sptr self, std::vector< std::int16_t,std::allocator< std::int16_t > > k) -> multiply_const_vss_sptr
        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_v.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vss_sptr_make(self, k)

    def k(self) -> "std::vector< std::int16_t,std::allocator< std::int16_t > >":
        r"""
        k(multiply_const_vss_sptr self) -> std::vector< std::int16_t,std::allocator< std::int16_t > >
        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vss_sptr_k(self)

    def set_k(self, k: "std::vector< std::int16_t,std::allocator< std::int16_t > >") -> "void":
        r"""
        set_k(multiply_const_vss_sptr self, std::vector< std::int16_t,std::allocator< std::int16_t > > k)
        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vss_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(multiply_const_vss_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_vss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_const_vss_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_vss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_vss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_const_vss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_vss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_const_vss_sptr self, int multiple)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_const_vss_sptr self) -> double"""
        return _blocks_swig3.multiply_const_vss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_const_vss_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_vss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_const_vss_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_vss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_const_vss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_const_vss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_const_vss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_vss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_const_vss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_vss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_const_vss_sptr self, std::string level)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_const_vss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_const_vss_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_const_vss_sptr self)"""
        return _blocks_swig3.multiply_const_vss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_const_vss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_const_vss_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_const_vss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_const_vss_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_vss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_vss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_const_vss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_const_vss_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_vss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_vss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_const_vss_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_const_vss_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_const_vss_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_const_vss_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_const_vss_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_const_vss_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_const_vss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_const_vss_sptr self)"""
        return _blocks_swig3.multiply_const_vss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_const_vss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_vss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_const_vss_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_const_vss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_const_vss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_const_vss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_const_vss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_const_vss_sptr self) -> long"""
        return _blocks_swig3.multiply_const_vss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_const_vss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_vss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_const_vss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_vss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_const_vss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_const_vss_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_const_vss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_const_vss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_const_vss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_vss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_const_vss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_vss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_const_vss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_vss_sptr_message_subscribers(self, which_port)

# Register multiply_const_vss_sptr in _blocks_swig3:
_blocks_swig3.multiply_const_vss_sptr_swigregister(multiply_const_vss_sptr)


multiply_const_vss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vss = multiply_const_vss.make

class multiply_const_vii(object):
    r"""
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_v.

    Args:
        k : multiplicative constant vector
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "std::vector< std::int32_t,std::allocator< std::int32_t > >") -> "gr::blocks::multiply_const_v< int >::sptr":
        r"""
        make(std::vector< std::int32_t,std::allocator< std::int32_t > > k) -> multiply_const_vii_sptr
        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_v.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vii_make(k)

    def k(self) -> "std::vector< std::int32_t,std::allocator< std::int32_t > >":
        r"""
        k(multiply_const_vii self) -> std::vector< std::int32_t,std::allocator< std::int32_t > >
        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vii_k(self)

    def set_k(self, k: "std::vector< std::int32_t,std::allocator< std::int32_t > >") -> "void":
        r"""
        set_k(multiply_const_vii self, std::vector< std::int32_t,std::allocator< std::int32_t > > k)
        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vii_set_k(self, k)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vii

# Register multiply_const_vii in _blocks_swig3:
_blocks_swig3.multiply_const_vii_swigregister(multiply_const_vii)

def multiply_const_vii_make(k: "std::vector< std::int32_t,std::allocator< std::int32_t > >") -> "gr::blocks::multiply_const_v< int >::sptr":
    r"""
    multiply_const_vii_make(std::vector< std::int32_t,std::allocator< std::int32_t > > k) -> multiply_const_vii_sptr
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_v.

    Args:
        k : multiplicative constant vector
    """
    return _blocks_swig3.multiply_const_vii_make(k)

class multiply_const_vii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply_const_v< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_const_vii_sptr self) -> multiply_const_vii_sptr
        __init__(multiply_const_vii_sptr self, multiply_const_vii p) -> multiply_const_vii_sptr
        """
        _blocks_swig3.multiply_const_vii_sptr_swiginit(self, _blocks_swig3.new_multiply_const_vii_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply_const_v< std::int32_t > *":
        r"""__deref__(multiply_const_vii_sptr self) -> multiply_const_vii"""
        return _blocks_swig3.multiply_const_vii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vii_sptr

    def make(self, k: "std::vector< std::int32_t,std::allocator< std::int32_t > >") -> "gr::blocks::multiply_const_v< int >::sptr":
        r"""
        make(multiply_const_vii_sptr self, std::vector< std::int32_t,std::allocator< std::int32_t > > k) -> multiply_const_vii_sptr
        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_v.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vii_sptr_make(self, k)

    def k(self) -> "std::vector< std::int32_t,std::allocator< std::int32_t > >":
        r"""
        k(multiply_const_vii_sptr self) -> std::vector< std::int32_t,std::allocator< std::int32_t > >
        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vii_sptr_k(self)

    def set_k(self, k: "std::vector< std::int32_t,std::allocator< std::int32_t > >") -> "void":
        r"""
        set_k(multiply_const_vii_sptr self, std::vector< std::int32_t,std::allocator< std::int32_t > > k)
        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vii_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(multiply_const_vii_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_vii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_const_vii_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_vii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_vii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_const_vii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_vii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_const_vii_sptr self, int multiple)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_const_vii_sptr self) -> double"""
        return _blocks_swig3.multiply_const_vii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_const_vii_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_vii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_const_vii_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_vii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_const_vii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_const_vii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_const_vii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_vii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_const_vii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_vii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_const_vii_sptr self, std::string level)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_const_vii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_const_vii_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_const_vii_sptr self)"""
        return _blocks_swig3.multiply_const_vii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_const_vii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_const_vii_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_const_vii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_const_vii_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_vii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_vii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_const_vii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_const_vii_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_vii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_vii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_const_vii_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_const_vii_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_const_vii_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_const_vii_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_const_vii_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_const_vii_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_const_vii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_const_vii_sptr self)"""
        return _blocks_swig3.multiply_const_vii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_const_vii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_vii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_const_vii_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_const_vii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_const_vii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_const_vii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_const_vii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_const_vii_sptr self) -> long"""
        return _blocks_swig3.multiply_const_vii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_const_vii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_vii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_const_vii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_vii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_const_vii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_const_vii_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_const_vii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_const_vii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_const_vii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_vii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_const_vii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_vii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_const_vii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_vii_sptr_message_subscribers(self, which_port)

# Register multiply_const_vii_sptr in _blocks_swig3:
_blocks_swig3.multiply_const_vii_sptr_swigregister(multiply_const_vii_sptr)


multiply_const_vii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vii = multiply_const_vii.make

class multiply_const_vff(object):
    r"""
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_v.

    Args:
        k : multiplicative constant vector
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "pmt_vector_float") -> "gr::blocks::multiply_const_v< float >::sptr":
        r"""
        make(pmt_vector_float k) -> multiply_const_vff_sptr
        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_v.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vff_make(k)

    def k(self) -> "std::vector< float,std::allocator< float > >":
        r"""
        k(multiply_const_vff self) -> pmt_vector_float
        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vff_k(self)

    def set_k(self, k: "pmt_vector_float") -> "void":
        r"""
        set_k(multiply_const_vff self, pmt_vector_float k)
        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vff_set_k(self, k)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vff

# Register multiply_const_vff in _blocks_swig3:
_blocks_swig3.multiply_const_vff_swigregister(multiply_const_vff)

def multiply_const_vff_make(k: "pmt_vector_float") -> "gr::blocks::multiply_const_v< float >::sptr":
    r"""
    multiply_const_vff_make(pmt_vector_float k) -> multiply_const_vff_sptr
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_v.

    Args:
        k : multiplicative constant vector
    """
    return _blocks_swig3.multiply_const_vff_make(k)

class multiply_const_vff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply_const_v< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_const_vff_sptr self) -> multiply_const_vff_sptr
        __init__(multiply_const_vff_sptr self, multiply_const_vff p) -> multiply_const_vff_sptr
        """
        _blocks_swig3.multiply_const_vff_sptr_swiginit(self, _blocks_swig3.new_multiply_const_vff_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply_const_v< float > *":
        r"""__deref__(multiply_const_vff_sptr self) -> multiply_const_vff"""
        return _blocks_swig3.multiply_const_vff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vff_sptr

    def make(self, k: "pmt_vector_float") -> "gr::blocks::multiply_const_v< float >::sptr":
        r"""
        make(multiply_const_vff_sptr self, pmt_vector_float k) -> multiply_const_vff_sptr
        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_v.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vff_sptr_make(self, k)

    def k(self) -> "std::vector< float,std::allocator< float > >":
        r"""
        k(multiply_const_vff_sptr self) -> pmt_vector_float
        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vff_sptr_k(self)

    def set_k(self, k: "pmt_vector_float") -> "void":
        r"""
        set_k(multiply_const_vff_sptr self, pmt_vector_float k)
        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vff_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(multiply_const_vff_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_vff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_const_vff_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_vff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_vff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_const_vff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_vff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_const_vff_sptr self, int multiple)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_const_vff_sptr self) -> double"""
        return _blocks_swig3.multiply_const_vff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_const_vff_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_vff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_const_vff_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_vff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_const_vff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_const_vff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_const_vff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_vff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_const_vff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_vff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_const_vff_sptr self, std::string level)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_const_vff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_const_vff_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_const_vff_sptr self)"""
        return _blocks_swig3.multiply_const_vff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_const_vff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_const_vff_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_const_vff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_const_vff_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_vff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_vff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_const_vff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_const_vff_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_vff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_vff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_const_vff_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_const_vff_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_const_vff_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_const_vff_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_const_vff_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_const_vff_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_const_vff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_const_vff_sptr self)"""
        return _blocks_swig3.multiply_const_vff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_const_vff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_vff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_const_vff_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_const_vff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_const_vff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_const_vff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_const_vff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_const_vff_sptr self) -> long"""
        return _blocks_swig3.multiply_const_vff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_const_vff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_vff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_const_vff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_vff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_const_vff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_const_vff_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_const_vff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_const_vff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_const_vff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_vff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_const_vff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_vff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_const_vff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_vff_sptr_message_subscribers(self, which_port)

# Register multiply_const_vff_sptr in _blocks_swig3:
_blocks_swig3.multiply_const_vff_sptr_swigregister(multiply_const_vff_sptr)


multiply_const_vff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vff = multiply_const_vff.make

class multiply_const_vcc(object):
    r"""
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_v.

    Args:
        k : multiplicative constant vector
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "pmt_vector_cfloat") -> "gr::blocks::multiply_const_v< std::complex< float > >::sptr":
        r"""
        make(pmt_vector_cfloat k) -> multiply_const_vcc_sptr
        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_v.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vcc_make(k)

    def k(self) -> "std::vector< std::complex< float >,std::allocator< std::complex< float > > >":
        r"""
        k(multiply_const_vcc self) -> pmt_vector_cfloat
        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vcc_k(self)

    def set_k(self, k: "pmt_vector_cfloat") -> "void":
        r"""
        set_k(multiply_const_vcc self, pmt_vector_cfloat k)
        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vcc_set_k(self, k)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vcc

# Register multiply_const_vcc in _blocks_swig3:
_blocks_swig3.multiply_const_vcc_swigregister(multiply_const_vcc)

def multiply_const_vcc_make(k: "pmt_vector_cfloat") -> "gr::blocks::multiply_const_v< std::complex< float > >::sptr":
    r"""
    multiply_const_vcc_make(pmt_vector_cfloat k) -> multiply_const_vcc_sptr
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_v.

    Args:
        k : multiplicative constant vector
    """
    return _blocks_swig3.multiply_const_vcc_make(k)

class multiply_const_vcc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply_const_v< gr_complex > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_const_vcc_sptr self) -> multiply_const_vcc_sptr
        __init__(multiply_const_vcc_sptr self, multiply_const_vcc p) -> multiply_const_vcc_sptr
        """
        _blocks_swig3.multiply_const_vcc_sptr_swiginit(self, _blocks_swig3.new_multiply_const_vcc_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply_const_v< gr_complex > *":
        r"""__deref__(multiply_const_vcc_sptr self) -> multiply_const_vcc"""
        return _blocks_swig3.multiply_const_vcc_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vcc_sptr

    def make(self, k: "pmt_vector_cfloat") -> "gr::blocks::multiply_const_v< std::complex< float > >::sptr":
        r"""
        make(multiply_const_vcc_sptr self, pmt_vector_cfloat k) -> multiply_const_vcc_sptr
        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_v.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vcc_sptr_make(self, k)

    def k(self) -> "std::vector< std::complex< float >,std::allocator< std::complex< float > > >":
        r"""
        k(multiply_const_vcc_sptr self) -> pmt_vector_cfloat
        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vcc_sptr_k(self)

    def set_k(self, k: "pmt_vector_cfloat") -> "void":
        r"""
        set_k(multiply_const_vcc_sptr self, pmt_vector_cfloat k)
        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vcc_sptr_set_k(self, k)

    def history(self) -> "unsigned int":
        r"""history(multiply_const_vcc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_vcc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_const_vcc_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_vcc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_vcc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_const_vcc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_vcc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_const_vcc_sptr self, int multiple)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_const_vcc_sptr self) -> double"""
        return _blocks_swig3.multiply_const_vcc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_const_vcc_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_vcc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_const_vcc_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_const_vcc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_const_vcc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vcc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_const_vcc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vcc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_const_vcc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_vcc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_const_vcc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_vcc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_const_vcc_sptr self, std::string level)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_const_vcc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vcc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_const_vcc_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_const_vcc_sptr self)"""
        return _blocks_swig3.multiply_const_vcc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_const_vcc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vcc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_const_vcc_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_const_vcc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vcc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_const_vcc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_vcc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_vcc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_const_vcc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vcc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_const_vcc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_vcc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_vcc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_const_vcc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_const_vcc_sptr self)"""
        return _blocks_swig3.multiply_const_vcc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_const_vcc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_vcc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_const_vcc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_const_vcc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vcc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_const_vcc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vcc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_const_vcc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_const_vcc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_const_vcc_sptr self) -> long"""
        return _blocks_swig3.multiply_const_vcc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_const_vcc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_const_vcc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_vcc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_const_vcc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vcc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_const_vcc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_const_vcc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_const_vcc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_const_vcc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_const_vcc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_const_vcc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_message_subscribers(self, which_port)

# Register multiply_const_vcc_sptr in _blocks_swig3:
_blocks_swig3.multiply_const_vcc_sptr_swigregister(multiply_const_vcc_sptr)


multiply_const_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vcc = multiply_const_vcc.make

class multiply_matrix_cc(object):
    r"""
    Matrix multiplexer/multiplier: y(k) = A x(k)

    This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).


    Examples for where to use this block include:



    This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .



    Message Ports
    This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<T> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.


    : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

    Constructor Specific Documentation:



    Args:
        A : The matrix
        tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::blocks::multiply_matrix< std::complex< float > >::sptr":
        r"""
        make(gr_vector_vector_complexf A, gr::block::tag_propagation_policy_t tag_propagation_policy=gr::block::TPP_ALL_TO_ALL) -> multiply_matrix_cc_sptr
        Matrix multiplexer/multiplier: y(k) = A x(k)

        This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).


        Examples for where to use this block include:



        This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .



        Message Ports
        This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<T> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.


        : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

        Constructor Specific Documentation:



        Args:
            A : The matrix
            tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
        """
        return _blocks_swig3.multiply_matrix_cc_make(*args, **kwargs)

    def get_A(self) -> "std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > const &":
        r"""
        get_A(multiply_matrix_cc self) -> gr_vector_vector_complexf
        Returns the current matrix.
        """
        return _blocks_swig3.multiply_matrix_cc_get_A(self)

    def set_A(self, new_A: "gr_vector_vector_complexf") -> "bool":
        r"""
        set_A(multiply_matrix_cc self, gr_vector_vector_complexf new_A) -> bool
        Sets the matrix to a new value . Returns true if the new matrix was valid and could be changed.
        """
        return _blocks_swig3.multiply_matrix_cc_set_A(self, new_A)
    MSG_PORT_NAME_SET_A = property(_blocks_swig3.multiply_matrix_cc_MSG_PORT_NAME_SET_A_get, _blocks_swig3.multiply_matrix_cc_MSG_PORT_NAME_SET_A_set, doc=r"""MSG_PORT_NAME_SET_A : std::string""")
    __swig_destroy__ = _blocks_swig3.delete_multiply_matrix_cc

# Register multiply_matrix_cc in _blocks_swig3:
_blocks_swig3.multiply_matrix_cc_swigregister(multiply_matrix_cc)

def multiply_matrix_cc_make(*args, **kwargs) -> "gr::blocks::multiply_matrix< std::complex< float > >::sptr":
    r"""
    multiply_matrix_cc_make(gr_vector_vector_complexf A, gr::block::tag_propagation_policy_t tag_propagation_policy=gr::block::TPP_ALL_TO_ALL) -> multiply_matrix_cc_sptr
    Matrix multiplexer/multiplier: y(k) = A x(k)

    This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).


    Examples for where to use this block include:



    This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .



    Message Ports
    This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<T> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.


    : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

    Constructor Specific Documentation:



    Args:
        A : The matrix
        tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
    """
    return _blocks_swig3.multiply_matrix_cc_make(*args, **kwargs)

class multiply_matrix_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply_matrix< gr_complex > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_matrix_cc_sptr self) -> multiply_matrix_cc_sptr
        __init__(multiply_matrix_cc_sptr self, multiply_matrix_cc p) -> multiply_matrix_cc_sptr
        """
        _blocks_swig3.multiply_matrix_cc_sptr_swiginit(self, _blocks_swig3.new_multiply_matrix_cc_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply_matrix< gr_complex > *":
        r"""__deref__(multiply_matrix_cc_sptr self) -> multiply_matrix_cc"""
        return _blocks_swig3.multiply_matrix_cc_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_matrix_cc_sptr

    def make(self, *args, **kwargs) -> "gr::blocks::multiply_matrix< std::complex< float > >::sptr":
        r"""
        make(multiply_matrix_cc_sptr self, gr_vector_vector_complexf A, gr::block::tag_propagation_policy_t tag_propagation_policy=gr::block::TPP_ALL_TO_ALL) -> multiply_matrix_cc_sptr
        Matrix multiplexer/multiplier: y(k) = A x(k)

        This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).


        Examples for where to use this block include:



        This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .



        Message Ports
        This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<T> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.


        : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

        Constructor Specific Documentation:



        Args:
            A : The matrix
            tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_make(self, *args, **kwargs)

    def get_A(self) -> "std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > const &":
        r"""
        get_A(multiply_matrix_cc_sptr self) -> gr_vector_vector_complexf
        Returns the current matrix.
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_get_A(self)

    def set_A(self, new_A: "gr_vector_vector_complexf") -> "bool":
        r"""
        set_A(multiply_matrix_cc_sptr self, gr_vector_vector_complexf new_A) -> bool
        Sets the matrix to a new value . Returns true if the new matrix was valid and could be changed.
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_set_A(self, new_A)
    MSG_PORT_NAME_SET_A = property(_blocks_swig3.multiply_matrix_cc_sptr_MSG_PORT_NAME_SET_A_get, _blocks_swig3.multiply_matrix_cc_sptr_MSG_PORT_NAME_SET_A_set, doc=r"""MSG_PORT_NAME_SET_A : std::string""")

    def history(self) -> "unsigned int":
        r"""history(multiply_matrix_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_matrix_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_matrix_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_matrix_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_matrix_cc_sptr self, int multiple)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_matrix_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_matrix_cc_sptr self) -> double"""
        return _blocks_swig3.multiply_matrix_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_matrix_cc_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_matrix_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_matrix_cc_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_matrix_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_matrix_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_matrix_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_matrix_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_matrix_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_matrix_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_matrix_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_matrix_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_matrix_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_matrix_cc_sptr self, std::string level)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_matrix_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_matrix_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_matrix_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_matrix_cc_sptr self)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_matrix_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_matrix_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_matrix_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_matrix_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_matrix_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_matrix_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_matrix_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_matrix_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_matrix_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_matrix_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_matrix_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_matrix_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_matrix_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_matrix_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_matrix_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_matrix_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_matrix_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_matrix_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_matrix_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_matrix_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_matrix_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_matrix_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_matrix_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_matrix_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_matrix_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_matrix_cc_sptr self)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_matrix_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_matrix_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_matrix_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_matrix_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_matrix_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_matrix_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_matrix_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_matrix_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_matrix_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_matrix_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_matrix_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_matrix_cc_sptr self) -> long"""
        return _blocks_swig3.multiply_matrix_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_matrix_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_matrix_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_matrix_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_matrix_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_matrix_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_matrix_cc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_matrix_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_matrix_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_matrix_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_matrix_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_matrix_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_matrix_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_matrix_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_matrix_cc_sptr_message_subscribers(self, which_port)

# Register multiply_matrix_cc_sptr in _blocks_swig3:
_blocks_swig3.multiply_matrix_cc_sptr_swigregister(multiply_matrix_cc_sptr)


multiply_matrix_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_matrix_cc = multiply_matrix_cc.make

class multiply_matrix_ff(object):
    r"""
    Matrix multiplexer/multiplier: y(k) = A x(k)

    This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).


    Examples for where to use this block include:



    This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .



    Message Ports
    This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<T> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.


    : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

    Constructor Specific Documentation:



    Args:
        A : The matrix
        tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::blocks::multiply_matrix< float >::sptr":
        r"""
        make(std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > A, gr::block::tag_propagation_policy_t tag_propagation_policy=gr::block::TPP_ALL_TO_ALL) -> multiply_matrix_ff_sptr
        Matrix multiplexer/multiplier: y(k) = A x(k)

        This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).


        Examples for where to use this block include:



        This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .



        Message Ports
        This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<T> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.


        : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

        Constructor Specific Documentation:



        Args:
            A : The matrix
            tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
        """
        return _blocks_swig3.multiply_matrix_ff_make(*args, **kwargs)

    def get_A(self) -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &":
        r"""
        get_A(multiply_matrix_ff self) -> std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &
        Returns the current matrix.
        """
        return _blocks_swig3.multiply_matrix_ff_get_A(self)

    def set_A(self, new_A: "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &") -> "bool":
        r"""
        set_A(multiply_matrix_ff self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const & new_A) -> bool
        Sets the matrix to a new value . Returns true if the new matrix was valid and could be changed.
        """
        return _blocks_swig3.multiply_matrix_ff_set_A(self, new_A)
    MSG_PORT_NAME_SET_A = property(_blocks_swig3.multiply_matrix_ff_MSG_PORT_NAME_SET_A_get, _blocks_swig3.multiply_matrix_ff_MSG_PORT_NAME_SET_A_set, doc=r"""MSG_PORT_NAME_SET_A : std::string""")
    __swig_destroy__ = _blocks_swig3.delete_multiply_matrix_ff

# Register multiply_matrix_ff in _blocks_swig3:
_blocks_swig3.multiply_matrix_ff_swigregister(multiply_matrix_ff)

def multiply_matrix_ff_make(*args, **kwargs) -> "gr::blocks::multiply_matrix< float >::sptr":
    r"""
    multiply_matrix_ff_make(std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > A, gr::block::tag_propagation_policy_t tag_propagation_policy=gr::block::TPP_ALL_TO_ALL) -> multiply_matrix_ff_sptr
    Matrix multiplexer/multiplier: y(k) = A x(k)

    This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).


    Examples for where to use this block include:



    This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .



    Message Ports
    This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<T> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.


    : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

    Constructor Specific Documentation:



    Args:
        A : The matrix
        tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
    """
    return _blocks_swig3.multiply_matrix_ff_make(*args, **kwargs)

class multiply_matrix_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply_matrix< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_matrix_ff_sptr self) -> multiply_matrix_ff_sptr
        __init__(multiply_matrix_ff_sptr self, multiply_matrix_ff p) -> multiply_matrix_ff_sptr
        """
        _blocks_swig3.multiply_matrix_ff_sptr_swiginit(self, _blocks_swig3.new_multiply_matrix_ff_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply_matrix< float > *":
        r"""__deref__(multiply_matrix_ff_sptr self) -> multiply_matrix_ff"""
        return _blocks_swig3.multiply_matrix_ff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_matrix_ff_sptr

    def make(self, *args, **kwargs) -> "gr::blocks::multiply_matrix< float >::sptr":
        r"""
        make(multiply_matrix_ff_sptr self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > A, gr::block::tag_propagation_policy_t tag_propagation_policy=gr::block::TPP_ALL_TO_ALL) -> multiply_matrix_ff_sptr
        Matrix multiplexer/multiplier: y(k) = A x(k)

        This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).


        Examples for where to use this block include:



        This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .



        Message Ports
        This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<T> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.


        : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

        Constructor Specific Documentation:



        Args:
            A : The matrix
            tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_make(self, *args, **kwargs)

    def get_A(self) -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &":
        r"""
        get_A(multiply_matrix_ff_sptr self) -> std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &
        Returns the current matrix.
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_get_A(self)

    def set_A(self, new_A: "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &") -> "bool":
        r"""
        set_A(multiply_matrix_ff_sptr self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const & new_A) -> bool
        Sets the matrix to a new value . Returns true if the new matrix was valid and could be changed.
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_set_A(self, new_A)
    MSG_PORT_NAME_SET_A = property(_blocks_swig3.multiply_matrix_ff_sptr_MSG_PORT_NAME_SET_A_get, _blocks_swig3.multiply_matrix_ff_sptr_MSG_PORT_NAME_SET_A_set, doc=r"""MSG_PORT_NAME_SET_A : std::string""")

    def history(self) -> "unsigned int":
        r"""history(multiply_matrix_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_matrix_ff_sptr self, int which, int delay)
        declare_sample_delay(multiply_matrix_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_matrix_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_matrix_ff_sptr self, int multiple)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_matrix_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_matrix_ff_sptr self) -> double"""
        return _blocks_swig3.multiply_matrix_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_matrix_ff_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_matrix_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_matrix_ff_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_matrix_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_matrix_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_matrix_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_matrix_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_matrix_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_matrix_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_matrix_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_matrix_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_matrix_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_matrix_ff_sptr self, std::string level)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_matrix_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_matrix_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_matrix_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_matrix_ff_sptr self)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_matrix_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_matrix_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_matrix_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_matrix_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_matrix_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_matrix_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_matrix_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_matrix_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_matrix_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_matrix_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_matrix_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_matrix_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_matrix_ff_sptr self, int which) -> float
        pc_input_buffers_full(multiply_matrix_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_matrix_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_matrix_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_matrix_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_matrix_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_matrix_ff_sptr self, int which) -> float
        pc_output_buffers_full(multiply_matrix_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_matrix_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_matrix_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_matrix_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_matrix_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_matrix_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_matrix_ff_sptr self)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_matrix_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_matrix_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_matrix_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_matrix_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_matrix_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_matrix_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_matrix_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_matrix_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_matrix_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_matrix_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_matrix_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_matrix_ff_sptr self) -> long"""
        return _blocks_swig3.multiply_matrix_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_matrix_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_matrix_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_matrix_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_matrix_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_matrix_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_matrix_ff_sptr self, std::string name)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_matrix_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_matrix_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_matrix_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_matrix_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_matrix_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_matrix_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_matrix_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_matrix_ff_sptr_message_subscribers(self, which_port)

# Register multiply_matrix_ff_sptr in _blocks_swig3:
_blocks_swig3.multiply_matrix_ff_sptr_swigregister(multiply_matrix_ff_sptr)


multiply_matrix_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_matrix_ff = multiply_matrix_ff.make

class multiply_by_tag_value_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::multiply_by_tag_value_cc > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_by_tag_value_cc_sptr self) -> multiply_by_tag_value_cc_sptr
        __init__(multiply_by_tag_value_cc_sptr self, multiply_by_tag_value_cc p) -> multiply_by_tag_value_cc_sptr
        """
        _blocks_swig3.multiply_by_tag_value_cc_sptr_swiginit(self, _blocks_swig3.new_multiply_by_tag_value_cc_sptr(*args))

    def __deref__(self) -> "gr::blocks::multiply_by_tag_value_cc *":
        r"""__deref__(multiply_by_tag_value_cc_sptr self) -> multiply_by_tag_value_cc"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_multiply_by_tag_value_cc_sptr

    def make(self, tag_name: "std::string const &", vlen: "size_t"=1) -> "gr::blocks::multiply_by_tag_value_cc::sptr":
        r"""
        make(multiply_by_tag_value_cc_sptr self, std::string const & tag_name, size_t vlen=1) -> multiply_by_tag_value_cc_sptr
        output = input * complex constant

        The complex constant used by this block is found from a tag with the name specified by . The tag must contain a float/double or complex PMT value that will be converted into a gr_complex value. All input data is multiplied by this value until a new tag with an update value is found. The block starts with a value of '1.0' for the multiplier constant.

        Constructor Specific Documentation:

        Create an instance of multiply_by_tag_value_cc.

        Args:
            tag_name : Tag's key that it will use to get the multiplicative constant.
            vlen : Vector length of incoming stream
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_make(self, tag_name, vlen)

    def k(self) -> "gr_complex":
        r"""
        k(multiply_by_tag_value_cc_sptr self) -> gr_complex
        Get the current multiplicative constant. This block does not allow external setters.
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_k(self)

    def history(self) -> "unsigned int":
        r"""history(multiply_by_tag_value_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_by_tag_value_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_by_tag_value_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_by_tag_value_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_by_tag_value_cc_sptr self, int multiple)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_by_tag_value_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_by_tag_value_cc_sptr self) -> double"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_by_tag_value_cc_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_by_tag_value_cc_sptr self) -> uint64_t"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_by_tag_value_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_by_tag_value_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_by_tag_value_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_by_tag_value_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_by_tag_value_cc_sptr self, std::string level)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_by_tag_value_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_by_tag_value_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_by_tag_value_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_by_tag_value_cc_sptr self)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_by_tag_value_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_by_tag_value_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_by_tag_value_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_by_tag_value_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_by_tag_value_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_by_tag_value_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_by_tag_value_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_by_tag_value_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_by_tag_value_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_by_tag_value_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_by_tag_value_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_by_tag_value_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_by_tag_value_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_by_tag_value_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_by_tag_value_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_by_tag_value_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_by_tag_value_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_by_tag_value_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_by_tag_value_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_by_tag_value_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_by_tag_value_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_by_tag_value_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_by_tag_value_cc_sptr self)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_by_tag_value_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_by_tag_value_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_by_tag_value_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_by_tag_value_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_by_tag_value_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_by_tag_value_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_by_tag_value_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_by_tag_value_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_by_tag_value_cc_sptr self) -> long"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_by_tag_value_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_by_tag_value_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_by_tag_value_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_by_tag_value_cc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_by_tag_value_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_by_tag_value_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_by_tag_value_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_by_tag_value_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_message_subscribers(self, which_port)

# Register multiply_by_tag_value_cc_sptr in _blocks_swig3:
_blocks_swig3.multiply_by_tag_value_cc_sptr_swigregister(multiply_by_tag_value_cc_sptr)


multiply_by_tag_value_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_by_tag_value_cc = multiply_by_tag_value_cc.make;

class mute_ss(object):
    r"""
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(mute: "bool"=False) -> "gr::blocks::mute_blk< short >::sptr":
        r"""
        make(bool mute=False) -> mute_ss_sptr
        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ss_make(mute)

    def mute(self) -> "bool":
        r"""mute(mute_ss self) -> bool"""
        return _blocks_swig3.mute_ss_mute(self)

    def set_mute(self, mute: "bool"=False) -> "void":
        r"""set_mute(mute_ss self, bool mute=False)"""
        return _blocks_swig3.mute_ss_set_mute(self, mute)
    __swig_destroy__ = _blocks_swig3.delete_mute_ss

# Register mute_ss in _blocks_swig3:
_blocks_swig3.mute_ss_swigregister(mute_ss)

def mute_ss_make(mute: "bool"=False) -> "gr::blocks::mute_blk< short >::sptr":
    r"""
    mute_ss_make(bool mute=False) -> mute_ss_sptr
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
    return _blocks_swig3.mute_ss_make(mute)

class mute_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::mute_blk< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mute_ss_sptr self) -> mute_ss_sptr
        __init__(mute_ss_sptr self, mute_ss p) -> mute_ss_sptr
        """
        _blocks_swig3.mute_ss_sptr_swiginit(self, _blocks_swig3.new_mute_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::mute_blk< std::int16_t > *":
        r"""__deref__(mute_ss_sptr self) -> mute_ss"""
        return _blocks_swig3.mute_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_mute_ss_sptr

    def make(self, mute: "bool"=False) -> "gr::blocks::mute_blk< short >::sptr":
        r"""
        make(mute_ss_sptr self, bool mute=False) -> mute_ss_sptr
        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ss_sptr_make(self, mute)

    def mute(self) -> "bool":
        r"""mute(mute_ss_sptr self) -> bool"""
        return _blocks_swig3.mute_ss_sptr_mute(self)

    def set_mute(self, mute: "bool"=False) -> "void":
        r"""set_mute(mute_ss_sptr self, bool mute=False)"""
        return _blocks_swig3.mute_ss_sptr_set_mute(self, mute)

    def history(self) -> "unsigned int":
        r"""history(mute_ss_sptr self) -> unsigned int"""
        return _blocks_swig3.mute_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(mute_ss_sptr self, int which, int delay)
        declare_sample_delay(mute_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.mute_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(mute_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.mute_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(mute_ss_sptr self, int multiple)"""
        return _blocks_swig3.mute_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(mute_ss_sptr self) -> double"""
        return _blocks_swig3.mute_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(mute_ss_sptr self) -> uint64_t"""
        return _blocks_swig3.mute_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(mute_ss_sptr self) -> uint64_t"""
        return _blocks_swig3.mute_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(mute_ss_sptr self) -> bool"""
        return _blocks_swig3.mute_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(mute_ss_sptr self) -> bool"""
        return _blocks_swig3.mute_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(mute_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.mute_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(mute_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.mute_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(mute_ss_sptr self, std::string level)"""
        return _blocks_swig3.mute_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(mute_ss_sptr self) -> std::string"""
        return _blocks_swig3.mute_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(mute_ss_sptr self, int m)"""
        return _blocks_swig3.mute_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(mute_ss_sptr self)"""
        return _blocks_swig3.mute_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(mute_ss_sptr self) -> bool"""
        return _blocks_swig3.mute_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(mute_ss_sptr self, int m)"""
        return _blocks_swig3.mute_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(mute_ss_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(mute_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(mute_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.mute_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(mute_ss_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(mute_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(mute_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.mute_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(mute_ss_sptr self, int which) -> float
        pc_input_buffers_full(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(mute_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(mute_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(mute_ss_sptr self, int which) -> float
        pc_output_buffers_full(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(mute_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(mute_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(mute_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.mute_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(mute_ss_sptr self)"""
        return _blocks_swig3.mute_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(mute_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.mute_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(mute_ss_sptr self, int priority) -> int"""
        return _blocks_swig3.mute_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(mute_ss_sptr self) -> std::string"""
        return _blocks_swig3.mute_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(mute_ss_sptr self) -> std::string"""
        return _blocks_swig3.mute_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(mute_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(mute_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(mute_ss_sptr self) -> long"""
        return _blocks_swig3.mute_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(mute_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.mute_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(mute_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.mute_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(mute_ss_sptr self) -> std::string"""
        return _blocks_swig3.mute_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(mute_ss_sptr self, std::string name)"""
        return _blocks_swig3.mute_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(mute_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.mute_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(mute_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.mute_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(mute_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.mute_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(mute_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.mute_ss_sptr_message_subscribers(self, which_port)

# Register mute_ss_sptr in _blocks_swig3:
_blocks_swig3.mute_ss_sptr_swigregister(mute_ss_sptr)


mute_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mute_ss = mute_ss.make

class mute_ii(object):
    r"""
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(mute: "bool"=False) -> "gr::blocks::mute_blk< int >::sptr":
        r"""
        make(bool mute=False) -> mute_ii_sptr
        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ii_make(mute)

    def mute(self) -> "bool":
        r"""mute(mute_ii self) -> bool"""
        return _blocks_swig3.mute_ii_mute(self)

    def set_mute(self, mute: "bool"=False) -> "void":
        r"""set_mute(mute_ii self, bool mute=False)"""
        return _blocks_swig3.mute_ii_set_mute(self, mute)
    __swig_destroy__ = _blocks_swig3.delete_mute_ii

# Register mute_ii in _blocks_swig3:
_blocks_swig3.mute_ii_swigregister(mute_ii)

def mute_ii_make(mute: "bool"=False) -> "gr::blocks::mute_blk< int >::sptr":
    r"""
    mute_ii_make(bool mute=False) -> mute_ii_sptr
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
    return _blocks_swig3.mute_ii_make(mute)

class mute_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::mute_blk< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mute_ii_sptr self) -> mute_ii_sptr
        __init__(mute_ii_sptr self, mute_ii p) -> mute_ii_sptr
        """
        _blocks_swig3.mute_ii_sptr_swiginit(self, _blocks_swig3.new_mute_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::mute_blk< std::int32_t > *":
        r"""__deref__(mute_ii_sptr self) -> mute_ii"""
        return _blocks_swig3.mute_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_mute_ii_sptr

    def make(self, mute: "bool"=False) -> "gr::blocks::mute_blk< int >::sptr":
        r"""
        make(mute_ii_sptr self, bool mute=False) -> mute_ii_sptr
        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ii_sptr_make(self, mute)

    def mute(self) -> "bool":
        r"""mute(mute_ii_sptr self) -> bool"""
        return _blocks_swig3.mute_ii_sptr_mute(self)

    def set_mute(self, mute: "bool"=False) -> "void":
        r"""set_mute(mute_ii_sptr self, bool mute=False)"""
        return _blocks_swig3.mute_ii_sptr_set_mute(self, mute)

    def history(self) -> "unsigned int":
        r"""history(mute_ii_sptr self) -> unsigned int"""
        return _blocks_swig3.mute_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(mute_ii_sptr self, int which, int delay)
        declare_sample_delay(mute_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.mute_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(mute_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.mute_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(mute_ii_sptr self, int multiple)"""
        return _blocks_swig3.mute_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(mute_ii_sptr self) -> double"""
        return _blocks_swig3.mute_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(mute_ii_sptr self) -> uint64_t"""
        return _blocks_swig3.mute_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(mute_ii_sptr self) -> uint64_t"""
        return _blocks_swig3.mute_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(mute_ii_sptr self) -> bool"""
        return _blocks_swig3.mute_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(mute_ii_sptr self) -> bool"""
        return _blocks_swig3.mute_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(mute_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.mute_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(mute_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.mute_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(mute_ii_sptr self, std::string level)"""
        return _blocks_swig3.mute_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(mute_ii_sptr self) -> std::string"""
        return _blocks_swig3.mute_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(mute_ii_sptr self, int m)"""
        return _blocks_swig3.mute_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(mute_ii_sptr self)"""
        return _blocks_swig3.mute_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(mute_ii_sptr self) -> bool"""
        return _blocks_swig3.mute_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(mute_ii_sptr self, int m)"""
        return _blocks_swig3.mute_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(mute_ii_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(mute_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(mute_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.mute_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(mute_ii_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(mute_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(mute_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.mute_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(mute_ii_sptr self, int which) -> float
        pc_input_buffers_full(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(mute_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(mute_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(mute_ii_sptr self, int which) -> float
        pc_output_buffers_full(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(mute_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(mute_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(mute_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.mute_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(mute_ii_sptr self)"""
        return _blocks_swig3.mute_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(mute_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.mute_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(mute_ii_sptr self, int priority) -> int"""
        return _blocks_swig3.mute_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(mute_ii_sptr self) -> std::string"""
        return _blocks_swig3.mute_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(mute_ii_sptr self) -> std::string"""
        return _blocks_swig3.mute_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(mute_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(mute_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(mute_ii_sptr self) -> long"""
        return _blocks_swig3.mute_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(mute_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.mute_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(mute_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.mute_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(mute_ii_sptr self) -> std::string"""
        return _blocks_swig3.mute_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(mute_ii_sptr self, std::string name)"""
        return _blocks_swig3.mute_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(mute_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.mute_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(mute_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.mute_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(mute_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.mute_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(mute_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.mute_ii_sptr_message_subscribers(self, which_port)

# Register mute_ii_sptr in _blocks_swig3:
_blocks_swig3.mute_ii_sptr_swigregister(mute_ii_sptr)


mute_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mute_ii = mute_ii.make

class mute_ff(object):
    r"""
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(mute: "bool"=False) -> "gr::blocks::mute_blk< float >::sptr":
        r"""
        make(bool mute=False) -> mute_ff_sptr
        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ff_make(mute)

    def mute(self) -> "bool":
        r"""mute(mute_ff self) -> bool"""
        return _blocks_swig3.mute_ff_mute(self)

    def set_mute(self, mute: "bool"=False) -> "void":
        r"""set_mute(mute_ff self, bool mute=False)"""
        return _blocks_swig3.mute_ff_set_mute(self, mute)
    __swig_destroy__ = _blocks_swig3.delete_mute_ff

# Register mute_ff in _blocks_swig3:
_blocks_swig3.mute_ff_swigregister(mute_ff)

def mute_ff_make(mute: "bool"=False) -> "gr::blocks::mute_blk< float >::sptr":
    r"""
    mute_ff_make(bool mute=False) -> mute_ff_sptr
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
    return _blocks_swig3.mute_ff_make(mute)

class mute_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::mute_blk< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mute_ff_sptr self) -> mute_ff_sptr
        __init__(mute_ff_sptr self, mute_ff p) -> mute_ff_sptr
        """
        _blocks_swig3.mute_ff_sptr_swiginit(self, _blocks_swig3.new_mute_ff_sptr(*args))

    def __deref__(self) -> "gr::blocks::mute_blk< float > *":
        r"""__deref__(mute_ff_sptr self) -> mute_ff"""
        return _blocks_swig3.mute_ff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_mute_ff_sptr

    def make(self, mute: "bool"=False) -> "gr::blocks::mute_blk< float >::sptr":
        r"""
        make(mute_ff_sptr self, bool mute=False) -> mute_ff_sptr
        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ff_sptr_make(self, mute)

    def mute(self) -> "bool":
        r"""mute(mute_ff_sptr self) -> bool"""
        return _blocks_swig3.mute_ff_sptr_mute(self)

    def set_mute(self, mute: "bool"=False) -> "void":
        r"""set_mute(mute_ff_sptr self, bool mute=False)"""
        return _blocks_swig3.mute_ff_sptr_set_mute(self, mute)

    def history(self) -> "unsigned int":
        r"""history(mute_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.mute_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(mute_ff_sptr self, int which, int delay)
        declare_sample_delay(mute_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.mute_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(mute_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.mute_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(mute_ff_sptr self, int multiple)"""
        return _blocks_swig3.mute_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(mute_ff_sptr self) -> double"""
        return _blocks_swig3.mute_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(mute_ff_sptr self) -> uint64_t"""
        return _blocks_swig3.mute_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(mute_ff_sptr self) -> uint64_t"""
        return _blocks_swig3.mute_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(mute_ff_sptr self) -> bool"""
        return _blocks_swig3.mute_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(mute_ff_sptr self) -> bool"""
        return _blocks_swig3.mute_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(mute_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.mute_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(mute_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.mute_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(mute_ff_sptr self, std::string level)"""
        return _blocks_swig3.mute_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(mute_ff_sptr self) -> std::string"""
        return _blocks_swig3.mute_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(mute_ff_sptr self, int m)"""
        return _blocks_swig3.mute_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(mute_ff_sptr self)"""
        return _blocks_swig3.mute_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(mute_ff_sptr self) -> bool"""
        return _blocks_swig3.mute_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(mute_ff_sptr self, int m)"""
        return _blocks_swig3.mute_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(mute_ff_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(mute_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(mute_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.mute_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(mute_ff_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(mute_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(mute_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.mute_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(mute_ff_sptr self, int which) -> float
        pc_input_buffers_full(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(mute_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(mute_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(mute_ff_sptr self, int which) -> float
        pc_output_buffers_full(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(mute_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(mute_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(mute_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.mute_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(mute_ff_sptr self)"""
        return _blocks_swig3.mute_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(mute_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.mute_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(mute_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.mute_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(mute_ff_sptr self) -> std::string"""
        return _blocks_swig3.mute_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(mute_ff_sptr self) -> std::string"""
        return _blocks_swig3.mute_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(mute_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(mute_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(mute_ff_sptr self) -> long"""
        return _blocks_swig3.mute_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(mute_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.mute_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(mute_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.mute_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(mute_ff_sptr self) -> std::string"""
        return _blocks_swig3.mute_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(mute_ff_sptr self, std::string name)"""
        return _blocks_swig3.mute_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(mute_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.mute_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(mute_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.mute_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(mute_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.mute_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(mute_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.mute_ff_sptr_message_subscribers(self, which_port)

# Register mute_ff_sptr in _blocks_swig3:
_blocks_swig3.mute_ff_sptr_swigregister(mute_ff_sptr)


mute_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mute_ff = mute_ff.make

class mute_cc(object):
    r"""
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(mute: "bool"=False) -> "gr::blocks::mute_blk< std::complex< float > >::sptr":
        r"""
        make(bool mute=False) -> mute_cc_sptr
        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_cc_make(mute)

    def mute(self) -> "bool":
        r"""mute(mute_cc self) -> bool"""
        return _blocks_swig3.mute_cc_mute(self)

    def set_mute(self, mute: "bool"=False) -> "void":
        r"""set_mute(mute_cc self, bool mute=False)"""
        return _blocks_swig3.mute_cc_set_mute(self, mute)
    __swig_destroy__ = _blocks_swig3.delete_mute_cc

# Register mute_cc in _blocks_swig3:
_blocks_swig3.mute_cc_swigregister(mute_cc)

def mute_cc_make(mute: "bool"=False) -> "gr::blocks::mute_blk< std::complex< float > >::sptr":
    r"""
    mute_cc_make(bool mute=False) -> mute_cc_sptr
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
    return _blocks_swig3.mute_cc_make(mute)

class mute_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::mute_blk< gr_complex > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mute_cc_sptr self) -> mute_cc_sptr
        __init__(mute_cc_sptr self, mute_cc p) -> mute_cc_sptr
        """
        _blocks_swig3.mute_cc_sptr_swiginit(self, _blocks_swig3.new_mute_cc_sptr(*args))

    def __deref__(self) -> "gr::blocks::mute_blk< gr_complex > *":
        r"""__deref__(mute_cc_sptr self) -> mute_cc"""
        return _blocks_swig3.mute_cc_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig3.delete_mute_cc_sptr

    def make(self, mute: "bool"=False) -> "gr::blocks::mute_blk< std::complex< float > >::sptr":
        r"""
        make(mute_cc_sptr self, bool mute=False) -> mute_cc_sptr
        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_cc_sptr_make(self, mute)

    def mute(self) -> "bool":
        r"""mute(mute_cc_sptr self) -> bool"""
        return _blocks_swig3.mute_cc_sptr_mute(self)

    def set_mute(self, mute: "bool"=False) -> "void":
        r"""set_mute(mute_cc_sptr self, bool mute=False)"""
        return _blocks_swig3.mute_cc_sptr_set_mute(self, mute)

    def history(self) -> "unsigned int":
        r"""history(mute_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.mute_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(mute_cc_sptr self, int which, int delay)
        declare_sample_delay(mute_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.mute_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(mute_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.mute_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(mute_cc_sptr self, int multiple)"""
        return _blocks_swig3.mute_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(mute_cc_sptr self) -> double"""
        return _blocks_swig3.mute_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(mute_cc_sptr self) -> uint64_t"""
        return _blocks_swig3.mute_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(mute_cc_sptr self) -> uint64_t"""
        return _blocks_swig3.mute_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(mute_cc_sptr self) -> bool"""
        return _blocks_swig3.mute_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(mute_cc_sptr self) -> bool"""
        return _blocks_swig3.mute_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(mute_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.mute_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(mute_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.mute_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(mute_cc_sptr self, std::string level)"""
        return _blocks_swig3.mute_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(mute_cc_sptr self) -> std::string"""
        return _blocks_swig3.mute_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(mute_cc_sptr self, int m)"""
        return _blocks_swig3.mute_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(mute_cc_sptr self)"""
        return _blocks_swig3.mute_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(mute_cc_sptr self) -> bool"""
        return _blocks_swig3.mute_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(mute_cc_sptr self, int m)"""
        return _blocks_swig3.mute_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(mute_cc_sptr self, int i) -> long"""
        return _blocks_swig3.mute_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(mute_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(mute_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.mute_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(mute_cc_sptr self, int i) -> long"""
        return _blocks_swig3.mute_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(mute_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(mute_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.mute_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(mute_cc_sptr self, int which) -> float
        pc_input_buffers_full(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(mute_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(mute_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(mute_cc_sptr self, int which) -> float
        pc_output_buffers_full(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(mute_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(mute_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(mute_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.mute_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(mute_cc_sptr self)"""
        return _blocks_swig3.mute_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(mute_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.mute_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(mute_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.mute_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(mute_cc_sptr self) -> std::string"""
        return _blocks_swig3.mute_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(mute_cc_sptr self) -> std::string"""
        return _blocks_swig3.mute_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(mute_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(mute_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(mute_cc_sptr self) -> long"""
        return _blocks_swig3.mute_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(mute_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.mute_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(mute_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.mute_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(mute_cc_sptr self) -> std::string"""
        return _blocks_swig3.mute_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(mute_cc_sptr self, std::string name)"""
        return _blocks_swig3.mute_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(mute_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig3.mute_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(mute_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.mute_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(mute_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig3.mute_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(mute_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig3.mute_cc_sptr_message_subscribers(self, which_port)

# Register mute_cc_sptr in _blocks_swig3:
_blocks_swig3.mute_cc_sptr_swigregister(mute_cc_sptr)


mute_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mute_cc = mute_cc.make



