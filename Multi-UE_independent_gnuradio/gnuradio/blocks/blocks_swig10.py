# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _blocks_swig10
else:
    import _blocks_swig10

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def high_res_timer_now() -> "gr::high_res_timer_type":
    r"""high_res_timer_now() -> gr::high_res_timer_type"""
    return _blocks_swig10.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    r"""high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _blocks_swig10.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    r"""high_res_timer_tps() -> gr::high_res_timer_type"""
    return _blocks_swig10.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    r"""high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _blocks_swig10.high_res_timer_epoch()
class nlog10_ff(object):
    r"""
    output = n*log10(input) + k

    Constructor Specific Documentation:

    Make an instance of an nlog10_ff block.

    Args:
        n : Scalar multiplicative constant
        vlen : Input vector length
        k : Scalar additive constant
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(n: "float"=1.0, vlen: "size_t"=1, k: "float"=0.0) -> "gr::blocks::nlog10_ff::sptr":
        r"""
        make(float n=1.0, size_t vlen=1, float k=0.0) -> nlog10_ff_sptr
        output = n*log10(input) + k

        Constructor Specific Documentation:

        Make an instance of an nlog10_ff block.

        Args:
            n : Scalar multiplicative constant
            vlen : Input vector length
            k : Scalar additive constant
        """
        return _blocks_swig10.nlog10_ff_make(n, vlen, k)
    __swig_destroy__ = _blocks_swig10.delete_nlog10_ff

# Register nlog10_ff in _blocks_swig10:
_blocks_swig10.nlog10_ff_swigregister(nlog10_ff)

def nlog10_ff_make(n: "float"=1.0, vlen: "size_t"=1, k: "float"=0.0) -> "gr::blocks::nlog10_ff::sptr":
    r"""
    nlog10_ff_make(float n=1.0, size_t vlen=1, float k=0.0) -> nlog10_ff_sptr
    output = n*log10(input) + k

    Constructor Specific Documentation:

    Make an instance of an nlog10_ff block.

    Args:
        n : Scalar multiplicative constant
        vlen : Input vector length
        k : Scalar additive constant
    """
    return _blocks_swig10.nlog10_ff_make(n, vlen, k)

class patterned_interleaver(object):
    r"""
    Interleave items based on the provided vector .

    Constructor Specific Documentation:

    Make a patterned interleaver block.

    Args:
        itemsize : stream itemsize
        pattern : vector that represents the interleaving pattern
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(itemsize: "size_t", pattern: "std::vector< int,std::allocator< int > >") -> "gr::blocks::patterned_interleaver::sptr":
        r"""
        make(size_t itemsize, std::vector< int,std::allocator< int > > pattern) -> patterned_interleaver_sptr
        Interleave items based on the provided vector .

        Constructor Specific Documentation:

        Make a patterned interleaver block.

        Args:
            itemsize : stream itemsize
            pattern : vector that represents the interleaving pattern
        """
        return _blocks_swig10.patterned_interleaver_make(itemsize, pattern)
    __swig_destroy__ = _blocks_swig10.delete_patterned_interleaver

# Register patterned_interleaver in _blocks_swig10:
_blocks_swig10.patterned_interleaver_swigregister(patterned_interleaver)

def patterned_interleaver_make(itemsize: "size_t", pattern: "std::vector< int,std::allocator< int > >") -> "gr::blocks::patterned_interleaver::sptr":
    r"""
    patterned_interleaver_make(size_t itemsize, std::vector< int,std::allocator< int > > pattern) -> patterned_interleaver_sptr
    Interleave items based on the provided vector .

    Constructor Specific Documentation:

    Make a patterned interleaver block.

    Args:
        itemsize : stream itemsize
        pattern : vector that represents the interleaving pattern
    """
    return _blocks_swig10.patterned_interleaver_make(itemsize, pattern)

class pack_k_bits_bb(object):
    r"""
    Converts a stream of bytes with 1 bit in the LSB to a byte with k relevant bits.

    This block takes in K bytes at a time, and uses the least significant bit to form a new byte.


    Example: k = 4 in = [0,1,0,1, 0x81,0x00,0x00,0x00] out = [0x05, 0x08]

    Constructor Specific Documentation:

    Make a pack_k_bits block.

    Args:
        k : number of bits to be packed.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(k: "unsigned int") -> "gr::blocks::pack_k_bits_bb::sptr":
        r"""
        make(unsigned int k) -> pack_k_bits_bb_sptr
        Converts a stream of bytes with 1 bit in the LSB to a byte with k relevant bits.

        This block takes in K bytes at a time, and uses the least significant bit to form a new byte.


        Example: k = 4 in = [0,1,0,1, 0x81,0x00,0x00,0x00] out = [0x05, 0x08]

        Constructor Specific Documentation:

        Make a pack_k_bits block.

        Args:
            k : number of bits to be packed.
        """
        return _blocks_swig10.pack_k_bits_bb_make(k)
    __swig_destroy__ = _blocks_swig10.delete_pack_k_bits_bb

# Register pack_k_bits_bb in _blocks_swig10:
_blocks_swig10.pack_k_bits_bb_swigregister(pack_k_bits_bb)

def pack_k_bits_bb_make(k: "unsigned int") -> "gr::blocks::pack_k_bits_bb::sptr":
    r"""
    pack_k_bits_bb_make(unsigned int k) -> pack_k_bits_bb_sptr
    Converts a stream of bytes with 1 bit in the LSB to a byte with k relevant bits.

    This block takes in K bytes at a time, and uses the least significant bit to form a new byte.


    Example: k = 4 in = [0,1,0,1, 0x81,0x00,0x00,0x00] out = [0x05, 0x08]

    Constructor Specific Documentation:

    Make a pack_k_bits block.

    Args:
        k : number of bits to be packed.
    """
    return _blocks_swig10.pack_k_bits_bb_make(k)

class min_ff(object):
    r"""
    Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::min_blk< float >::sptr":
        r"""
        make(size_t vlen, size_t vlen_out=1) -> min_ff_sptr
        Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig10.min_ff_make(vlen, vlen_out)
    __swig_destroy__ = _blocks_swig10.delete_min_ff

# Register min_ff in _blocks_swig10:
_blocks_swig10.min_ff_swigregister(min_ff)

def min_ff_make(vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::min_blk< float >::sptr":
    r"""
    min_ff_make(size_t vlen, size_t vlen_out=1) -> min_ff_sptr
    Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
    return _blocks_swig10.min_ff_make(vlen, vlen_out)

class min_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::min_blk< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(min_ff_sptr self) -> min_ff_sptr
        __init__(min_ff_sptr self, min_ff p) -> min_ff_sptr
        """
        _blocks_swig10.min_ff_sptr_swiginit(self, _blocks_swig10.new_min_ff_sptr(*args))

    def __deref__(self) -> "gr::blocks::min_blk< float > *":
        r"""__deref__(min_ff_sptr self) -> min_ff"""
        return _blocks_swig10.min_ff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_min_ff_sptr

    def make(self, vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::min_blk< float >::sptr":
        r"""
        make(min_ff_sptr self, size_t vlen, size_t vlen_out=1) -> min_ff_sptr
        Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig10.min_ff_sptr_make(self, vlen, vlen_out)

    def history(self) -> "unsigned int":
        r"""history(min_ff_sptr self) -> unsigned int"""
        return _blocks_swig10.min_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(min_ff_sptr self, int which, int delay)
        declare_sample_delay(min_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig10.min_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(min_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.min_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(min_ff_sptr self, int multiple)"""
        return _blocks_swig10.min_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(min_ff_sptr self) -> int"""
        return _blocks_swig10.min_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(min_ff_sptr self) -> double"""
        return _blocks_swig10.min_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(min_ff_sptr self) -> uint64_t"""
        return _blocks_swig10.min_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(min_ff_sptr self) -> uint64_t"""
        return _blocks_swig10.min_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(min_ff_sptr self) -> bool"""
        return _blocks_swig10.min_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(min_ff_sptr self) -> bool"""
        return _blocks_swig10.min_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(min_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.min_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(min_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.min_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(min_ff_sptr self, std::string level)"""
        return _blocks_swig10.min_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(min_ff_sptr self) -> std::string"""
        return _blocks_swig10.min_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(min_ff_sptr self) -> int"""
        return _blocks_swig10.min_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(min_ff_sptr self, int m)"""
        return _blocks_swig10.min_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(min_ff_sptr self)"""
        return _blocks_swig10.min_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(min_ff_sptr self) -> bool"""
        return _blocks_swig10.min_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(min_ff_sptr self, int m)"""
        return _blocks_swig10.min_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(min_ff_sptr self) -> int"""
        return _blocks_swig10.min_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(min_ff_sptr self, int i) -> long"""
        return _blocks_swig10.min_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(min_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(min_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.min_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(min_ff_sptr self, int i) -> long"""
        return _blocks_swig10.min_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(min_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(min_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.min_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(min_ff_sptr self, int which) -> float
        pc_input_buffers_full(min_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(min_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(min_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(min_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(min_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(min_ff_sptr self, int which) -> float
        pc_output_buffers_full(min_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(min_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(min_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(min_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(min_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(min_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.min_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(min_ff_sptr self)"""
        return _blocks_swig10.min_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(min_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.min_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(min_ff_sptr self) -> int"""
        return _blocks_swig10.min_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(min_ff_sptr self) -> int"""
        return _blocks_swig10.min_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(min_ff_sptr self, int priority) -> int"""
        return _blocks_swig10.min_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(min_ff_sptr self) -> std::string"""
        return _blocks_swig10.min_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(min_ff_sptr self) -> std::string"""
        return _blocks_swig10.min_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(min_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.min_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(min_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.min_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(min_ff_sptr self) -> long"""
        return _blocks_swig10.min_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(min_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.min_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(min_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.min_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(min_ff_sptr self) -> std::string"""
        return _blocks_swig10.min_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(min_ff_sptr self, std::string name)"""
        return _blocks_swig10.min_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(min_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.min_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(min_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.min_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(min_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.min_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(min_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.min_ff_sptr_message_subscribers(self, which_port)

# Register min_ff_sptr in _blocks_swig10:
_blocks_swig10.min_ff_sptr_swigregister(min_ff_sptr)


min_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
min_ff = min_ff.make

class min_ii(object):
    r"""
    Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::min_blk< int >::sptr":
        r"""
        make(size_t vlen, size_t vlen_out=1) -> min_ii_sptr
        Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig10.min_ii_make(vlen, vlen_out)
    __swig_destroy__ = _blocks_swig10.delete_min_ii

# Register min_ii in _blocks_swig10:
_blocks_swig10.min_ii_swigregister(min_ii)

def min_ii_make(vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::min_blk< int >::sptr":
    r"""
    min_ii_make(size_t vlen, size_t vlen_out=1) -> min_ii_sptr
    Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
    return _blocks_swig10.min_ii_make(vlen, vlen_out)

class min_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::min_blk< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(min_ii_sptr self) -> min_ii_sptr
        __init__(min_ii_sptr self, min_ii p) -> min_ii_sptr
        """
        _blocks_swig10.min_ii_sptr_swiginit(self, _blocks_swig10.new_min_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::min_blk< std::int32_t > *":
        r"""__deref__(min_ii_sptr self) -> min_ii"""
        return _blocks_swig10.min_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_min_ii_sptr

    def make(self, vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::min_blk< int >::sptr":
        r"""
        make(min_ii_sptr self, size_t vlen, size_t vlen_out=1) -> min_ii_sptr
        Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig10.min_ii_sptr_make(self, vlen, vlen_out)

    def history(self) -> "unsigned int":
        r"""history(min_ii_sptr self) -> unsigned int"""
        return _blocks_swig10.min_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(min_ii_sptr self, int which, int delay)
        declare_sample_delay(min_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig10.min_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(min_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.min_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(min_ii_sptr self, int multiple)"""
        return _blocks_swig10.min_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(min_ii_sptr self) -> int"""
        return _blocks_swig10.min_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(min_ii_sptr self) -> double"""
        return _blocks_swig10.min_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(min_ii_sptr self) -> uint64_t"""
        return _blocks_swig10.min_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(min_ii_sptr self) -> uint64_t"""
        return _blocks_swig10.min_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(min_ii_sptr self) -> bool"""
        return _blocks_swig10.min_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(min_ii_sptr self) -> bool"""
        return _blocks_swig10.min_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(min_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.min_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(min_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.min_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(min_ii_sptr self, std::string level)"""
        return _blocks_swig10.min_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(min_ii_sptr self) -> std::string"""
        return _blocks_swig10.min_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(min_ii_sptr self) -> int"""
        return _blocks_swig10.min_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(min_ii_sptr self, int m)"""
        return _blocks_swig10.min_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(min_ii_sptr self)"""
        return _blocks_swig10.min_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(min_ii_sptr self) -> bool"""
        return _blocks_swig10.min_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(min_ii_sptr self, int m)"""
        return _blocks_swig10.min_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(min_ii_sptr self) -> int"""
        return _blocks_swig10.min_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(min_ii_sptr self, int i) -> long"""
        return _blocks_swig10.min_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(min_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(min_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.min_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(min_ii_sptr self, int i) -> long"""
        return _blocks_swig10.min_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(min_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(min_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.min_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(min_ii_sptr self, int which) -> float
        pc_input_buffers_full(min_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(min_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(min_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(min_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(min_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(min_ii_sptr self, int which) -> float
        pc_output_buffers_full(min_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(min_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(min_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(min_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(min_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(min_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.min_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(min_ii_sptr self)"""
        return _blocks_swig10.min_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(min_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.min_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(min_ii_sptr self) -> int"""
        return _blocks_swig10.min_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(min_ii_sptr self) -> int"""
        return _blocks_swig10.min_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(min_ii_sptr self, int priority) -> int"""
        return _blocks_swig10.min_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(min_ii_sptr self) -> std::string"""
        return _blocks_swig10.min_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(min_ii_sptr self) -> std::string"""
        return _blocks_swig10.min_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(min_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.min_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(min_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.min_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(min_ii_sptr self) -> long"""
        return _blocks_swig10.min_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(min_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.min_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(min_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.min_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(min_ii_sptr self) -> std::string"""
        return _blocks_swig10.min_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(min_ii_sptr self, std::string name)"""
        return _blocks_swig10.min_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(min_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.min_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(min_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.min_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(min_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.min_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(min_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.min_ii_sptr_message_subscribers(self, which_port)

# Register min_ii_sptr in _blocks_swig10:
_blocks_swig10.min_ii_sptr_swigregister(min_ii_sptr)


min_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
min_ii = min_ii.make

class min_ss(object):
    r"""
    Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::min_blk< short >::sptr":
        r"""
        make(size_t vlen, size_t vlen_out=1) -> min_ss_sptr
        Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig10.min_ss_make(vlen, vlen_out)
    __swig_destroy__ = _blocks_swig10.delete_min_ss

# Register min_ss in _blocks_swig10:
_blocks_swig10.min_ss_swigregister(min_ss)

def min_ss_make(vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::min_blk< short >::sptr":
    r"""
    min_ss_make(size_t vlen, size_t vlen_out=1) -> min_ss_sptr
    Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
    return _blocks_swig10.min_ss_make(vlen, vlen_out)

class min_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::min_blk< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(min_ss_sptr self) -> min_ss_sptr
        __init__(min_ss_sptr self, min_ss p) -> min_ss_sptr
        """
        _blocks_swig10.min_ss_sptr_swiginit(self, _blocks_swig10.new_min_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::min_blk< std::int16_t > *":
        r"""__deref__(min_ss_sptr self) -> min_ss"""
        return _blocks_swig10.min_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_min_ss_sptr

    def make(self, vlen: "size_t", vlen_out: "size_t"=1) -> "gr::blocks::min_blk< short >::sptr":
        r"""
        make(min_ss_sptr self, size_t vlen, size_t vlen_out=1) -> min_ss_sptr
        Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig10.min_ss_sptr_make(self, vlen, vlen_out)

    def history(self) -> "unsigned int":
        r"""history(min_ss_sptr self) -> unsigned int"""
        return _blocks_swig10.min_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(min_ss_sptr self, int which, int delay)
        declare_sample_delay(min_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig10.min_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(min_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.min_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(min_ss_sptr self, int multiple)"""
        return _blocks_swig10.min_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(min_ss_sptr self) -> int"""
        return _blocks_swig10.min_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(min_ss_sptr self) -> double"""
        return _blocks_swig10.min_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(min_ss_sptr self) -> uint64_t"""
        return _blocks_swig10.min_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(min_ss_sptr self) -> uint64_t"""
        return _blocks_swig10.min_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(min_ss_sptr self) -> bool"""
        return _blocks_swig10.min_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(min_ss_sptr self) -> bool"""
        return _blocks_swig10.min_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(min_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.min_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(min_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.min_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(min_ss_sptr self, std::string level)"""
        return _blocks_swig10.min_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(min_ss_sptr self) -> std::string"""
        return _blocks_swig10.min_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(min_ss_sptr self) -> int"""
        return _blocks_swig10.min_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(min_ss_sptr self, int m)"""
        return _blocks_swig10.min_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(min_ss_sptr self)"""
        return _blocks_swig10.min_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(min_ss_sptr self) -> bool"""
        return _blocks_swig10.min_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(min_ss_sptr self, int m)"""
        return _blocks_swig10.min_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(min_ss_sptr self) -> int"""
        return _blocks_swig10.min_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(min_ss_sptr self, int i) -> long"""
        return _blocks_swig10.min_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(min_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(min_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.min_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(min_ss_sptr self, int i) -> long"""
        return _blocks_swig10.min_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(min_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(min_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.min_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(min_ss_sptr self, int which) -> float
        pc_input_buffers_full(min_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(min_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(min_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(min_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(min_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(min_ss_sptr self, int which) -> float
        pc_output_buffers_full(min_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(min_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(min_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(min_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(min_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(min_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.min_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(min_ss_sptr self)"""
        return _blocks_swig10.min_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(min_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.min_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(min_ss_sptr self) -> int"""
        return _blocks_swig10.min_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(min_ss_sptr self) -> int"""
        return _blocks_swig10.min_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(min_ss_sptr self, int priority) -> int"""
        return _blocks_swig10.min_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(min_ss_sptr self) -> std::string"""
        return _blocks_swig10.min_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(min_ss_sptr self) -> std::string"""
        return _blocks_swig10.min_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(min_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.min_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(min_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.min_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(min_ss_sptr self) -> long"""
        return _blocks_swig10.min_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(min_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.min_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(min_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.min_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(min_ss_sptr self) -> std::string"""
        return _blocks_swig10.min_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(min_ss_sptr self, std::string name)"""
        return _blocks_swig10.min_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(min_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.min_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(min_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.min_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(min_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.min_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(min_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.min_ss_sptr_message_subscribers(self, which_port)

# Register min_ss_sptr in _blocks_swig10:
_blocks_swig10.min_ss_sptr_swigregister(min_ss_sptr)


min_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
min_ss = min_ss.make

class moving_average_cc(object):
    r"""
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(length: "int", scale: "std::complex< float >", max_iter: "int"=4096, vlen: "unsigned int"=1) -> "gr::blocks::moving_average< std::complex< float > >::sptr":
        r"""
        make(int length, std::complex< float > scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_cc_sptr
        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_cc_make(length, scale, max_iter, vlen)

    def length(self) -> "int":
        r"""
        length(moving_average_cc self) -> int
        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_cc_length(self)

    def scale(self) -> "std::complex< float >":
        r"""
        scale(moving_average_cc self) -> std::complex< float >
        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_cc_scale(self)

    def set_length_and_scale(self, length: "int", scale: "std::complex< float >") -> "void":
        r"""
        set_length_and_scale(moving_average_cc self, int length, std::complex< float > scale)
        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_cc_set_length_and_scale(self, length, scale)

    def set_length(self, length: "int") -> "void":
        r"""
        set_length(moving_average_cc self, int length)
        Set the length.
        """
        return _blocks_swig10.moving_average_cc_set_length(self, length)

    def set_scale(self, scale: "std::complex< float >") -> "void":
        r"""
        set_scale(moving_average_cc self, std::complex< float > scale)
        Set the scale factor.
        """
        return _blocks_swig10.moving_average_cc_set_scale(self, scale)
    __swig_destroy__ = _blocks_swig10.delete_moving_average_cc

# Register moving_average_cc in _blocks_swig10:
_blocks_swig10.moving_average_cc_swigregister(moving_average_cc)

def moving_average_cc_make(length: "int", scale: "std::complex< float >", max_iter: "int"=4096, vlen: "unsigned int"=1) -> "gr::blocks::moving_average< std::complex< float > >::sptr":
    r"""
    moving_average_cc_make(int length, std::complex< float > scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_cc_sptr
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """
    return _blocks_swig10.moving_average_cc_make(length, scale, max_iter, vlen)

class moving_average_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::moving_average< gr_complex > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(moving_average_cc_sptr self) -> moving_average_cc_sptr
        __init__(moving_average_cc_sptr self, moving_average_cc p) -> moving_average_cc_sptr
        """
        _blocks_swig10.moving_average_cc_sptr_swiginit(self, _blocks_swig10.new_moving_average_cc_sptr(*args))

    def __deref__(self) -> "gr::blocks::moving_average< gr_complex > *":
        r"""__deref__(moving_average_cc_sptr self) -> moving_average_cc"""
        return _blocks_swig10.moving_average_cc_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_moving_average_cc_sptr

    def make(self, length: "int", scale: "std::complex< float >", max_iter: "int"=4096, vlen: "unsigned int"=1) -> "gr::blocks::moving_average< std::complex< float > >::sptr":
        r"""
        make(moving_average_cc_sptr self, int length, std::complex< float > scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_cc_sptr
        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_cc_sptr_make(self, length, scale, max_iter, vlen)

    def length(self) -> "int":
        r"""
        length(moving_average_cc_sptr self) -> int
        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_cc_sptr_length(self)

    def scale(self) -> "std::complex< float >":
        r"""
        scale(moving_average_cc_sptr self) -> std::complex< float >
        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_cc_sptr_scale(self)

    def set_length_and_scale(self, length: "int", scale: "std::complex< float >") -> "void":
        r"""
        set_length_and_scale(moving_average_cc_sptr self, int length, std::complex< float > scale)
        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_cc_sptr_set_length_and_scale(self, length, scale)

    def set_length(self, length: "int") -> "void":
        r"""
        set_length(moving_average_cc_sptr self, int length)
        Set the length.
        """
        return _blocks_swig10.moving_average_cc_sptr_set_length(self, length)

    def set_scale(self, scale: "std::complex< float >") -> "void":
        r"""
        set_scale(moving_average_cc_sptr self, std::complex< float > scale)
        Set the scale factor.
        """
        return _blocks_swig10.moving_average_cc_sptr_set_scale(self, scale)

    def history(self) -> "unsigned int":
        r"""history(moving_average_cc_sptr self) -> unsigned int"""
        return _blocks_swig10.moving_average_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(moving_average_cc_sptr self, int which, int delay)
        declare_sample_delay(moving_average_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig10.moving_average_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(moving_average_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.moving_average_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(moving_average_cc_sptr self, int multiple)"""
        return _blocks_swig10.moving_average_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(moving_average_cc_sptr self) -> int"""
        return _blocks_swig10.moving_average_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(moving_average_cc_sptr self) -> double"""
        return _blocks_swig10.moving_average_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(moving_average_cc_sptr self) -> uint64_t"""
        return _blocks_swig10.moving_average_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(moving_average_cc_sptr self) -> uint64_t"""
        return _blocks_swig10.moving_average_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(moving_average_cc_sptr self) -> bool"""
        return _blocks_swig10.moving_average_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(moving_average_cc_sptr self) -> bool"""
        return _blocks_swig10.moving_average_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(moving_average_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.moving_average_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(moving_average_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.moving_average_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(moving_average_cc_sptr self, std::string level)"""
        return _blocks_swig10.moving_average_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(moving_average_cc_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(moving_average_cc_sptr self) -> int"""
        return _blocks_swig10.moving_average_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(moving_average_cc_sptr self, int m)"""
        return _blocks_swig10.moving_average_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(moving_average_cc_sptr self)"""
        return _blocks_swig10.moving_average_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(moving_average_cc_sptr self) -> bool"""
        return _blocks_swig10.moving_average_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(moving_average_cc_sptr self, int m)"""
        return _blocks_swig10.moving_average_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(moving_average_cc_sptr self) -> int"""
        return _blocks_swig10.moving_average_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(moving_average_cc_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(moving_average_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.moving_average_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(moving_average_cc_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(moving_average_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.moving_average_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(moving_average_cc_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(moving_average_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(moving_average_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(moving_average_cc_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(moving_average_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(moving_average_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(moving_average_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.moving_average_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(moving_average_cc_sptr self)"""
        return _blocks_swig10.moving_average_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(moving_average_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.moving_average_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(moving_average_cc_sptr self) -> int"""
        return _blocks_swig10.moving_average_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(moving_average_cc_sptr self) -> int"""
        return _blocks_swig10.moving_average_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(moving_average_cc_sptr self, int priority) -> int"""
        return _blocks_swig10.moving_average_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(moving_average_cc_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(moving_average_cc_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(moving_average_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(moving_average_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(moving_average_cc_sptr self) -> long"""
        return _blocks_swig10.moving_average_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(moving_average_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.moving_average_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(moving_average_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.moving_average_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(moving_average_cc_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(moving_average_cc_sptr self, std::string name)"""
        return _blocks_swig10.moving_average_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(moving_average_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.moving_average_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(moving_average_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.moving_average_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(moving_average_cc_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.moving_average_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(moving_average_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.moving_average_cc_sptr_message_subscribers(self, which_port)

# Register moving_average_cc_sptr in _blocks_swig10:
_blocks_swig10.moving_average_cc_sptr_swigregister(moving_average_cc_sptr)


moving_average_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_cc = moving_average_cc.make

class moving_average_ff(object):
    r"""
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(length: "int", scale: "float", max_iter: "int"=4096, vlen: "unsigned int"=1) -> "gr::blocks::moving_average< float >::sptr":
        r"""
        make(int length, float scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ff_sptr
        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_ff_make(length, scale, max_iter, vlen)

    def length(self) -> "int":
        r"""
        length(moving_average_ff self) -> int
        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_ff_length(self)

    def scale(self) -> "float":
        r"""
        scale(moving_average_ff self) -> float
        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_ff_scale(self)

    def set_length_and_scale(self, length: "int", scale: "float") -> "void":
        r"""
        set_length_and_scale(moving_average_ff self, int length, float scale)
        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_ff_set_length_and_scale(self, length, scale)

    def set_length(self, length: "int") -> "void":
        r"""
        set_length(moving_average_ff self, int length)
        Set the length.
        """
        return _blocks_swig10.moving_average_ff_set_length(self, length)

    def set_scale(self, scale: "float") -> "void":
        r"""
        set_scale(moving_average_ff self, float scale)
        Set the scale factor.
        """
        return _blocks_swig10.moving_average_ff_set_scale(self, scale)
    __swig_destroy__ = _blocks_swig10.delete_moving_average_ff

# Register moving_average_ff in _blocks_swig10:
_blocks_swig10.moving_average_ff_swigregister(moving_average_ff)

def moving_average_ff_make(length: "int", scale: "float", max_iter: "int"=4096, vlen: "unsigned int"=1) -> "gr::blocks::moving_average< float >::sptr":
    r"""
    moving_average_ff_make(int length, float scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ff_sptr
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """
    return _blocks_swig10.moving_average_ff_make(length, scale, max_iter, vlen)

class moving_average_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::moving_average< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(moving_average_ff_sptr self) -> moving_average_ff_sptr
        __init__(moving_average_ff_sptr self, moving_average_ff p) -> moving_average_ff_sptr
        """
        _blocks_swig10.moving_average_ff_sptr_swiginit(self, _blocks_swig10.new_moving_average_ff_sptr(*args))

    def __deref__(self) -> "gr::blocks::moving_average< float > *":
        r"""__deref__(moving_average_ff_sptr self) -> moving_average_ff"""
        return _blocks_swig10.moving_average_ff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_moving_average_ff_sptr

    def make(self, length: "int", scale: "float", max_iter: "int"=4096, vlen: "unsigned int"=1) -> "gr::blocks::moving_average< float >::sptr":
        r"""
        make(moving_average_ff_sptr self, int length, float scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ff_sptr
        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_ff_sptr_make(self, length, scale, max_iter, vlen)

    def length(self) -> "int":
        r"""
        length(moving_average_ff_sptr self) -> int
        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_ff_sptr_length(self)

    def scale(self) -> "float":
        r"""
        scale(moving_average_ff_sptr self) -> float
        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_ff_sptr_scale(self)

    def set_length_and_scale(self, length: "int", scale: "float") -> "void":
        r"""
        set_length_and_scale(moving_average_ff_sptr self, int length, float scale)
        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_ff_sptr_set_length_and_scale(self, length, scale)

    def set_length(self, length: "int") -> "void":
        r"""
        set_length(moving_average_ff_sptr self, int length)
        Set the length.
        """
        return _blocks_swig10.moving_average_ff_sptr_set_length(self, length)

    def set_scale(self, scale: "float") -> "void":
        r"""
        set_scale(moving_average_ff_sptr self, float scale)
        Set the scale factor.
        """
        return _blocks_swig10.moving_average_ff_sptr_set_scale(self, scale)

    def history(self) -> "unsigned int":
        r"""history(moving_average_ff_sptr self) -> unsigned int"""
        return _blocks_swig10.moving_average_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(moving_average_ff_sptr self, int which, int delay)
        declare_sample_delay(moving_average_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig10.moving_average_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(moving_average_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.moving_average_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(moving_average_ff_sptr self, int multiple)"""
        return _blocks_swig10.moving_average_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(moving_average_ff_sptr self) -> int"""
        return _blocks_swig10.moving_average_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(moving_average_ff_sptr self) -> double"""
        return _blocks_swig10.moving_average_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(moving_average_ff_sptr self) -> uint64_t"""
        return _blocks_swig10.moving_average_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(moving_average_ff_sptr self) -> uint64_t"""
        return _blocks_swig10.moving_average_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(moving_average_ff_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(moving_average_ff_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(moving_average_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.moving_average_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(moving_average_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.moving_average_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(moving_average_ff_sptr self, std::string level)"""
        return _blocks_swig10.moving_average_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(moving_average_ff_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(moving_average_ff_sptr self) -> int"""
        return _blocks_swig10.moving_average_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(moving_average_ff_sptr self, int m)"""
        return _blocks_swig10.moving_average_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(moving_average_ff_sptr self)"""
        return _blocks_swig10.moving_average_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(moving_average_ff_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(moving_average_ff_sptr self, int m)"""
        return _blocks_swig10.moving_average_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(moving_average_ff_sptr self) -> int"""
        return _blocks_swig10.moving_average_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(moving_average_ff_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(moving_average_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.moving_average_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(moving_average_ff_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(moving_average_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.moving_average_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(moving_average_ff_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(moving_average_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(moving_average_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(moving_average_ff_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(moving_average_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(moving_average_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(moving_average_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.moving_average_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(moving_average_ff_sptr self)"""
        return _blocks_swig10.moving_average_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(moving_average_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.moving_average_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(moving_average_ff_sptr self) -> int"""
        return _blocks_swig10.moving_average_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(moving_average_ff_sptr self) -> int"""
        return _blocks_swig10.moving_average_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(moving_average_ff_sptr self, int priority) -> int"""
        return _blocks_swig10.moving_average_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(moving_average_ff_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(moving_average_ff_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(moving_average_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(moving_average_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(moving_average_ff_sptr self) -> long"""
        return _blocks_swig10.moving_average_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(moving_average_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.moving_average_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(moving_average_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.moving_average_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(moving_average_ff_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(moving_average_ff_sptr self, std::string name)"""
        return _blocks_swig10.moving_average_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(moving_average_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.moving_average_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(moving_average_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.moving_average_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(moving_average_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.moving_average_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(moving_average_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.moving_average_ff_sptr_message_subscribers(self, which_port)

# Register moving_average_ff_sptr in _blocks_swig10:
_blocks_swig10.moving_average_ff_sptr_swigregister(moving_average_ff_sptr)


moving_average_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_ff = moving_average_ff.make

class moving_average_ii(object):
    r"""
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(length: "int", scale: "std::int32_t", max_iter: "int"=4096, vlen: "unsigned int"=1) -> "gr::blocks::moving_average< int >::sptr":
        r"""
        make(int length, std::int32_t scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ii_sptr
        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_ii_make(length, scale, max_iter, vlen)

    def length(self) -> "int":
        r"""
        length(moving_average_ii self) -> int
        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_ii_length(self)

    def scale(self) -> "std::int32_t":
        r"""
        scale(moving_average_ii self) -> std::int32_t
        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_ii_scale(self)

    def set_length_and_scale(self, length: "int", scale: "std::int32_t") -> "void":
        r"""
        set_length_and_scale(moving_average_ii self, int length, std::int32_t scale)
        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_ii_set_length_and_scale(self, length, scale)

    def set_length(self, length: "int") -> "void":
        r"""
        set_length(moving_average_ii self, int length)
        Set the length.
        """
        return _blocks_swig10.moving_average_ii_set_length(self, length)

    def set_scale(self, scale: "std::int32_t") -> "void":
        r"""
        set_scale(moving_average_ii self, std::int32_t scale)
        Set the scale factor.
        """
        return _blocks_swig10.moving_average_ii_set_scale(self, scale)
    __swig_destroy__ = _blocks_swig10.delete_moving_average_ii

# Register moving_average_ii in _blocks_swig10:
_blocks_swig10.moving_average_ii_swigregister(moving_average_ii)

def moving_average_ii_make(length: "int", scale: "std::int32_t", max_iter: "int"=4096, vlen: "unsigned int"=1) -> "gr::blocks::moving_average< int >::sptr":
    r"""
    moving_average_ii_make(int length, std::int32_t scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ii_sptr
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """
    return _blocks_swig10.moving_average_ii_make(length, scale, max_iter, vlen)

class moving_average_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::moving_average< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(moving_average_ii_sptr self) -> moving_average_ii_sptr
        __init__(moving_average_ii_sptr self, moving_average_ii p) -> moving_average_ii_sptr
        """
        _blocks_swig10.moving_average_ii_sptr_swiginit(self, _blocks_swig10.new_moving_average_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::moving_average< std::int32_t > *":
        r"""__deref__(moving_average_ii_sptr self) -> moving_average_ii"""
        return _blocks_swig10.moving_average_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_moving_average_ii_sptr

    def make(self, length: "int", scale: "std::int32_t", max_iter: "int"=4096, vlen: "unsigned int"=1) -> "gr::blocks::moving_average< int >::sptr":
        r"""
        make(moving_average_ii_sptr self, int length, std::int32_t scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ii_sptr
        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_ii_sptr_make(self, length, scale, max_iter, vlen)

    def length(self) -> "int":
        r"""
        length(moving_average_ii_sptr self) -> int
        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_ii_sptr_length(self)

    def scale(self) -> "std::int32_t":
        r"""
        scale(moving_average_ii_sptr self) -> std::int32_t
        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_ii_sptr_scale(self)

    def set_length_and_scale(self, length: "int", scale: "std::int32_t") -> "void":
        r"""
        set_length_and_scale(moving_average_ii_sptr self, int length, std::int32_t scale)
        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_ii_sptr_set_length_and_scale(self, length, scale)

    def set_length(self, length: "int") -> "void":
        r"""
        set_length(moving_average_ii_sptr self, int length)
        Set the length.
        """
        return _blocks_swig10.moving_average_ii_sptr_set_length(self, length)

    def set_scale(self, scale: "std::int32_t") -> "void":
        r"""
        set_scale(moving_average_ii_sptr self, std::int32_t scale)
        Set the scale factor.
        """
        return _blocks_swig10.moving_average_ii_sptr_set_scale(self, scale)

    def history(self) -> "unsigned int":
        r"""history(moving_average_ii_sptr self) -> unsigned int"""
        return _blocks_swig10.moving_average_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(moving_average_ii_sptr self, int which, int delay)
        declare_sample_delay(moving_average_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig10.moving_average_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(moving_average_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.moving_average_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(moving_average_ii_sptr self, int multiple)"""
        return _blocks_swig10.moving_average_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(moving_average_ii_sptr self) -> int"""
        return _blocks_swig10.moving_average_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(moving_average_ii_sptr self) -> double"""
        return _blocks_swig10.moving_average_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(moving_average_ii_sptr self) -> uint64_t"""
        return _blocks_swig10.moving_average_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(moving_average_ii_sptr self) -> uint64_t"""
        return _blocks_swig10.moving_average_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(moving_average_ii_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(moving_average_ii_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(moving_average_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.moving_average_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(moving_average_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.moving_average_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(moving_average_ii_sptr self, std::string level)"""
        return _blocks_swig10.moving_average_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(moving_average_ii_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(moving_average_ii_sptr self) -> int"""
        return _blocks_swig10.moving_average_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(moving_average_ii_sptr self, int m)"""
        return _blocks_swig10.moving_average_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(moving_average_ii_sptr self)"""
        return _blocks_swig10.moving_average_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(moving_average_ii_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(moving_average_ii_sptr self, int m)"""
        return _blocks_swig10.moving_average_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(moving_average_ii_sptr self) -> int"""
        return _blocks_swig10.moving_average_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(moving_average_ii_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(moving_average_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.moving_average_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(moving_average_ii_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(moving_average_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.moving_average_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(moving_average_ii_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(moving_average_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(moving_average_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(moving_average_ii_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(moving_average_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(moving_average_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(moving_average_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.moving_average_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(moving_average_ii_sptr self)"""
        return _blocks_swig10.moving_average_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(moving_average_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.moving_average_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(moving_average_ii_sptr self) -> int"""
        return _blocks_swig10.moving_average_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(moving_average_ii_sptr self) -> int"""
        return _blocks_swig10.moving_average_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(moving_average_ii_sptr self, int priority) -> int"""
        return _blocks_swig10.moving_average_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(moving_average_ii_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(moving_average_ii_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(moving_average_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(moving_average_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(moving_average_ii_sptr self) -> long"""
        return _blocks_swig10.moving_average_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(moving_average_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.moving_average_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(moving_average_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.moving_average_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(moving_average_ii_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(moving_average_ii_sptr self, std::string name)"""
        return _blocks_swig10.moving_average_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(moving_average_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.moving_average_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(moving_average_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.moving_average_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(moving_average_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.moving_average_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(moving_average_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.moving_average_ii_sptr_message_subscribers(self, which_port)

# Register moving_average_ii_sptr in _blocks_swig10:
_blocks_swig10.moving_average_ii_sptr_swigregister(moving_average_ii_sptr)


moving_average_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_ii = moving_average_ii.make

class moving_average_ss(object):
    r"""
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(length: "int", scale: "std::int16_t", max_iter: "int"=4096, vlen: "unsigned int"=1) -> "gr::blocks::moving_average< short >::sptr":
        r"""
        make(int length, std::int16_t scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ss_sptr
        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_ss_make(length, scale, max_iter, vlen)

    def length(self) -> "int":
        r"""
        length(moving_average_ss self) -> int
        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_ss_length(self)

    def scale(self) -> "std::int16_t":
        r"""
        scale(moving_average_ss self) -> std::int16_t
        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_ss_scale(self)

    def set_length_and_scale(self, length: "int", scale: "std::int16_t") -> "void":
        r"""
        set_length_and_scale(moving_average_ss self, int length, std::int16_t scale)
        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_ss_set_length_and_scale(self, length, scale)

    def set_length(self, length: "int") -> "void":
        r"""
        set_length(moving_average_ss self, int length)
        Set the length.
        """
        return _blocks_swig10.moving_average_ss_set_length(self, length)

    def set_scale(self, scale: "std::int16_t") -> "void":
        r"""
        set_scale(moving_average_ss self, std::int16_t scale)
        Set the scale factor.
        """
        return _blocks_swig10.moving_average_ss_set_scale(self, scale)
    __swig_destroy__ = _blocks_swig10.delete_moving_average_ss

# Register moving_average_ss in _blocks_swig10:
_blocks_swig10.moving_average_ss_swigregister(moving_average_ss)

def moving_average_ss_make(length: "int", scale: "std::int16_t", max_iter: "int"=4096, vlen: "unsigned int"=1) -> "gr::blocks::moving_average< short >::sptr":
    r"""
    moving_average_ss_make(int length, std::int16_t scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ss_sptr
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """
    return _blocks_swig10.moving_average_ss_make(length, scale, max_iter, vlen)

class moving_average_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::moving_average< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(moving_average_ss_sptr self) -> moving_average_ss_sptr
        __init__(moving_average_ss_sptr self, moving_average_ss p) -> moving_average_ss_sptr
        """
        _blocks_swig10.moving_average_ss_sptr_swiginit(self, _blocks_swig10.new_moving_average_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::moving_average< std::int16_t > *":
        r"""__deref__(moving_average_ss_sptr self) -> moving_average_ss"""
        return _blocks_swig10.moving_average_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_moving_average_ss_sptr

    def make(self, length: "int", scale: "std::int16_t", max_iter: "int"=4096, vlen: "unsigned int"=1) -> "gr::blocks::moving_average< short >::sptr":
        r"""
        make(moving_average_ss_sptr self, int length, std::int16_t scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ss_sptr
        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_ss_sptr_make(self, length, scale, max_iter, vlen)

    def length(self) -> "int":
        r"""
        length(moving_average_ss_sptr self) -> int
        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_ss_sptr_length(self)

    def scale(self) -> "std::int16_t":
        r"""
        scale(moving_average_ss_sptr self) -> std::int16_t
        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_ss_sptr_scale(self)

    def set_length_and_scale(self, length: "int", scale: "std::int16_t") -> "void":
        r"""
        set_length_and_scale(moving_average_ss_sptr self, int length, std::int16_t scale)
        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_ss_sptr_set_length_and_scale(self, length, scale)

    def set_length(self, length: "int") -> "void":
        r"""
        set_length(moving_average_ss_sptr self, int length)
        Set the length.
        """
        return _blocks_swig10.moving_average_ss_sptr_set_length(self, length)

    def set_scale(self, scale: "std::int16_t") -> "void":
        r"""
        set_scale(moving_average_ss_sptr self, std::int16_t scale)
        Set the scale factor.
        """
        return _blocks_swig10.moving_average_ss_sptr_set_scale(self, scale)

    def history(self) -> "unsigned int":
        r"""history(moving_average_ss_sptr self) -> unsigned int"""
        return _blocks_swig10.moving_average_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(moving_average_ss_sptr self, int which, int delay)
        declare_sample_delay(moving_average_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig10.moving_average_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(moving_average_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.moving_average_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(moving_average_ss_sptr self, int multiple)"""
        return _blocks_swig10.moving_average_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(moving_average_ss_sptr self) -> int"""
        return _blocks_swig10.moving_average_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(moving_average_ss_sptr self) -> double"""
        return _blocks_swig10.moving_average_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(moving_average_ss_sptr self) -> uint64_t"""
        return _blocks_swig10.moving_average_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(moving_average_ss_sptr self) -> uint64_t"""
        return _blocks_swig10.moving_average_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(moving_average_ss_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(moving_average_ss_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(moving_average_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.moving_average_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(moving_average_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.moving_average_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(moving_average_ss_sptr self, std::string level)"""
        return _blocks_swig10.moving_average_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(moving_average_ss_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(moving_average_ss_sptr self) -> int"""
        return _blocks_swig10.moving_average_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(moving_average_ss_sptr self, int m)"""
        return _blocks_swig10.moving_average_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(moving_average_ss_sptr self)"""
        return _blocks_swig10.moving_average_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(moving_average_ss_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(moving_average_ss_sptr self, int m)"""
        return _blocks_swig10.moving_average_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(moving_average_ss_sptr self) -> int"""
        return _blocks_swig10.moving_average_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(moving_average_ss_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(moving_average_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.moving_average_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(moving_average_ss_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(moving_average_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.moving_average_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(moving_average_ss_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(moving_average_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(moving_average_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(moving_average_ss_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(moving_average_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(moving_average_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(moving_average_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.moving_average_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(moving_average_ss_sptr self)"""
        return _blocks_swig10.moving_average_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(moving_average_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.moving_average_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(moving_average_ss_sptr self) -> int"""
        return _blocks_swig10.moving_average_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(moving_average_ss_sptr self) -> int"""
        return _blocks_swig10.moving_average_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(moving_average_ss_sptr self, int priority) -> int"""
        return _blocks_swig10.moving_average_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(moving_average_ss_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(moving_average_ss_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(moving_average_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(moving_average_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(moving_average_ss_sptr self) -> long"""
        return _blocks_swig10.moving_average_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(moving_average_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.moving_average_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(moving_average_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.moving_average_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(moving_average_ss_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(moving_average_ss_sptr self, std::string name)"""
        return _blocks_swig10.moving_average_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(moving_average_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.moving_average_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(moving_average_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.moving_average_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(moving_average_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.moving_average_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(moving_average_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.moving_average_ss_sptr_message_subscribers(self, which_port)

# Register moving_average_ss_sptr in _blocks_swig10:
_blocks_swig10.moving_average_ss_sptr_swigregister(moving_average_ss_sptr)


moving_average_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_ss = moving_average_ss.make

class nlog10_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::nlog10_ff > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(nlog10_ff_sptr self) -> nlog10_ff_sptr
        __init__(nlog10_ff_sptr self, nlog10_ff p) -> nlog10_ff_sptr
        """
        _blocks_swig10.nlog10_ff_sptr_swiginit(self, _blocks_swig10.new_nlog10_ff_sptr(*args))

    def __deref__(self) -> "gr::blocks::nlog10_ff *":
        r"""__deref__(nlog10_ff_sptr self) -> nlog10_ff"""
        return _blocks_swig10.nlog10_ff_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_nlog10_ff_sptr

    def make(self, n: "float"=1.0, vlen: "size_t"=1, k: "float"=0.0) -> "gr::blocks::nlog10_ff::sptr":
        r"""
        make(nlog10_ff_sptr self, float n=1.0, size_t vlen=1, float k=0.0) -> nlog10_ff_sptr
        output = n*log10(input) + k

        Constructor Specific Documentation:

        Make an instance of an nlog10_ff block.

        Args:
            n : Scalar multiplicative constant
            vlen : Input vector length
            k : Scalar additive constant
        """
        return _blocks_swig10.nlog10_ff_sptr_make(self, n, vlen, k)

    def history(self) -> "unsigned int":
        r"""history(nlog10_ff_sptr self) -> unsigned int"""
        return _blocks_swig10.nlog10_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(nlog10_ff_sptr self, int which, int delay)
        declare_sample_delay(nlog10_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig10.nlog10_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(nlog10_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.nlog10_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(nlog10_ff_sptr self, int multiple)"""
        return _blocks_swig10.nlog10_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(nlog10_ff_sptr self) -> int"""
        return _blocks_swig10.nlog10_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(nlog10_ff_sptr self) -> double"""
        return _blocks_swig10.nlog10_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(nlog10_ff_sptr self) -> uint64_t"""
        return _blocks_swig10.nlog10_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(nlog10_ff_sptr self) -> uint64_t"""
        return _blocks_swig10.nlog10_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(nlog10_ff_sptr self) -> bool"""
        return _blocks_swig10.nlog10_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(nlog10_ff_sptr self) -> bool"""
        return _blocks_swig10.nlog10_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(nlog10_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.nlog10_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(nlog10_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.nlog10_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(nlog10_ff_sptr self, std::string level)"""
        return _blocks_swig10.nlog10_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(nlog10_ff_sptr self) -> std::string"""
        return _blocks_swig10.nlog10_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(nlog10_ff_sptr self) -> int"""
        return _blocks_swig10.nlog10_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(nlog10_ff_sptr self, int m)"""
        return _blocks_swig10.nlog10_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(nlog10_ff_sptr self)"""
        return _blocks_swig10.nlog10_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(nlog10_ff_sptr self) -> bool"""
        return _blocks_swig10.nlog10_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(nlog10_ff_sptr self, int m)"""
        return _blocks_swig10.nlog10_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(nlog10_ff_sptr self) -> int"""
        return _blocks_swig10.nlog10_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(nlog10_ff_sptr self, int i) -> long"""
        return _blocks_swig10.nlog10_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(nlog10_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(nlog10_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.nlog10_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(nlog10_ff_sptr self, int i) -> long"""
        return _blocks_swig10.nlog10_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(nlog10_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(nlog10_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.nlog10_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(nlog10_ff_sptr self, int which) -> float
        pc_input_buffers_full(nlog10_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.nlog10_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(nlog10_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(nlog10_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.nlog10_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(nlog10_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(nlog10_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.nlog10_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(nlog10_ff_sptr self, int which) -> float
        pc_output_buffers_full(nlog10_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.nlog10_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(nlog10_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(nlog10_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.nlog10_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(nlog10_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(nlog10_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.nlog10_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(nlog10_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.nlog10_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(nlog10_ff_sptr self)"""
        return _blocks_swig10.nlog10_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(nlog10_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.nlog10_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(nlog10_ff_sptr self) -> int"""
        return _blocks_swig10.nlog10_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(nlog10_ff_sptr self) -> int"""
        return _blocks_swig10.nlog10_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(nlog10_ff_sptr self, int priority) -> int"""
        return _blocks_swig10.nlog10_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(nlog10_ff_sptr self) -> std::string"""
        return _blocks_swig10.nlog10_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(nlog10_ff_sptr self) -> std::string"""
        return _blocks_swig10.nlog10_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(nlog10_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.nlog10_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(nlog10_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.nlog10_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(nlog10_ff_sptr self) -> long"""
        return _blocks_swig10.nlog10_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(nlog10_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.nlog10_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(nlog10_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.nlog10_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(nlog10_ff_sptr self) -> std::string"""
        return _blocks_swig10.nlog10_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(nlog10_ff_sptr self, std::string name)"""
        return _blocks_swig10.nlog10_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(nlog10_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.nlog10_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(nlog10_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.nlog10_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(nlog10_ff_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.nlog10_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(nlog10_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.nlog10_ff_sptr_message_subscribers(self, which_port)

# Register nlog10_ff_sptr in _blocks_swig10:
_blocks_swig10.nlog10_ff_sptr_swigregister(nlog10_ff_sptr)


nlog10_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
nlog10_ff = nlog10_ff.make;

class not_bb(object):
    r"""
    output = ~input

    bitwise boolean not of input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::not_blk< unsigned char >::sptr":
        r"""
        make(size_t vlen=1) -> not_bb_sptr
        output = ~input

        bitwise boolean not of input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.not_bb_make(vlen)
    __swig_destroy__ = _blocks_swig10.delete_not_bb

# Register not_bb in _blocks_swig10:
_blocks_swig10.not_bb_swigregister(not_bb)

def not_bb_make(vlen: "size_t"=1) -> "gr::blocks::not_blk< unsigned char >::sptr":
    r"""
    not_bb_make(size_t vlen=1) -> not_bb_sptr
    output = ~input

    bitwise boolean not of input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig10.not_bb_make(vlen)

class not_bb_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::not_blk< std::uint8_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(not_bb_sptr self) -> not_bb_sptr
        __init__(not_bb_sptr self, not_bb p) -> not_bb_sptr
        """
        _blocks_swig10.not_bb_sptr_swiginit(self, _blocks_swig10.new_not_bb_sptr(*args))

    def __deref__(self) -> "gr::blocks::not_blk< std::uint8_t > *":
        r"""__deref__(not_bb_sptr self) -> not_bb"""
        return _blocks_swig10.not_bb_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_not_bb_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::not_blk< unsigned char >::sptr":
        r"""
        make(not_bb_sptr self, size_t vlen=1) -> not_bb_sptr
        output = ~input

        bitwise boolean not of input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.not_bb_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(not_bb_sptr self) -> unsigned int"""
        return _blocks_swig10.not_bb_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(not_bb_sptr self, int which, int delay)
        declare_sample_delay(not_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig10.not_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(not_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.not_bb_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(not_bb_sptr self, int multiple)"""
        return _blocks_swig10.not_bb_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(not_bb_sptr self) -> int"""
        return _blocks_swig10.not_bb_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(not_bb_sptr self) -> double"""
        return _blocks_swig10.not_bb_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(not_bb_sptr self) -> uint64_t"""
        return _blocks_swig10.not_bb_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(not_bb_sptr self) -> uint64_t"""
        return _blocks_swig10.not_bb_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(not_bb_sptr self) -> bool"""
        return _blocks_swig10.not_bb_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(not_bb_sptr self) -> bool"""
        return _blocks_swig10.not_bb_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(not_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.not_bb_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(not_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.not_bb_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(not_bb_sptr self, std::string level)"""
        return _blocks_swig10.not_bb_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(not_bb_sptr self) -> std::string"""
        return _blocks_swig10.not_bb_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(not_bb_sptr self) -> int"""
        return _blocks_swig10.not_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(not_bb_sptr self, int m)"""
        return _blocks_swig10.not_bb_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(not_bb_sptr self)"""
        return _blocks_swig10.not_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(not_bb_sptr self) -> bool"""
        return _blocks_swig10.not_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(not_bb_sptr self, int m)"""
        return _blocks_swig10.not_bb_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(not_bb_sptr self) -> int"""
        return _blocks_swig10.not_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(not_bb_sptr self, int i) -> long"""
        return _blocks_swig10.not_bb_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(not_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(not_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.not_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(not_bb_sptr self, int i) -> long"""
        return _blocks_swig10.not_bb_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(not_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(not_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.not_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(not_bb_sptr self, int which) -> float
        pc_input_buffers_full(not_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(not_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(not_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(not_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(not_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(not_bb_sptr self, int which) -> float
        pc_output_buffers_full(not_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(not_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(not_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(not_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(not_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(not_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.not_bb_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(not_bb_sptr self)"""
        return _blocks_swig10.not_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(not_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.not_bb_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(not_bb_sptr self) -> int"""
        return _blocks_swig10.not_bb_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(not_bb_sptr self) -> int"""
        return _blocks_swig10.not_bb_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(not_bb_sptr self, int priority) -> int"""
        return _blocks_swig10.not_bb_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(not_bb_sptr self) -> std::string"""
        return _blocks_swig10.not_bb_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(not_bb_sptr self) -> std::string"""
        return _blocks_swig10.not_bb_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(not_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.not_bb_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(not_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.not_bb_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(not_bb_sptr self) -> long"""
        return _blocks_swig10.not_bb_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(not_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.not_bb_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(not_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.not_bb_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(not_bb_sptr self) -> std::string"""
        return _blocks_swig10.not_bb_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(not_bb_sptr self, std::string name)"""
        return _blocks_swig10.not_bb_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(not_bb_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.not_bb_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(not_bb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.not_bb_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(not_bb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.not_bb_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(not_bb_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.not_bb_sptr_message_subscribers(self, which_port)

# Register not_bb_sptr in _blocks_swig10:
_blocks_swig10.not_bb_sptr_swigregister(not_bb_sptr)


not_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
not_bb = not_bb.make

class not_ss(object):
    r"""
    output = ~input

    bitwise boolean not of input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::not_blk< short >::sptr":
        r"""
        make(size_t vlen=1) -> not_ss_sptr
        output = ~input

        bitwise boolean not of input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.not_ss_make(vlen)
    __swig_destroy__ = _blocks_swig10.delete_not_ss

# Register not_ss in _blocks_swig10:
_blocks_swig10.not_ss_swigregister(not_ss)

def not_ss_make(vlen: "size_t"=1) -> "gr::blocks::not_blk< short >::sptr":
    r"""
    not_ss_make(size_t vlen=1) -> not_ss_sptr
    output = ~input

    bitwise boolean not of input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig10.not_ss_make(vlen)

class not_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::not_blk< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(not_ss_sptr self) -> not_ss_sptr
        __init__(not_ss_sptr self, not_ss p) -> not_ss_sptr
        """
        _blocks_swig10.not_ss_sptr_swiginit(self, _blocks_swig10.new_not_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::not_blk< std::int16_t > *":
        r"""__deref__(not_ss_sptr self) -> not_ss"""
        return _blocks_swig10.not_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_not_ss_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::not_blk< short >::sptr":
        r"""
        make(not_ss_sptr self, size_t vlen=1) -> not_ss_sptr
        output = ~input

        bitwise boolean not of input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.not_ss_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(not_ss_sptr self) -> unsigned int"""
        return _blocks_swig10.not_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(not_ss_sptr self, int which, int delay)
        declare_sample_delay(not_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig10.not_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(not_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.not_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(not_ss_sptr self, int multiple)"""
        return _blocks_swig10.not_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(not_ss_sptr self) -> int"""
        return _blocks_swig10.not_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(not_ss_sptr self) -> double"""
        return _blocks_swig10.not_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(not_ss_sptr self) -> uint64_t"""
        return _blocks_swig10.not_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(not_ss_sptr self) -> uint64_t"""
        return _blocks_swig10.not_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(not_ss_sptr self) -> bool"""
        return _blocks_swig10.not_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(not_ss_sptr self) -> bool"""
        return _blocks_swig10.not_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(not_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.not_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(not_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.not_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(not_ss_sptr self, std::string level)"""
        return _blocks_swig10.not_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(not_ss_sptr self) -> std::string"""
        return _blocks_swig10.not_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(not_ss_sptr self) -> int"""
        return _blocks_swig10.not_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(not_ss_sptr self, int m)"""
        return _blocks_swig10.not_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(not_ss_sptr self)"""
        return _blocks_swig10.not_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(not_ss_sptr self) -> bool"""
        return _blocks_swig10.not_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(not_ss_sptr self, int m)"""
        return _blocks_swig10.not_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(not_ss_sptr self) -> int"""
        return _blocks_swig10.not_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(not_ss_sptr self, int i) -> long"""
        return _blocks_swig10.not_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(not_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(not_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.not_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(not_ss_sptr self, int i) -> long"""
        return _blocks_swig10.not_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(not_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(not_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.not_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(not_ss_sptr self, int which) -> float
        pc_input_buffers_full(not_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(not_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(not_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(not_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(not_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(not_ss_sptr self, int which) -> float
        pc_output_buffers_full(not_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(not_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(not_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(not_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(not_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(not_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.not_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(not_ss_sptr self)"""
        return _blocks_swig10.not_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(not_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.not_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(not_ss_sptr self) -> int"""
        return _blocks_swig10.not_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(not_ss_sptr self) -> int"""
        return _blocks_swig10.not_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(not_ss_sptr self, int priority) -> int"""
        return _blocks_swig10.not_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(not_ss_sptr self) -> std::string"""
        return _blocks_swig10.not_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(not_ss_sptr self) -> std::string"""
        return _blocks_swig10.not_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(not_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.not_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(not_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.not_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(not_ss_sptr self) -> long"""
        return _blocks_swig10.not_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(not_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.not_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(not_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.not_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(not_ss_sptr self) -> std::string"""
        return _blocks_swig10.not_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(not_ss_sptr self, std::string name)"""
        return _blocks_swig10.not_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(not_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.not_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(not_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.not_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(not_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.not_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(not_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.not_ss_sptr_message_subscribers(self, which_port)

# Register not_ss_sptr in _blocks_swig10:
_blocks_swig10.not_ss_sptr_swigregister(not_ss_sptr)


not_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
not_ss = not_ss.make

class not_ii(object):
    r"""
    output = ~input

    bitwise boolean not of input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::not_blk< int >::sptr":
        r"""
        make(size_t vlen=1) -> not_ii_sptr
        output = ~input

        bitwise boolean not of input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.not_ii_make(vlen)
    __swig_destroy__ = _blocks_swig10.delete_not_ii

# Register not_ii in _blocks_swig10:
_blocks_swig10.not_ii_swigregister(not_ii)

def not_ii_make(vlen: "size_t"=1) -> "gr::blocks::not_blk< int >::sptr":
    r"""
    not_ii_make(size_t vlen=1) -> not_ii_sptr
    output = ~input

    bitwise boolean not of input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig10.not_ii_make(vlen)

class not_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::not_blk< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(not_ii_sptr self) -> not_ii_sptr
        __init__(not_ii_sptr self, not_ii p) -> not_ii_sptr
        """
        _blocks_swig10.not_ii_sptr_swiginit(self, _blocks_swig10.new_not_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::not_blk< std::int32_t > *":
        r"""__deref__(not_ii_sptr self) -> not_ii"""
        return _blocks_swig10.not_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_not_ii_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::not_blk< int >::sptr":
        r"""
        make(not_ii_sptr self, size_t vlen=1) -> not_ii_sptr
        output = ~input

        bitwise boolean not of input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.not_ii_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(not_ii_sptr self) -> unsigned int"""
        return _blocks_swig10.not_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(not_ii_sptr self, int which, int delay)
        declare_sample_delay(not_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig10.not_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(not_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.not_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(not_ii_sptr self, int multiple)"""
        return _blocks_swig10.not_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(not_ii_sptr self) -> int"""
        return _blocks_swig10.not_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(not_ii_sptr self) -> double"""
        return _blocks_swig10.not_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(not_ii_sptr self) -> uint64_t"""
        return _blocks_swig10.not_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(not_ii_sptr self) -> uint64_t"""
        return _blocks_swig10.not_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(not_ii_sptr self) -> bool"""
        return _blocks_swig10.not_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(not_ii_sptr self) -> bool"""
        return _blocks_swig10.not_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(not_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.not_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(not_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.not_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(not_ii_sptr self, std::string level)"""
        return _blocks_swig10.not_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(not_ii_sptr self) -> std::string"""
        return _blocks_swig10.not_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(not_ii_sptr self) -> int"""
        return _blocks_swig10.not_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(not_ii_sptr self, int m)"""
        return _blocks_swig10.not_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(not_ii_sptr self)"""
        return _blocks_swig10.not_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(not_ii_sptr self) -> bool"""
        return _blocks_swig10.not_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(not_ii_sptr self, int m)"""
        return _blocks_swig10.not_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(not_ii_sptr self) -> int"""
        return _blocks_swig10.not_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(not_ii_sptr self, int i) -> long"""
        return _blocks_swig10.not_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(not_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(not_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.not_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(not_ii_sptr self, int i) -> long"""
        return _blocks_swig10.not_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(not_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(not_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.not_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(not_ii_sptr self, int which) -> float
        pc_input_buffers_full(not_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(not_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(not_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(not_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(not_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(not_ii_sptr self, int which) -> float
        pc_output_buffers_full(not_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(not_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(not_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(not_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(not_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(not_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.not_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(not_ii_sptr self)"""
        return _blocks_swig10.not_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(not_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.not_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(not_ii_sptr self) -> int"""
        return _blocks_swig10.not_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(not_ii_sptr self) -> int"""
        return _blocks_swig10.not_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(not_ii_sptr self, int priority) -> int"""
        return _blocks_swig10.not_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(not_ii_sptr self) -> std::string"""
        return _blocks_swig10.not_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(not_ii_sptr self) -> std::string"""
        return _blocks_swig10.not_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(not_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.not_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(not_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.not_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(not_ii_sptr self) -> long"""
        return _blocks_swig10.not_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(not_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.not_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(not_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.not_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(not_ii_sptr self) -> std::string"""
        return _blocks_swig10.not_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(not_ii_sptr self, std::string name)"""
        return _blocks_swig10.not_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(not_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.not_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(not_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.not_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(not_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.not_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(not_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.not_ii_sptr_message_subscribers(self, which_port)

# Register not_ii_sptr in _blocks_swig10:
_blocks_swig10.not_ii_sptr_swigregister(not_ii_sptr)


not_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
not_ii = not_ii.make

class or_bb(object):
    r"""
    output = input_0 | input_1 | , ... | input_N)

    Bitwise boolean or across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::or_blk< char >::sptr":
        r"""
        make(size_t vlen=1) -> or_bb_sptr
        output = input_0 | input_1 | , ... | input_N)

        Bitwise boolean or across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.or_bb_make(vlen)
    __swig_destroy__ = _blocks_swig10.delete_or_bb

# Register or_bb in _blocks_swig10:
_blocks_swig10.or_bb_swigregister(or_bb)

def or_bb_make(vlen: "size_t"=1) -> "gr::blocks::or_blk< char >::sptr":
    r"""
    or_bb_make(size_t vlen=1) -> or_bb_sptr
    output = input_0 | input_1 | , ... | input_N)

    Bitwise boolean or across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig10.or_bb_make(vlen)

class or_bb_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::or_blk< char > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(or_bb_sptr self) -> or_bb_sptr
        __init__(or_bb_sptr self, or_bb p) -> or_bb_sptr
        """
        _blocks_swig10.or_bb_sptr_swiginit(self, _blocks_swig10.new_or_bb_sptr(*args))

    def __deref__(self) -> "gr::blocks::or_blk< char > *":
        r"""__deref__(or_bb_sptr self) -> or_bb"""
        return _blocks_swig10.or_bb_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_or_bb_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::or_blk< char >::sptr":
        r"""
        make(or_bb_sptr self, size_t vlen=1) -> or_bb_sptr
        output = input_0 | input_1 | , ... | input_N)

        Bitwise boolean or across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.or_bb_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(or_bb_sptr self) -> unsigned int"""
        return _blocks_swig10.or_bb_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(or_bb_sptr self, int which, int delay)
        declare_sample_delay(or_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig10.or_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(or_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.or_bb_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(or_bb_sptr self, int multiple)"""
        return _blocks_swig10.or_bb_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(or_bb_sptr self) -> int"""
        return _blocks_swig10.or_bb_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(or_bb_sptr self) -> double"""
        return _blocks_swig10.or_bb_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(or_bb_sptr self) -> uint64_t"""
        return _blocks_swig10.or_bb_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(or_bb_sptr self) -> uint64_t"""
        return _blocks_swig10.or_bb_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(or_bb_sptr self) -> bool"""
        return _blocks_swig10.or_bb_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(or_bb_sptr self) -> bool"""
        return _blocks_swig10.or_bb_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(or_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.or_bb_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(or_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.or_bb_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(or_bb_sptr self, std::string level)"""
        return _blocks_swig10.or_bb_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(or_bb_sptr self) -> std::string"""
        return _blocks_swig10.or_bb_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(or_bb_sptr self) -> int"""
        return _blocks_swig10.or_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(or_bb_sptr self, int m)"""
        return _blocks_swig10.or_bb_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(or_bb_sptr self)"""
        return _blocks_swig10.or_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(or_bb_sptr self) -> bool"""
        return _blocks_swig10.or_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(or_bb_sptr self, int m)"""
        return _blocks_swig10.or_bb_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(or_bb_sptr self) -> int"""
        return _blocks_swig10.or_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(or_bb_sptr self, int i) -> long"""
        return _blocks_swig10.or_bb_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(or_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(or_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.or_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(or_bb_sptr self, int i) -> long"""
        return _blocks_swig10.or_bb_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(or_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(or_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.or_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(or_bb_sptr self, int which) -> float
        pc_input_buffers_full(or_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(or_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(or_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(or_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(or_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(or_bb_sptr self, int which) -> float
        pc_output_buffers_full(or_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(or_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(or_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(or_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(or_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(or_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.or_bb_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(or_bb_sptr self)"""
        return _blocks_swig10.or_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(or_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.or_bb_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(or_bb_sptr self) -> int"""
        return _blocks_swig10.or_bb_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(or_bb_sptr self) -> int"""
        return _blocks_swig10.or_bb_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(or_bb_sptr self, int priority) -> int"""
        return _blocks_swig10.or_bb_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(or_bb_sptr self) -> std::string"""
        return _blocks_swig10.or_bb_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(or_bb_sptr self) -> std::string"""
        return _blocks_swig10.or_bb_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(or_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.or_bb_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(or_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.or_bb_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(or_bb_sptr self) -> long"""
        return _blocks_swig10.or_bb_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(or_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.or_bb_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(or_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.or_bb_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(or_bb_sptr self) -> std::string"""
        return _blocks_swig10.or_bb_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(or_bb_sptr self, std::string name)"""
        return _blocks_swig10.or_bb_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(or_bb_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.or_bb_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(or_bb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.or_bb_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(or_bb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.or_bb_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(or_bb_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.or_bb_sptr_message_subscribers(self, which_port)

# Register or_bb_sptr in _blocks_swig10:
_blocks_swig10.or_bb_sptr_swigregister(or_bb_sptr)


or_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
or_bb = or_bb.make

class or_ss(object):
    r"""
    output = input_0 | input_1 | , ... | input_N)

    Bitwise boolean or across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::or_blk< short >::sptr":
        r"""
        make(size_t vlen=1) -> or_ss_sptr
        output = input_0 | input_1 | , ... | input_N)

        Bitwise boolean or across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.or_ss_make(vlen)
    __swig_destroy__ = _blocks_swig10.delete_or_ss

# Register or_ss in _blocks_swig10:
_blocks_swig10.or_ss_swigregister(or_ss)

def or_ss_make(vlen: "size_t"=1) -> "gr::blocks::or_blk< short >::sptr":
    r"""
    or_ss_make(size_t vlen=1) -> or_ss_sptr
    output = input_0 | input_1 | , ... | input_N)

    Bitwise boolean or across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig10.or_ss_make(vlen)

class or_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::or_blk< short > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(or_ss_sptr self) -> or_ss_sptr
        __init__(or_ss_sptr self, or_ss p) -> or_ss_sptr
        """
        _blocks_swig10.or_ss_sptr_swiginit(self, _blocks_swig10.new_or_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::or_blk< short > *":
        r"""__deref__(or_ss_sptr self) -> or_ss"""
        return _blocks_swig10.or_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_or_ss_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::or_blk< short >::sptr":
        r"""
        make(or_ss_sptr self, size_t vlen=1) -> or_ss_sptr
        output = input_0 | input_1 | , ... | input_N)

        Bitwise boolean or across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.or_ss_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(or_ss_sptr self) -> unsigned int"""
        return _blocks_swig10.or_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(or_ss_sptr self, int which, int delay)
        declare_sample_delay(or_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig10.or_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(or_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.or_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(or_ss_sptr self, int multiple)"""
        return _blocks_swig10.or_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(or_ss_sptr self) -> int"""
        return _blocks_swig10.or_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(or_ss_sptr self) -> double"""
        return _blocks_swig10.or_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(or_ss_sptr self) -> uint64_t"""
        return _blocks_swig10.or_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(or_ss_sptr self) -> uint64_t"""
        return _blocks_swig10.or_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(or_ss_sptr self) -> bool"""
        return _blocks_swig10.or_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(or_ss_sptr self) -> bool"""
        return _blocks_swig10.or_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(or_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.or_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(or_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.or_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(or_ss_sptr self, std::string level)"""
        return _blocks_swig10.or_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(or_ss_sptr self) -> std::string"""
        return _blocks_swig10.or_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(or_ss_sptr self) -> int"""
        return _blocks_swig10.or_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(or_ss_sptr self, int m)"""
        return _blocks_swig10.or_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(or_ss_sptr self)"""
        return _blocks_swig10.or_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(or_ss_sptr self) -> bool"""
        return _blocks_swig10.or_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(or_ss_sptr self, int m)"""
        return _blocks_swig10.or_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(or_ss_sptr self) -> int"""
        return _blocks_swig10.or_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(or_ss_sptr self, int i) -> long"""
        return _blocks_swig10.or_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(or_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(or_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.or_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(or_ss_sptr self, int i) -> long"""
        return _blocks_swig10.or_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(or_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(or_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.or_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(or_ss_sptr self, int which) -> float
        pc_input_buffers_full(or_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(or_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(or_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(or_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(or_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(or_ss_sptr self, int which) -> float
        pc_output_buffers_full(or_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(or_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(or_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(or_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(or_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(or_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.or_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(or_ss_sptr self)"""
        return _blocks_swig10.or_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(or_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.or_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(or_ss_sptr self) -> int"""
        return _blocks_swig10.or_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(or_ss_sptr self) -> int"""
        return _blocks_swig10.or_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(or_ss_sptr self, int priority) -> int"""
        return _blocks_swig10.or_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(or_ss_sptr self) -> std::string"""
        return _blocks_swig10.or_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(or_ss_sptr self) -> std::string"""
        return _blocks_swig10.or_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(or_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.or_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(or_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.or_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(or_ss_sptr self) -> long"""
        return _blocks_swig10.or_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(or_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.or_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(or_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.or_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(or_ss_sptr self) -> std::string"""
        return _blocks_swig10.or_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(or_ss_sptr self, std::string name)"""
        return _blocks_swig10.or_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(or_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.or_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(or_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.or_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(or_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.or_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(or_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.or_ss_sptr_message_subscribers(self, which_port)

# Register or_ss_sptr in _blocks_swig10:
_blocks_swig10.or_ss_sptr_swigregister(or_ss_sptr)


or_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
or_ss = or_ss.make

class or_ii(object):
    r"""
    output = input_0 | input_1 | , ... | input_N)

    Bitwise boolean or across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vlen: "size_t"=1) -> "gr::blocks::or_blk< int >::sptr":
        r"""
        make(size_t vlen=1) -> or_ii_sptr
        output = input_0 | input_1 | , ... | input_N)

        Bitwise boolean or across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.or_ii_make(vlen)
    __swig_destroy__ = _blocks_swig10.delete_or_ii

# Register or_ii in _blocks_swig10:
_blocks_swig10.or_ii_swigregister(or_ii)

def or_ii_make(vlen: "size_t"=1) -> "gr::blocks::or_blk< int >::sptr":
    r"""
    or_ii_make(size_t vlen=1) -> or_ii_sptr
    output = input_0 | input_1 | , ... | input_N)

    Bitwise boolean or across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    return _blocks_swig10.or_ii_make(vlen)

class or_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::or_blk< int > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(or_ii_sptr self) -> or_ii_sptr
        __init__(or_ii_sptr self, or_ii p) -> or_ii_sptr
        """
        _blocks_swig10.or_ii_sptr_swiginit(self, _blocks_swig10.new_or_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::or_blk< int > *":
        r"""__deref__(or_ii_sptr self) -> or_ii"""
        return _blocks_swig10.or_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_or_ii_sptr

    def make(self, vlen: "size_t"=1) -> "gr::blocks::or_blk< int >::sptr":
        r"""
        make(or_ii_sptr self, size_t vlen=1) -> or_ii_sptr
        output = input_0 | input_1 | , ... | input_N)

        Bitwise boolean or across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.or_ii_sptr_make(self, vlen)

    def history(self) -> "unsigned int":
        r"""history(or_ii_sptr self) -> unsigned int"""
        return _blocks_swig10.or_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(or_ii_sptr self, int which, int delay)
        declare_sample_delay(or_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig10.or_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(or_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.or_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(or_ii_sptr self, int multiple)"""
        return _blocks_swig10.or_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(or_ii_sptr self) -> int"""
        return _blocks_swig10.or_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(or_ii_sptr self) -> double"""
        return _blocks_swig10.or_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(or_ii_sptr self) -> uint64_t"""
        return _blocks_swig10.or_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(or_ii_sptr self) -> uint64_t"""
        return _blocks_swig10.or_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(or_ii_sptr self) -> bool"""
        return _blocks_swig10.or_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(or_ii_sptr self) -> bool"""
        return _blocks_swig10.or_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(or_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.or_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(or_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.or_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(or_ii_sptr self, std::string level)"""
        return _blocks_swig10.or_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(or_ii_sptr self) -> std::string"""
        return _blocks_swig10.or_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(or_ii_sptr self) -> int"""
        return _blocks_swig10.or_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(or_ii_sptr self, int m)"""
        return _blocks_swig10.or_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(or_ii_sptr self)"""
        return _blocks_swig10.or_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(or_ii_sptr self) -> bool"""
        return _blocks_swig10.or_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(or_ii_sptr self, int m)"""
        return _blocks_swig10.or_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(or_ii_sptr self) -> int"""
        return _blocks_swig10.or_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(or_ii_sptr self, int i) -> long"""
        return _blocks_swig10.or_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(or_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(or_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.or_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(or_ii_sptr self, int i) -> long"""
        return _blocks_swig10.or_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(or_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(or_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.or_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(or_ii_sptr self, int which) -> float
        pc_input_buffers_full(or_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(or_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(or_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(or_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(or_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(or_ii_sptr self, int which) -> float
        pc_output_buffers_full(or_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(or_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(or_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(or_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(or_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(or_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.or_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(or_ii_sptr self)"""
        return _blocks_swig10.or_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(or_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.or_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(or_ii_sptr self) -> int"""
        return _blocks_swig10.or_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(or_ii_sptr self) -> int"""
        return _blocks_swig10.or_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(or_ii_sptr self, int priority) -> int"""
        return _blocks_swig10.or_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(or_ii_sptr self) -> std::string"""
        return _blocks_swig10.or_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(or_ii_sptr self) -> std::string"""
        return _blocks_swig10.or_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(or_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.or_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(or_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.or_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(or_ii_sptr self) -> long"""
        return _blocks_swig10.or_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(or_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.or_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(or_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.or_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(or_ii_sptr self) -> std::string"""
        return _blocks_swig10.or_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(or_ii_sptr self, std::string name)"""
        return _blocks_swig10.or_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(or_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.or_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(or_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.or_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(or_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.or_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(or_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.or_ii_sptr_message_subscribers(self, which_port)

# Register or_ii_sptr in _blocks_swig10:
_blocks_swig10.or_ii_sptr_swigregister(or_ii_sptr)


or_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
or_ii = or_ii.make

class patterned_interleaver_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::patterned_interleaver > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(patterned_interleaver_sptr self) -> patterned_interleaver_sptr
        __init__(patterned_interleaver_sptr self, patterned_interleaver p) -> patterned_interleaver_sptr
        """
        _blocks_swig10.patterned_interleaver_sptr_swiginit(self, _blocks_swig10.new_patterned_interleaver_sptr(*args))

    def __deref__(self) -> "gr::blocks::patterned_interleaver *":
        r"""__deref__(patterned_interleaver_sptr self) -> patterned_interleaver"""
        return _blocks_swig10.patterned_interleaver_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_patterned_interleaver_sptr

    def make(self, itemsize: "size_t", pattern: "std::vector< int,std::allocator< int > >") -> "gr::blocks::patterned_interleaver::sptr":
        r"""
        make(patterned_interleaver_sptr self, size_t itemsize, std::vector< int,std::allocator< int > > pattern) -> patterned_interleaver_sptr
        Interleave items based on the provided vector .

        Constructor Specific Documentation:

        Make a patterned interleaver block.

        Args:
            itemsize : stream itemsize
            pattern : vector that represents the interleaving pattern
        """
        return _blocks_swig10.patterned_interleaver_sptr_make(self, itemsize, pattern)

    def history(self) -> "unsigned int":
        r"""history(patterned_interleaver_sptr self) -> unsigned int"""
        return _blocks_swig10.patterned_interleaver_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(patterned_interleaver_sptr self, int which, int delay)
        declare_sample_delay(patterned_interleaver_sptr self, unsigned int delay)
        """
        return _blocks_swig10.patterned_interleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(patterned_interleaver_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.patterned_interleaver_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(patterned_interleaver_sptr self, int multiple)"""
        return _blocks_swig10.patterned_interleaver_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(patterned_interleaver_sptr self) -> int"""
        return _blocks_swig10.patterned_interleaver_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(patterned_interleaver_sptr self) -> double"""
        return _blocks_swig10.patterned_interleaver_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(patterned_interleaver_sptr self) -> uint64_t"""
        return _blocks_swig10.patterned_interleaver_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(patterned_interleaver_sptr self) -> uint64_t"""
        return _blocks_swig10.patterned_interleaver_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(patterned_interleaver_sptr self) -> bool"""
        return _blocks_swig10.patterned_interleaver_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(patterned_interleaver_sptr self) -> bool"""
        return _blocks_swig10.patterned_interleaver_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(patterned_interleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.patterned_interleaver_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(patterned_interleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.patterned_interleaver_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(patterned_interleaver_sptr self, std::string level)"""
        return _blocks_swig10.patterned_interleaver_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(patterned_interleaver_sptr self) -> std::string"""
        return _blocks_swig10.patterned_interleaver_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(patterned_interleaver_sptr self) -> int"""
        return _blocks_swig10.patterned_interleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(patterned_interleaver_sptr self, int m)"""
        return _blocks_swig10.patterned_interleaver_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(patterned_interleaver_sptr self)"""
        return _blocks_swig10.patterned_interleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(patterned_interleaver_sptr self) -> bool"""
        return _blocks_swig10.patterned_interleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(patterned_interleaver_sptr self, int m)"""
        return _blocks_swig10.patterned_interleaver_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(patterned_interleaver_sptr self) -> int"""
        return _blocks_swig10.patterned_interleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(patterned_interleaver_sptr self, int i) -> long"""
        return _blocks_swig10.patterned_interleaver_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(patterned_interleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(patterned_interleaver_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.patterned_interleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(patterned_interleaver_sptr self, int i) -> long"""
        return _blocks_swig10.patterned_interleaver_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(patterned_interleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(patterned_interleaver_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.patterned_interleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(patterned_interleaver_sptr self, int which) -> float
        pc_input_buffers_full(patterned_interleaver_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.patterned_interleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(patterned_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(patterned_interleaver_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.patterned_interleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(patterned_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(patterned_interleaver_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.patterned_interleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(patterned_interleaver_sptr self, int which) -> float
        pc_output_buffers_full(patterned_interleaver_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.patterned_interleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(patterned_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(patterned_interleaver_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.patterned_interleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(patterned_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(patterned_interleaver_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.patterned_interleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(patterned_interleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.patterned_interleaver_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(patterned_interleaver_sptr self)"""
        return _blocks_swig10.patterned_interleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(patterned_interleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.patterned_interleaver_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(patterned_interleaver_sptr self) -> int"""
        return _blocks_swig10.patterned_interleaver_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(patterned_interleaver_sptr self) -> int"""
        return _blocks_swig10.patterned_interleaver_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(patterned_interleaver_sptr self, int priority) -> int"""
        return _blocks_swig10.patterned_interleaver_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(patterned_interleaver_sptr self) -> std::string"""
        return _blocks_swig10.patterned_interleaver_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(patterned_interleaver_sptr self) -> std::string"""
        return _blocks_swig10.patterned_interleaver_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(patterned_interleaver_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.patterned_interleaver_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(patterned_interleaver_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.patterned_interleaver_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(patterned_interleaver_sptr self) -> long"""
        return _blocks_swig10.patterned_interleaver_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(patterned_interleaver_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.patterned_interleaver_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(patterned_interleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.patterned_interleaver_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(patterned_interleaver_sptr self) -> std::string"""
        return _blocks_swig10.patterned_interleaver_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(patterned_interleaver_sptr self, std::string name)"""
        return _blocks_swig10.patterned_interleaver_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(patterned_interleaver_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.patterned_interleaver_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(patterned_interleaver_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.patterned_interleaver_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(patterned_interleaver_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.patterned_interleaver_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(patterned_interleaver_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.patterned_interleaver_sptr_message_subscribers(self, which_port)

# Register patterned_interleaver_sptr in _blocks_swig10:
_blocks_swig10.patterned_interleaver_sptr_swigregister(patterned_interleaver_sptr)


patterned_interleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
patterned_interleaver = patterned_interleaver.make;

class pack_k_bits_bb_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::pack_k_bits_bb > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(pack_k_bits_bb_sptr self) -> pack_k_bits_bb_sptr
        __init__(pack_k_bits_bb_sptr self, pack_k_bits_bb p) -> pack_k_bits_bb_sptr
        """
        _blocks_swig10.pack_k_bits_bb_sptr_swiginit(self, _blocks_swig10.new_pack_k_bits_bb_sptr(*args))

    def __deref__(self) -> "gr::blocks::pack_k_bits_bb *":
        r"""__deref__(pack_k_bits_bb_sptr self) -> pack_k_bits_bb"""
        return _blocks_swig10.pack_k_bits_bb_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_pack_k_bits_bb_sptr

    def make(self, k: "unsigned int") -> "gr::blocks::pack_k_bits_bb::sptr":
        r"""
        make(pack_k_bits_bb_sptr self, unsigned int k) -> pack_k_bits_bb_sptr
        Converts a stream of bytes with 1 bit in the LSB to a byte with k relevant bits.

        This block takes in K bytes at a time, and uses the least significant bit to form a new byte.


        Example: k = 4 in = [0,1,0,1, 0x81,0x00,0x00,0x00] out = [0x05, 0x08]

        Constructor Specific Documentation:

        Make a pack_k_bits block.

        Args:
            k : number of bits to be packed.
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_make(self, k)

    def history(self) -> "unsigned int":
        r"""history(pack_k_bits_bb_sptr self) -> unsigned int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(pack_k_bits_bb_sptr self, int which, int delay)
        declare_sample_delay(pack_k_bits_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(pack_k_bits_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(pack_k_bits_bb_sptr self, int multiple)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(pack_k_bits_bb_sptr self) -> int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(pack_k_bits_bb_sptr self) -> double"""
        return _blocks_swig10.pack_k_bits_bb_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(pack_k_bits_bb_sptr self) -> uint64_t"""
        return _blocks_swig10.pack_k_bits_bb_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(pack_k_bits_bb_sptr self) -> uint64_t"""
        return _blocks_swig10.pack_k_bits_bb_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(pack_k_bits_bb_sptr self) -> bool"""
        return _blocks_swig10.pack_k_bits_bb_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(pack_k_bits_bb_sptr self) -> bool"""
        return _blocks_swig10.pack_k_bits_bb_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(pack_k_bits_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.pack_k_bits_bb_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(pack_k_bits_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.pack_k_bits_bb_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(pack_k_bits_bb_sptr self, std::string level)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(pack_k_bits_bb_sptr self) -> std::string"""
        return _blocks_swig10.pack_k_bits_bb_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(pack_k_bits_bb_sptr self) -> int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(pack_k_bits_bb_sptr self, int m)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(pack_k_bits_bb_sptr self)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(pack_k_bits_bb_sptr self) -> bool"""
        return _blocks_swig10.pack_k_bits_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(pack_k_bits_bb_sptr self, int m)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(pack_k_bits_bb_sptr self) -> int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(pack_k_bits_bb_sptr self, int i) -> long"""
        return _blocks_swig10.pack_k_bits_bb_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(pack_k_bits_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(pack_k_bits_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(pack_k_bits_bb_sptr self, int i) -> long"""
        return _blocks_swig10.pack_k_bits_bb_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(pack_k_bits_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(pack_k_bits_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(pack_k_bits_bb_sptr self, int which) -> float
        pc_input_buffers_full(pack_k_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(pack_k_bits_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(pack_k_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(pack_k_bits_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(pack_k_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(pack_k_bits_bb_sptr self, int which) -> float
        pc_output_buffers_full(pack_k_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(pack_k_bits_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(pack_k_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(pack_k_bits_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(pack_k_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(pack_k_bits_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(pack_k_bits_bb_sptr self)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(pack_k_bits_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.pack_k_bits_bb_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(pack_k_bits_bb_sptr self) -> int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(pack_k_bits_bb_sptr self) -> int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(pack_k_bits_bb_sptr self, int priority) -> int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(pack_k_bits_bb_sptr self) -> std::string"""
        return _blocks_swig10.pack_k_bits_bb_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(pack_k_bits_bb_sptr self) -> std::string"""
        return _blocks_swig10.pack_k_bits_bb_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(pack_k_bits_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.pack_k_bits_bb_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(pack_k_bits_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.pack_k_bits_bb_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(pack_k_bits_bb_sptr self) -> long"""
        return _blocks_swig10.pack_k_bits_bb_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(pack_k_bits_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.pack_k_bits_bb_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(pack_k_bits_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.pack_k_bits_bb_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(pack_k_bits_bb_sptr self) -> std::string"""
        return _blocks_swig10.pack_k_bits_bb_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(pack_k_bits_bb_sptr self, std::string name)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(pack_k_bits_bb_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.pack_k_bits_bb_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(pack_k_bits_bb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.pack_k_bits_bb_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(pack_k_bits_bb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.pack_k_bits_bb_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(pack_k_bits_bb_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.pack_k_bits_bb_sptr_message_subscribers(self, which_port)

# Register pack_k_bits_bb_sptr in _blocks_swig10:
_blocks_swig10.pack_k_bits_bb_sptr_swigregister(pack_k_bits_bb_sptr)


pack_k_bits_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pack_k_bits_bb = pack_k_bits_bb.make;

class packed_to_unpacked_bb(object):
    r"""
    Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

    input: stream of T; output: stream of T


    This is the inverse of gr::blocks::unpacked_to_packed_XX.


    The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.


    The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

    Constructor Specific Documentation:



    Args:
        bits_per_chunk : 
        endianness : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(bits_per_chunk: "unsigned int", endianness: "gr::endianness_t") -> "gr::blocks::packed_to_unpacked< unsigned char >::sptr":
        r"""
        make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_bb_sptr
        Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

        input: stream of T; output: stream of T


        This is the inverse of gr::blocks::unpacked_to_packed_XX.


        The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.


        The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

        Constructor Specific Documentation:



        Args:
            bits_per_chunk : 
            endianness : 
        """
        return _blocks_swig10.packed_to_unpacked_bb_make(bits_per_chunk, endianness)
    __swig_destroy__ = _blocks_swig10.delete_packed_to_unpacked_bb

# Register packed_to_unpacked_bb in _blocks_swig10:
_blocks_swig10.packed_to_unpacked_bb_swigregister(packed_to_unpacked_bb)

def packed_to_unpacked_bb_make(bits_per_chunk: "unsigned int", endianness: "gr::endianness_t") -> "gr::blocks::packed_to_unpacked< unsigned char >::sptr":
    r"""
    packed_to_unpacked_bb_make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_bb_sptr
    Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

    input: stream of T; output: stream of T


    This is the inverse of gr::blocks::unpacked_to_packed_XX.


    The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.


    The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

    Constructor Specific Documentation:



    Args:
        bits_per_chunk : 
        endianness : 
    """
    return _blocks_swig10.packed_to_unpacked_bb_make(bits_per_chunk, endianness)

class packed_to_unpacked_bb_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::packed_to_unpacked< std::uint8_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(packed_to_unpacked_bb_sptr self) -> packed_to_unpacked_bb_sptr
        __init__(packed_to_unpacked_bb_sptr self, packed_to_unpacked_bb p) -> packed_to_unpacked_bb_sptr
        """
        _blocks_swig10.packed_to_unpacked_bb_sptr_swiginit(self, _blocks_swig10.new_packed_to_unpacked_bb_sptr(*args))

    def __deref__(self) -> "gr::blocks::packed_to_unpacked< std::uint8_t > *":
        r"""__deref__(packed_to_unpacked_bb_sptr self) -> packed_to_unpacked_bb"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_packed_to_unpacked_bb_sptr

    def make(self, bits_per_chunk: "unsigned int", endianness: "gr::endianness_t") -> "gr::blocks::packed_to_unpacked< unsigned char >::sptr":
        r"""
        make(packed_to_unpacked_bb_sptr self, unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_bb_sptr
        Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

        input: stream of T; output: stream of T


        This is the inverse of gr::blocks::unpacked_to_packed_XX.


        The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.


        The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

        Constructor Specific Documentation:



        Args:
            bits_per_chunk : 
            endianness : 
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_make(self, bits_per_chunk, endianness)

    def history(self) -> "unsigned int":
        r"""history(packed_to_unpacked_bb_sptr self) -> unsigned int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(packed_to_unpacked_bb_sptr self, int which, int delay)
        declare_sample_delay(packed_to_unpacked_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(packed_to_unpacked_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(packed_to_unpacked_bb_sptr self, int multiple)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(packed_to_unpacked_bb_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(packed_to_unpacked_bb_sptr self) -> double"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(packed_to_unpacked_bb_sptr self) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(packed_to_unpacked_bb_sptr self) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(packed_to_unpacked_bb_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(packed_to_unpacked_bb_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(packed_to_unpacked_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(packed_to_unpacked_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(packed_to_unpacked_bb_sptr self, std::string level)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(packed_to_unpacked_bb_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(packed_to_unpacked_bb_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(packed_to_unpacked_bb_sptr self, int m)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(packed_to_unpacked_bb_sptr self)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(packed_to_unpacked_bb_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(packed_to_unpacked_bb_sptr self, int m)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(packed_to_unpacked_bb_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(packed_to_unpacked_bb_sptr self, int i) -> long"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(packed_to_unpacked_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(packed_to_unpacked_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(packed_to_unpacked_bb_sptr self, int i) -> long"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(packed_to_unpacked_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(packed_to_unpacked_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(packed_to_unpacked_bb_sptr self, int which) -> float
        pc_input_buffers_full(packed_to_unpacked_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(packed_to_unpacked_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(packed_to_unpacked_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(packed_to_unpacked_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(packed_to_unpacked_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(packed_to_unpacked_bb_sptr self, int which) -> float
        pc_output_buffers_full(packed_to_unpacked_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(packed_to_unpacked_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(packed_to_unpacked_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(packed_to_unpacked_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(packed_to_unpacked_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(packed_to_unpacked_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(packed_to_unpacked_bb_sptr self)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(packed_to_unpacked_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(packed_to_unpacked_bb_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(packed_to_unpacked_bb_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(packed_to_unpacked_bb_sptr self, int priority) -> int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(packed_to_unpacked_bb_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(packed_to_unpacked_bb_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(packed_to_unpacked_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(packed_to_unpacked_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(packed_to_unpacked_bb_sptr self) -> long"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(packed_to_unpacked_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(packed_to_unpacked_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(packed_to_unpacked_bb_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(packed_to_unpacked_bb_sptr self, std::string name)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(packed_to_unpacked_bb_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(packed_to_unpacked_bb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(packed_to_unpacked_bb_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(packed_to_unpacked_bb_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_message_subscribers(self, which_port)

# Register packed_to_unpacked_bb_sptr in _blocks_swig10:
_blocks_swig10.packed_to_unpacked_bb_sptr_swigregister(packed_to_unpacked_bb_sptr)


packed_to_unpacked_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packed_to_unpacked_bb = packed_to_unpacked_bb.make

class packed_to_unpacked_ss(object):
    r"""
    Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

    input: stream of T; output: stream of T


    This is the inverse of gr::blocks::unpacked_to_packed_XX.


    The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.


    The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

    Constructor Specific Documentation:



    Args:
        bits_per_chunk : 
        endianness : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(bits_per_chunk: "unsigned int", endianness: "gr::endianness_t") -> "gr::blocks::packed_to_unpacked< short >::sptr":
        r"""
        make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_ss_sptr
        Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

        input: stream of T; output: stream of T


        This is the inverse of gr::blocks::unpacked_to_packed_XX.


        The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.


        The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

        Constructor Specific Documentation:



        Args:
            bits_per_chunk : 
            endianness : 
        """
        return _blocks_swig10.packed_to_unpacked_ss_make(bits_per_chunk, endianness)
    __swig_destroy__ = _blocks_swig10.delete_packed_to_unpacked_ss

# Register packed_to_unpacked_ss in _blocks_swig10:
_blocks_swig10.packed_to_unpacked_ss_swigregister(packed_to_unpacked_ss)

def packed_to_unpacked_ss_make(bits_per_chunk: "unsigned int", endianness: "gr::endianness_t") -> "gr::blocks::packed_to_unpacked< short >::sptr":
    r"""
    packed_to_unpacked_ss_make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_ss_sptr
    Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

    input: stream of T; output: stream of T


    This is the inverse of gr::blocks::unpacked_to_packed_XX.


    The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.


    The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

    Constructor Specific Documentation:



    Args:
        bits_per_chunk : 
        endianness : 
    """
    return _blocks_swig10.packed_to_unpacked_ss_make(bits_per_chunk, endianness)

class packed_to_unpacked_ss_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::packed_to_unpacked< std::int16_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(packed_to_unpacked_ss_sptr self) -> packed_to_unpacked_ss_sptr
        __init__(packed_to_unpacked_ss_sptr self, packed_to_unpacked_ss p) -> packed_to_unpacked_ss_sptr
        """
        _blocks_swig10.packed_to_unpacked_ss_sptr_swiginit(self, _blocks_swig10.new_packed_to_unpacked_ss_sptr(*args))

    def __deref__(self) -> "gr::blocks::packed_to_unpacked< std::int16_t > *":
        r"""__deref__(packed_to_unpacked_ss_sptr self) -> packed_to_unpacked_ss"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_packed_to_unpacked_ss_sptr

    def make(self, bits_per_chunk: "unsigned int", endianness: "gr::endianness_t") -> "gr::blocks::packed_to_unpacked< short >::sptr":
        r"""
        make(packed_to_unpacked_ss_sptr self, unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_ss_sptr
        Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

        input: stream of T; output: stream of T


        This is the inverse of gr::blocks::unpacked_to_packed_XX.


        The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.


        The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

        Constructor Specific Documentation:



        Args:
            bits_per_chunk : 
            endianness : 
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_make(self, bits_per_chunk, endianness)

    def history(self) -> "unsigned int":
        r"""history(packed_to_unpacked_ss_sptr self) -> unsigned int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(packed_to_unpacked_ss_sptr self, int which, int delay)
        declare_sample_delay(packed_to_unpacked_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(packed_to_unpacked_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(packed_to_unpacked_ss_sptr self, int multiple)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(packed_to_unpacked_ss_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(packed_to_unpacked_ss_sptr self) -> double"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(packed_to_unpacked_ss_sptr self) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(packed_to_unpacked_ss_sptr self) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(packed_to_unpacked_ss_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(packed_to_unpacked_ss_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(packed_to_unpacked_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(packed_to_unpacked_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(packed_to_unpacked_ss_sptr self, std::string level)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(packed_to_unpacked_ss_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(packed_to_unpacked_ss_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(packed_to_unpacked_ss_sptr self, int m)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(packed_to_unpacked_ss_sptr self)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(packed_to_unpacked_ss_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(packed_to_unpacked_ss_sptr self, int m)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(packed_to_unpacked_ss_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(packed_to_unpacked_ss_sptr self, int i) -> long"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(packed_to_unpacked_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(packed_to_unpacked_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(packed_to_unpacked_ss_sptr self, int i) -> long"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(packed_to_unpacked_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(packed_to_unpacked_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(packed_to_unpacked_ss_sptr self, int which) -> float
        pc_input_buffers_full(packed_to_unpacked_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(packed_to_unpacked_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(packed_to_unpacked_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(packed_to_unpacked_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(packed_to_unpacked_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(packed_to_unpacked_ss_sptr self, int which) -> float
        pc_output_buffers_full(packed_to_unpacked_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(packed_to_unpacked_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(packed_to_unpacked_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(packed_to_unpacked_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(packed_to_unpacked_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(packed_to_unpacked_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(packed_to_unpacked_ss_sptr self)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(packed_to_unpacked_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(packed_to_unpacked_ss_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(packed_to_unpacked_ss_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(packed_to_unpacked_ss_sptr self, int priority) -> int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(packed_to_unpacked_ss_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(packed_to_unpacked_ss_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(packed_to_unpacked_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(packed_to_unpacked_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(packed_to_unpacked_ss_sptr self) -> long"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(packed_to_unpacked_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(packed_to_unpacked_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(packed_to_unpacked_ss_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(packed_to_unpacked_ss_sptr self, std::string name)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(packed_to_unpacked_ss_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(packed_to_unpacked_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(packed_to_unpacked_ss_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(packed_to_unpacked_ss_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_message_subscribers(self, which_port)

# Register packed_to_unpacked_ss_sptr in _blocks_swig10:
_blocks_swig10.packed_to_unpacked_ss_sptr_swigregister(packed_to_unpacked_ss_sptr)


packed_to_unpacked_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packed_to_unpacked_ss = packed_to_unpacked_ss.make

class packed_to_unpacked_ii(object):
    r"""
    Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

    input: stream of T; output: stream of T


    This is the inverse of gr::blocks::unpacked_to_packed_XX.


    The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.


    The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

    Constructor Specific Documentation:



    Args:
        bits_per_chunk : 
        endianness : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(bits_per_chunk: "unsigned int", endianness: "gr::endianness_t") -> "gr::blocks::packed_to_unpacked< int >::sptr":
        r"""
        make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_ii_sptr
        Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

        input: stream of T; output: stream of T


        This is the inverse of gr::blocks::unpacked_to_packed_XX.


        The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.


        The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

        Constructor Specific Documentation:



        Args:
            bits_per_chunk : 
            endianness : 
        """
        return _blocks_swig10.packed_to_unpacked_ii_make(bits_per_chunk, endianness)
    __swig_destroy__ = _blocks_swig10.delete_packed_to_unpacked_ii

# Register packed_to_unpacked_ii in _blocks_swig10:
_blocks_swig10.packed_to_unpacked_ii_swigregister(packed_to_unpacked_ii)

def packed_to_unpacked_ii_make(bits_per_chunk: "unsigned int", endianness: "gr::endianness_t") -> "gr::blocks::packed_to_unpacked< int >::sptr":
    r"""
    packed_to_unpacked_ii_make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_ii_sptr
    Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

    input: stream of T; output: stream of T


    This is the inverse of gr::blocks::unpacked_to_packed_XX.


    The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.


    The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

    Constructor Specific Documentation:



    Args:
        bits_per_chunk : 
        endianness : 
    """
    return _blocks_swig10.packed_to_unpacked_ii_make(bits_per_chunk, endianness)

class packed_to_unpacked_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::blocks::packed_to_unpacked< std::int32_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(packed_to_unpacked_ii_sptr self) -> packed_to_unpacked_ii_sptr
        __init__(packed_to_unpacked_ii_sptr self, packed_to_unpacked_ii p) -> packed_to_unpacked_ii_sptr
        """
        _blocks_swig10.packed_to_unpacked_ii_sptr_swiginit(self, _blocks_swig10.new_packed_to_unpacked_ii_sptr(*args))

    def __deref__(self) -> "gr::blocks::packed_to_unpacked< std::int32_t > *":
        r"""__deref__(packed_to_unpacked_ii_sptr self) -> packed_to_unpacked_ii"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr___deref__(self)
    __swig_destroy__ = _blocks_swig10.delete_packed_to_unpacked_ii_sptr

    def make(self, bits_per_chunk: "unsigned int", endianness: "gr::endianness_t") -> "gr::blocks::packed_to_unpacked< int >::sptr":
        r"""
        make(packed_to_unpacked_ii_sptr self, unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_ii_sptr
        Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

        input: stream of T; output: stream of T


        This is the inverse of gr::blocks::unpacked_to_packed_XX.


        The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.


        The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

        Constructor Specific Documentation:



        Args:
            bits_per_chunk : 
            endianness : 
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_make(self, bits_per_chunk, endianness)

    def history(self) -> "unsigned int":
        r"""history(packed_to_unpacked_ii_sptr self) -> unsigned int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(packed_to_unpacked_ii_sptr self, int which, int delay)
        declare_sample_delay(packed_to_unpacked_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(packed_to_unpacked_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(packed_to_unpacked_ii_sptr self, int multiple)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(packed_to_unpacked_ii_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(packed_to_unpacked_ii_sptr self) -> double"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(packed_to_unpacked_ii_sptr self) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(packed_to_unpacked_ii_sptr self) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(packed_to_unpacked_ii_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(packed_to_unpacked_ii_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(packed_to_unpacked_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(packed_to_unpacked_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(packed_to_unpacked_ii_sptr self, std::string level)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(packed_to_unpacked_ii_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(packed_to_unpacked_ii_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(packed_to_unpacked_ii_sptr self, int m)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(packed_to_unpacked_ii_sptr self)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(packed_to_unpacked_ii_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(packed_to_unpacked_ii_sptr self, int m)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(packed_to_unpacked_ii_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(packed_to_unpacked_ii_sptr self, int i) -> long"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(packed_to_unpacked_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(packed_to_unpacked_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(packed_to_unpacked_ii_sptr self, int i) -> long"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(packed_to_unpacked_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(packed_to_unpacked_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(packed_to_unpacked_ii_sptr self, int which) -> float
        pc_input_buffers_full(packed_to_unpacked_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(packed_to_unpacked_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(packed_to_unpacked_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(packed_to_unpacked_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(packed_to_unpacked_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(packed_to_unpacked_ii_sptr self, int which) -> float
        pc_output_buffers_full(packed_to_unpacked_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(packed_to_unpacked_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(packed_to_unpacked_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(packed_to_unpacked_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(packed_to_unpacked_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(packed_to_unpacked_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(packed_to_unpacked_ii_sptr self)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(packed_to_unpacked_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(packed_to_unpacked_ii_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(packed_to_unpacked_ii_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(packed_to_unpacked_ii_sptr self, int priority) -> int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(packed_to_unpacked_ii_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(packed_to_unpacked_ii_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(packed_to_unpacked_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(packed_to_unpacked_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(packed_to_unpacked_ii_sptr self) -> long"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(packed_to_unpacked_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(packed_to_unpacked_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(packed_to_unpacked_ii_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(packed_to_unpacked_ii_sptr self, std::string name)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(packed_to_unpacked_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(packed_to_unpacked_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(packed_to_unpacked_ii_sptr self) -> swig_pmt_ptr"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(packed_to_unpacked_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_message_subscribers(self, which_port)

# Register packed_to_unpacked_ii_sptr in _blocks_swig10:
_blocks_swig10.packed_to_unpacked_ii_sptr_swigregister(packed_to_unpacked_ii_sptr)


packed_to_unpacked_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packed_to_unpacked_ii = packed_to_unpacked_ii.make



